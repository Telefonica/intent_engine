# generated by datamodel-codegen:
#   filename:  NrmgIntent.yaml
#   timestamp: 2025-02-24T09:20:01+00:00

from __future__ import annotations

from datetime import date, datetime
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from pydantic import BaseModel, Extra, Field, confloat, conint, constr
from typing_extensions import Literal


class DayInYear(BaseModel):
    month: Optional[str] = None
    monthDay: Optional[str] = None


class DnList(BaseModel):
    __root__: List[str]


class PlmnId(BaseModel):
    mcc: Optional[constr(regex=r'^[0-9]{3}$')] = None
    mnc: Optional[constr(regex=r'^[0-9]{2,3}$')] = None


class TimeWindow1(BaseModel):
    startTime: Optional[datetime] = None
    endTime: Optional[datetime] = None


class TimeWindow2(BaseModel):
    startTime: Optional[datetime] = None


class TimeWindow3(BaseModel):
    endTime: Optional[datetime] = None


class GeoCoordinate(BaseModel):
    latitude: Optional[confloat(ge=-90.0, le=90.0)] = None
    longitude: Optional[confloat(ge=-180.0, le=180.0)] = None
    altitude: Optional[float] = None


class GeoArea(BaseModel):
    convexGeoPolygon: Optional[List[GeoCoordinate]] = None


class GeoAreaToCellMapping(BaseModel):
    geoArea: Optional[GeoArea] = None
    associationThreshold: Optional[int] = None


class VnfParameter(BaseModel):
    vnfInstanceId: Optional[str] = None
    vnfdId: Optional[str] = None
    flavourId: Optional[str] = None
    autoScalable: Optional[bool] = None


class PeeParameter(BaseModel):
    siteIdentification: Optional[str] = None
    siteDescription: Optional[str] = None
    siteLatitude: Optional[confloat(ge=-90.0, le=90.0)] = None
    siteLongitude: Optional[confloat(ge=-180.0, le=180.0)] = None
    siteAltitude: Optional[float] = None
    equipmentType: Optional[str] = None
    environmentType: Optional[str] = None
    powerInterface: Optional[str] = None


class Ipv6Addr(BaseModel):
    pass


class Ipv6Prefix(BaseModel):
    pass


class IpAddr(BaseModel):
    __root__: Union[
        Ipv6Addr,
        Ipv6Prefix,
        constr(
            regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
        ),
    ]


class Host(BaseModel):
    __root__: Union[
        Union[
            Ipv6Addr,
            Ipv6Prefix,
            constr(
                regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
            ),
        ],
        str,
    ]


class TimeInterval(BaseModel):
    intervalStart: Optional[str] = Field(
        None, description='format (e.g., full-time) is from RFC 3339'
    )
    intervalEnd: Optional[str] = Field(
        None, description='format (e.g., full-time) is from RFC 3339'
    )


class ThresholdHysteresis(BaseModel):
    high: Union[int, float]
    low: Optional[float] = None


class ThresholdLevelInd1(BaseModel):
    up: Optional[ThresholdHysteresis] = None


class ThresholdLevelInd2(BaseModel):
    down: Optional[ThresholdHysteresis] = None


class ThresholdInfo(BaseModel):
    observedMeasurement: str
    observedValue: float
    thresholdLevel: Optional[Union[ThresholdLevelInd1, ThresholdLevelInd2]] = None
    armTime: Optional[datetime] = None


class CorrelatedNotification(BaseModel):
    sourceObjectInstance: str
    notificationIds: List[int]


class AlarmRecord(BaseModel):
    objectInstance: Optional[str] = None
    notificationId: Optional[int] = None
    alarmRaisedTime: Optional[datetime] = None
    alarmChangedTime: Optional[datetime] = None
    alarmClearedTime: Optional[datetime] = None
    alarmType: Optional[
        Literal[
            'COMMUNICATIONS_ALARM',
            'QUALITY_OF_SERVICE_ALARM',
            'PROCESSING_ERROR_ALARM',
            'EQUIPMENT_ALARM',
            'ENVIRONMENTAL_ALARM',
            'INTEGRITY_VIOLATION',
            'OPERATIONAL_VIOLATION',
            'PHYSICAL_VIOLATION',
            'SECURITY_SERVICE_OR_MECHANISM_VIOLATION',
            'TIME_DOMAIN_VIOLATION',
        ]
    ] = None
    probableCause: Optional[
        Union[
            Union[
                Literal[
                    'PROBABLE_CAUSE_001',
                    'PROBABLE_CAUSE_002',
                    'PROBABLE_CAUSE_003',
                    'PROBABLE_CAUSE_004',
                    'PROBABLE_CAUSE_005',
                ],
                str,
            ],
            int,
        ]
    ] = Field(
        None,
        description='The value of the probable cause may be a specific standardized string, or any vendor provided string. Probable cause strings are not standardized in the present document. They may be added in a future version. Up to then the mapping of the generic probable cause strings "PROBABLE_CAUSE_001" to "PROBABLE_CAUSE_005" is vendor specific. The value of the probable cause may also be an integer. The mapping of integer values to probable causes is vendor specific.',
    )
    specificProblem: Optional[Union[str, int]] = None
    perceivedSeverity: Optional[
        Literal['INDETERMINATE', 'CRITICAL', 'MAJOR', 'MINOR', 'WARNING', 'CLEARED']
    ] = None
    backedUpStatus: Optional[bool] = None
    backUpObject: Optional[str] = None
    trendIndication: Optional[Literal['MORE_SEVERE', 'NO_CHANGE', 'LESS_SEVERE']] = None
    thresholdinfo: Optional[ThresholdInfo] = None
    correlatedNotifications: Optional[List[CorrelatedNotification]] = None
    stateChangeDefinition: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The first array item contains the attribute name value pairs with the new values, and the second array item the attribute name value pairs with the optional old values.',
    )
    monitoredAttributes: Optional[Dict[str, Any]] = None
    proposedRepairActions: Optional[str] = None
    additionalText: Optional[str] = None
    additionalInformation: Optional[Dict[str, Any]] = None
    rootCauseIndicator: Optional[bool] = None
    ackTime: Optional[datetime] = None
    ackUserId: Optional[str] = None
    ackSystemId: Optional[str] = None
    ackState: Optional[Literal['ACKNOWLEDGED', 'UNACKNOWLEDGED']] = None
    clearUserId: Optional[str] = None
    clearSystemId: Optional[str] = None
    serviceUser: Optional[str] = None
    serviceProvider: Optional[str] = None
    securityAlarmDetector: Optional[str] = None


class Attributes(BaseModel):
    administrativeState: Optional[Literal['LOCKED', 'UNLOCKED']] = None
    operationalState: Optional[Literal['ENABLED', 'DISABLED']] = None
    numOfAlarmRecords: Optional[int] = None
    lastModification: Optional[datetime] = None
    alarmRecords: Optional[Dict[str, AlarmRecord]] = Field(
        None,
        description='This resource represents a map of alarm records. The alarmIds are used as keys in the map.',
    )


class Error(BaseModel):
    errorInfo: Optional[str] = None


class ErrorResponse(BaseModel):
    error: Optional[Error] = None


class Subscription(BaseModel):
    consumerReference: Optional[str] = None
    timeTick: Optional[int] = None
    filter: Optional[str] = Field(
        None, description='The filter format shall be compliant to Jex (TS 32.161).'
    )


class OtherProblem(BaseModel):
    status: Optional[str] = None
    type: str
    reason: Optional[str] = None
    title: Optional[str] = None
    badQueryParams: Optional[List[str]] = None


class ErrorResponseGet(BaseModel):
    status: Optional[str] = None
    type: str
    reason: Optional[str] = None
    title: Optional[str] = None
    badQueryParams: Optional[List[str]] = None
    otherProblems: Optional[List[OtherProblem]] = None


class OtherProblem1(BaseModel):
    status: Optional[str] = None
    type: str
    reason: Optional[str] = None
    title: Optional[str] = None
    badAttributes: Optional[List[str]] = None
    badObjects: Optional[List[str]] = None


class ErrorResponseDefault(BaseModel):
    status: Optional[str] = None
    type: str
    reason: Optional[str] = None
    title: Optional[str] = None
    badAttributes: Optional[List[str]] = None
    badObjects: Optional[List[str]] = None
    otherProblems: Optional[List[OtherProblem1]] = None


class OtherProblem2(BaseModel):
    status: Optional[str] = None
    type: str
    reason: Optional[str] = None
    title: Optional[str] = None
    badOp: str


class ErrorResponsePatch(BaseModel):
    status: Optional[str] = None
    type: str
    reason: Optional[str] = None
    title: Optional[str] = None
    badOP: Optional[str] = None
    otherProblems: Optional[List[OtherProblem2]] = None


class Comment(BaseModel):
    commentTime: Optional[datetime] = None
    commentUserId: Optional[str] = None
    commentSystemId: Optional[str] = None
    commentText: Optional[str] = None


class Resource1(BaseModel):
    id: str
    objectClass: Optional[str] = None
    objectInstance: Optional[str] = None
    attributes: Optional[Dict[str, Any]] = None


class SupportedPerfMetricGroup(BaseModel):
    performanceMetrics: Optional[List[str]] = None
    granularityPeriods: Optional[List[conint(ge=1)]] = None
    reportingMethods: Optional[
        List[
            Literal[
                'FILE_BASED_LOC_SET_BY_PRODUCER',
                'FILE_BASED_LOC_SET_BY_CONSUMER',
                'STREAM_BASED',
            ]
        ]
    ] = None
    reportingPeriods: Optional[List[conint(ge=1)]] = None


class ReportingCtrl1(BaseModel):
    fileReportingPeriod: Optional[int] = None


class ReportingCtrl2(BaseModel):
    fileReportingPeriod: Optional[int] = None
    notificationRecipientAddress: Optional[str] = None


class ReportingCtrl3(BaseModel):
    fileReportingPeriod: Optional[int] = None
    fileLocation: Optional[str] = None


class ReportingCtrl4(BaseModel):
    streamTarget: Optional[str] = None


class ReportingCtrl(BaseModel):
    __root__: Union[ReportingCtrl1, ReportingCtrl2, ReportingCtrl3, ReportingCtrl4]


class Scope1(BaseModel):
    scopeType: Optional[
        Literal['BASE_ONLY', 'BASE_ALL', 'BASE_NTH_LEVEL', 'BASE_SUBTREE']
    ] = None
    scopeLevel: Optional[int] = None


class Scope2(BaseModel):
    dataNodeSelector: Optional[str] = None


class Scope(BaseModel):
    __root__: Union[Scope1, Scope2]


class ProcessMonitor(BaseModel):
    jobId: Optional[str] = None
    status: Optional[
        Literal[
            'NOT_STARTED',
            'RUNNING',
            'FINSHED',
            'FAILED',
            'PARTIALLY_FAILED',
            'CANCELLING',
            'CANCELLED',
        ]
    ] = None
    progressPercentage: Optional[conint(ge=0, le=100)] = None
    progressStateInfo: Optional[str] = None
    resultStateInfo: Optional[str] = None
    startTime: Optional[datetime] = None
    endTime: Optional[datetime] = None
    timer: Optional[int] = None


class IpAddr1(BaseModel):
    __root__: Union[
        Ipv6Addr,
        constr(
            regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
        ),
    ]


class SchedulingTime1(BaseModel):
    timeIntervals: Optional[List[TimeInterval]] = None


class SchedulingTime2(BaseModel):
    timeIntervals: Optional[List[TimeInterval]] = None
    daysOfWeek: Optional[
        List[
            Literal[
                'MONDAY',
                'TUESDAY',
                'WEDNESDAY',
                'THURSDAY',
                'FRIDAY',
                'SATURDAY',
                'SUNDAY',
            ]
        ]
    ] = None


class SchedulingTime3(BaseModel):
    timeIntervals: Optional[List[TimeInterval]] = None
    daysOfMonth: Optional[List[conint(ge=0, le=31)]] = None


class NpnIdType(BaseModel):
    plmnId: Optional[PlmnId] = None
    cAGIdList: Optional[List[str]] = None
    nIDList: Optional[List[constr(regex=r'^[A-Fa-f0-9]{11}$')]] = None


class SubNetworkAttr(BaseModel):
    dnPrefix: Optional[str] = None
    userLabel: Optional[str] = None
    userDefinedNetworkType: Optional[str] = None
    setOfMcc: Optional[List[constr(regex=r'^[0-9]{3}$')]] = None
    priorityLabel: Optional[int] = None
    supportedPerfMetricGroups: Optional[List[SupportedPerfMetricGroup]] = None
    supportedTraceMetrics: Optional[List[str]] = None


class ManagedElementAttr(BaseModel):
    dnPrefix: Optional[str] = None
    managedElementTypeList: Optional[List[str]] = None
    userLabel: Optional[str] = None
    locationName: Optional[str] = None
    managedBy: Optional[List[str]] = None
    vendorName: Optional[str] = None
    userDefinedState: Optional[str] = None
    swVersion: Optional[str] = None
    priorityLabel: Optional[int] = None
    supportedPerfMetricGroups: Optional[List[SupportedPerfMetricGroup]] = None
    supportedTraceMetrics: Optional[List[str]] = None


class ManagedFunctionAttr(BaseModel):
    userLabel: Optional[str] = None
    vnfParametersList: Optional[List[VnfParameter]] = None
    peeParametersList: Optional[List[PeeParameter]] = None
    priorityLabel: Optional[int] = None
    supportedPerfMetricGroups: Optional[List[SupportedPerfMetricGroup]] = None
    supportedTraceMetrics: Optional[List[str]] = None


class EPRPAttr(BaseModel):
    userLabel: Optional[str] = None
    farEndEntity: Optional[str] = None
    supportedPerfMetricGroups: Optional[List[SupportedPerfMetricGroup]] = None


class Attributes1(BaseModel):
    vsDataType: Optional[str] = None
    vsDataFormatVersion: Optional[str] = None
    vsData: Optional[Any] = None


class Attributes3(BaseModel):
    userLabel: Optional[str] = None
    managedElements: Optional[List[str]] = None
    vendorName: Optional[str] = None
    userDefinedState: Optional[str] = None
    locationName: Optional[str] = None
    swVersion: Optional[str] = None


class Attributes4(BaseModel):
    systemDN: Optional[str] = None


class Attributes5(BaseModel):
    dnPrefix: Optional[str] = None


class Attributes6(BaseModel):
    schedulingTimes: Optional[
        List[
            Union[
                SchedulingTime1,
                SchedulingTime2,
                SchedulingTime3,
                Union[TimeWindow1, TimeWindow2, TimeWindow3],
            ]
        ]
    ] = Field(None, min_items=1)
    schedulerStatus: Optional[bool] = None


class Attributes7(BaseModel):
    condition: Optional[str] = None
    conditionStatus: Optional[bool] = None


class MLContext(BaseModel):
    inferenceEntityRef: Optional[List[str]] = None
    dataProviderRef: Optional[List[str]] = None


class ModelPerformance(BaseModel):
    inferenceOutputName: Optional[str] = None
    performanceMetric: Optional[str] = None
    performanceScore: Optional[float] = None
    decisionConfidenceScore: Optional[float] = None


class ProcessMonitor1(BaseModel):
    status: Optional[str] = None
    progressPercentage: Optional[conint(ge=0, le=100)] = None
    progressStateInfo: Optional[str] = None
    resultStateInfo: Optional[str] = None


class AIMLManagementPolicy(BaseModel):
    thresholdList: Optional[List[str]] = None


class SupportedPerfIndicator(BaseModel):
    performanceIndicatorName: Optional[str] = None
    isSupportedForTraining: Optional[bool] = None
    isSupportedForTesting: Optional[bool] = None


class ManagedActivationScope1(BaseModel):
    dNList: Optional[List[str]] = None


class ManagedActivationScope2(BaseModel):
    timeWindow: Optional[List[Union[TimeWindow1, TimeWindow2, TimeWindow3]]] = None


class ManagedActivationScope3(BaseModel):
    geoPolygon: Optional[List[GeoArea]] = None


class MLCapabilityInfo(BaseModel):
    inferenceType: Optional[str] = None
    capabilityName: Optional[str] = None
    mLCapabilityParameters: Optional[Dict[str, Any]] = Field(
        None,
        description='A map (list of key-value pairs) for an inferenceType and capabilityName',
    )


class AvailMLCapabilityReport(BaseModel):
    mLCapabilityVersionId: Optional[List[str]] = None
    expectedPerformanceGains: Optional[List[ModelPerformance]] = None
    mLEntityRef: Optional[List[str]] = None


class InferenceOutput(BaseModel):
    inferenceOutputId: Optional[List[str]] = None
    inferenceType: Optional[str] = None
    inferenceOutputTime: Optional[List[datetime]] = None
    inferencePerformance: Optional[ModelPerformance] = None
    outputResult: Optional[Dict[str, Any]] = Field(
        None,
        description="A map (list of key-value pairs) for Inference result name and it's value",
    )


class Attributes9(ManagedFunctionAttr):
    mLEntityRepositoryRef: Optional[str] = None


class Attributes10(BaseModel):
    inferenceType: Optional[str] = None
    candidateTrainingDataSource: Optional[List[str]] = None
    trainingDataQualityScore: Optional[float] = None
    trainingRequestSource: Optional[str] = None
    requestStatus: Optional[
        Literal[
            'NOT_STARTED',
            'IN_PROGRESS',
            'SUSPENDED',
            'FINISHED',
            'CANCELLED',
            'CANCELLING',
        ]
    ] = None
    expectedRuntimeContext: Optional[MLContext] = None
    performanceRequirements: Optional[List[ModelPerformance]] = None
    cancelRequest: Optional[bool] = None
    suspendRequest: Optional[bool] = None
    mLEntityToTrainRef: Optional[str] = None
    mLEntityCoordinationGroupToTrainRef: Optional[str] = None


class Attributes11(BaseModel):
    priority: Optional[int] = None
    terminationConditions: Optional[
        Literal[
            'UPDATED_IN_INFERENCE_FUNCTION',
            'INFERENCE FUNCTION_TERMINATED',
            'INFERENCE FUNCTION_UPGRADED',
            'INFERENCE_CONTEXT_CHANGED',
        ]
    ] = None
    progressStatus: Optional[ProcessMonitor1] = None
    cancelProcess: Optional[bool] = None
    suspendProcess: Optional[bool] = None
    trainingRequestRef: Optional[List[str]] = None
    trainingReportRef: Optional[str] = None
    mLEntityRef: Optional[List[str]] = None


class Attributes12(BaseModel):
    areConsumerTrainingDataUsed: Optional[Literal['ALL', 'PARTIALLY', 'NONE']] = None
    usedConsumerTrainingData: Optional[List[str]] = None
    modelconfidenceIndication: Optional[int] = None
    modelPerformanceTraining: Optional[List[ModelPerformance]] = None
    modelPerformanceValidation: Optional[List[ModelPerformance]] = None
    dataRatioTrainingAndValidation: Optional[int] = None
    areNewTrainingDataUsed: Optional[bool] = None
    trainingRequestRef: Optional[List[str]] = None
    trainingProcessRef: Optional[str] = None
    lastTrainingRef: Optional[str] = None
    mLEnityGeneratedRef: Optional[str] = None
    mLEntityCoordinationGroupGeneratedRef: Optional[str] = None
    mLEntityRef: Optional[List[str]] = None


class Attributes13(ManagedFunctionAttr):
    mLEntityRef: Optional[List[str]] = None


class Attributes14(BaseModel):
    requestStatus: Optional[
        Literal[
            'NOT_STARTED',
            'IN_PROGRESS',
            'SUSPENDED',
            'FINISHED',
            'CANCELLED',
            'CANCELLING',
        ]
    ] = None
    cancelRequest: Optional[bool] = None
    suspendRequest: Optional[bool] = None
    mLEntityToTestRef: Optional[str] = None
    mLEntityCoordinationGroupToTestRef: Optional[str] = None


class Attributes15(BaseModel):
    modelPerformanceTesting: Optional[List[ModelPerformance]] = None
    mLTestingResult: Optional[str] = None
    testingRequestRef: Optional[str] = None


class Attributes16(BaseModel):
    requestStatus: Optional[
        Literal[
            'NOT_STARTED',
            'IN_PROGRESS',
            'SUSPENDED',
            'FINISHED',
            'CANCELLED',
            'CANCELLING',
        ]
    ] = None
    cancelRequest: Optional[bool] = None
    suspendRequest: Optional[bool] = None
    mLEntityToLoadRef: Optional[str] = None


class Attributes17(BaseModel):
    inferenceType: Optional[str] = None
    policyForLoading: Optional[AIMLManagementPolicy] = None
    mLEntityRef: Optional[List[str]] = None


class Attributes18(BaseModel):
    progressStatus: Optional[ProcessMonitor1] = None
    cancelProcess: Optional[bool] = None
    suspendProcess: Optional[bool] = None
    resumeProcess: Optional[bool] = None
    MLEntityLoadingRequestRef: Optional[str] = None
    MLEntityLoadingPolicyRef: Optional[str] = None
    LoadedMLEntityRef: Optional[str] = None


class Attributes19(BaseModel):
    mLEntityId: Optional[str] = None
    inferenceType: Optional[str] = None
    mLEntityVersion: Optional[str] = None
    expectedRunTimeContext: Optional[MLContext] = None
    trainingContext: Optional[MLContext] = None
    runTimeContext: Optional[MLContext] = None
    supportedPerformanceIndicators: Optional[SupportedPerfIndicator] = None
    mLCapabilitiesInfoList: Optional[List[MLCapabilityInfo]] = None
    retrainingEventsMonitorRef: Optional[str] = None
    sourceTrainedMLEntityRef: Optional[str] = None


class Attributes20(BaseModel):
    mLEntityRef: Optional[List[str]] = None


class Attributes21(BaseModel):
    memberMLEntityRefList: Optional[List[str]] = None


class Attributes22(ManagedFunctionAttr):
    availMLCapabilityReport: Optional[AvailMLCapabilityReport] = None
    mLEntityRef: Optional[List[str]] = None


class Attributes23(BaseModel):
    performanceGainThreshold: Optional[List[ModelPerformance]] = None
    newCapabilityVersionId: Optional[List[str]] = None
    updateTimeDeadline: Optional[Union[TimeWindow1, TimeWindow2, TimeWindow3]] = None
    requestStatus: Optional[
        Literal[
            'NOT_STARTED',
            'IN_PROGRESS',
            'SUSPENDED',
            'FINISHED',
            'CANCELLED',
            'CANCELLING',
        ]
    ] = None
    mLUpdateReportingPeriod: Optional[Union[TimeWindow1, TimeWindow2, TimeWindow3]] = (
        None
    )
    cancelRequest: Optional[bool] = None
    suspendRequest: Optional[bool] = None
    mLUpdateProcessRef: Optional[str] = None
    mLEntityRef: Optional[List[str]] = None


class Attributes24(BaseModel):
    progressStatus: Optional[ProcessMonitor1] = None
    mLEntityRef: Optional[List[str]] = None
    mLUpdateRequestRef: Optional[List[str]] = None
    mLUpdateReportRef: Optional[str] = None


class Attributes25(BaseModel):
    updatedMLCapability: Optional[AvailMLCapabilityReport] = None
    mLEntityRef: Optional[List[str]] = None
    mLUpdateProcessRef: Optional[str] = None


class Attributes26(ManagedFunctionAttr):
    activationStatus: Optional[Literal['ACTIVATED', 'DEACTIVATED']] = None
    managedActivationScope: Optional[
        Union[ManagedActivationScope1, ManagedActivationScope2, ManagedActivationScope3]
    ] = None
    usedByFunctionRefList: Optional[List[str]] = None
    mLEntityRef: Optional[List[str]] = None


class Attributes27(BaseModel):
    inferenceOutputs: Optional[List[InferenceOutput]] = Field(None, min_items=1)
    mLEntityRef: Optional[List[str]] = None


class Attributes28(ManagedFunctionAttr):
    AIMLInferenceEmulationReportRefs: Optional[List[str]] = None


class FulfilmentInfo(BaseModel):
    fulfilmentStatus: Optional[Literal['FULFILLED', 'NOT_FULFILLED']] = Field(
        None,
        description='It describes the current status of the intent fulfilment result.',
    )
    notFullfilledState: Optional[
        Literal[
            'ACKNOWLEDGED',
            'COMPLIANT',
            'DEGRADED',
            'SUSPENDED',
            'TERMINATED',
            'FULFILMENTFAILED',
        ]
    ] = Field(
        None,
        description='It describes the current progress of or the reason for not achieving fulfilment for the intent, intentExpectation or expectationTarget. An attribute which is used when FulfilmentInfo is implemented for IntentFulfilmentInfo',
    )
    notFulfilledReasons: Optional[List[str]] = Field(
        None,
        description='An attribute which is used when FulfilmentInfo is implemented for IntentFulfilmentInfo',
    )


class Frequency(BaseModel):
    arfcn: Optional[int] = Field(
        None,
        description='This attribute shall be supported, when the frequency information represent RF reference frequency. The allowed values for NR see TS 38.104 subclause 5.4.2.1; The allowed values for EUTRAN see TS 36.104 [X] subclause 5.7.3; ',
    )
    freqband: Optional[str] = Field(
        None,
        description='This attribute shall be supported, when the frequency information represent frequency operating band.  The allowed values for NR see TS 38.104 subclause 5.4.2.3; The allowed value for EUTRAN see TS 36.104 subclause 5.7.3       ',
    )


class UEGroup(BaseModel):
    fiveQI: Optional[conint(ge=0, le=255)] = None
    sNssai: Optional[str] = None


class TargetFulfilmentResult(BaseModel):
    targetName: Optional[str] = None
    targetFulfilmentInfo: Optional[FulfilmentInfo] = None
    targetAchievedValue: Optional[float] = None


class IntentConflictReport(BaseModel):
    conflictId: Optional[str] = None
    conflictType: Optional[
        Literal['INTENT_CONFLICT', 'EXPECTATION_CONFLICT', 'TARGET_CONFLICT']
    ] = None
    conflictingIntent: Optional[str] = Field(
        None,
        description='This will be present if the value of conflictType is INTENT_CONFLICT. It describes the DN of the conflicting intent',
    )
    conflictingExpectation: Optional[str] = Field(
        None,
        description='This will be present if the value of conflictType is EXPECTATION_CONFLICT. It describes the expectationId of the conflicting IntentExpectation with an Intent       ',
    )
    conflictingTarget: Optional[str] = Field(
        None,
        description='This will be present if the value of conflictType is TARGET_CONFLICT. It describes the targetName of the conflicting ExpectationTarget with an IntentExpectation           ',
    )
    recommendedSolutions: Optional[Literal['MODIFY', 'DELETE']] = None


class IntentFeasibilityCheckReport(BaseModel):
    feasibilityCheckResult: Optional[Literal['FEASIBLE', 'INFEASIBLE']] = None
    infeasibilityReason: Optional[str] = Field(
        None,
        description='An attribute which is used when feasibilityCheckResult is INFEASIBLE',
    )


class IntentHandlingCapability(BaseModel):
    intentHandlingCapabilityId: Optional[str] = None
    supportedExpectationObjectType: Optional[
        Literal['RAN_SUBNETWORK', 'EDGE_SERVICE_SUPPORT', '5GC_SUBNETWORK']
    ] = Field(
        None,
        description='It describes the expectation object type which can be supported by a specific intent handling function of MnS producer.',
    )
    supportedExpectationTargetNames: Optional[List[str]] = Field(
        None,
        description='It describes the supported expectation targets for the supported expectation object type.',
    )


class ServAttrCom(BaseModel):
    category: Optional[Literal['CHARACTER', 'SCALABILITY']] = None
    tagging: Optional[List[Literal['PERFORMANCE', 'FUNCTION', 'OPERATION']]] = None
    exposure: Optional[Literal['API', 'KPI']] = None


class DelayTolerance(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    support: Optional[Literal['NOT_SUPPORTED', 'SUPPORTED']] = None


class NonIPSupport(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    support: Optional[Literal['NOT_SUPPORTED', 'SUPPORTED']] = None


class DeterministicComm(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    availability: Optional[Literal['NOT_SUPPORTED', 'SUPPORTED']] = None
    periodicityList: Optional[List[int]] = None


class XLThpt(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    guaThpt: Optional[float] = None
    maxThpt: Optional[float] = None


class MaxPktSize(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    maxsize: Optional[int] = None


class MaxNumberofPDUSessions(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    nOofPDUSessions: Optional[int] = None


class KPIMonitoring(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    kPIList: Optional[List[str]] = None


class NBIoT(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    support: Optional[Literal['NOT_SUPPORTED', 'SUPPORTED']] = None


class RadioSpectrum(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    nROperatingBands: Optional[List[str]] = None


class Synchronicity(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    availability: Optional[
        Literal['NOT_SUPPORTED', 'BETWEEN_BS_AND_UE', 'BETWEEN_BS_AND_UE_AND_UE_AND_UE']
    ] = None
    accuracy: Optional[float] = None


class Positioning(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    availability: Optional[
        List[
            Literal[
                'CIDE_CID',
                'OTDOA',
                'RF_FINGERPRINTING',
                'AECID',
                'HYBRID_POSITIONING',
                'NET_RTK',
            ]
        ]
    ] = None
    predictionFrequency: Optional[Literal['PERSEC', 'PERMIN', 'PERHOUR']] = None
    accuracy: Optional[float] = None


class UserMgmtOpen(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    support: Optional[Literal['NOT_SUPPORTED', 'SUPPORTED']] = None


class V2XCommModels(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    v2XMode: Optional[Literal['NOT_SUPPORTED', 'SUPPORTED']] = None


class TermDensity(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    density: Optional[int] = None


class NsInfo(BaseModel):
    nsInstanceId: Optional[str] = None
    nsName: Optional[str] = None
    description: Optional[str] = None


class EmbbEEPerfReq(BaseModel):
    kpiType: Optional[Literal['NUMOFBITS', 'NUMOFBITS_RANBASED']] = None
    req: Optional[float] = None


class UrllcEEPerfReq(BaseModel):
    kpiType: Optional[Literal['INVOFLATENCY', 'NUMOFBITS_MULTIPLIED_INVOFLATENCY']] = (
        None
    )
    req: Optional[float] = None


class MIoTEEPerfReq(BaseModel):
    kpiType: Optional[Literal['MAXREGSUBS', 'MEANACTIVEUES']] = None
    req: Optional[float] = None


class EnergyEfficiency(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    performance: Optional[Union[EmbbEEPerfReq, UrllcEEPerfReq, MIoTEEPerfReq]] = None


class NSSAASupport(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    support: Optional[Literal['NOT_SUPPORTED', 'SUPPORTED']] = None


class SecFunc(BaseModel):
    secFunId: Optional[str] = None
    secFunType: Optional[str] = None
    secRules: Optional[List[str]] = None


class N6Protection(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    secFuncList: Optional[List[SecFunc]] = None


class DataNetwork(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    dnnList: Optional[List[str]] = None


class DataAccess(BaseModel):
    dataNetworkName: Optional[str] = None
    dataAccessUsed: Optional[
        Literal['DIRECT_INTERNET_ACCESS', 'TERM_PVT_NETWORK', 'LOCAL_TRAFFIC']
    ] = None


class TunnellingMechanism(BaseModel):
    dataNetworkName: Optional[str] = None
    tunellingMechanismUsed: Optional[
        Literal[
            'L2TP_TUNNEL',
            'GRE_TUNNEL',
            'VPN_TUNNEL',
            'LABEL_BASED_ROUTING',
            '802.1Q_VLAN',
            'SRV6',
            'OTHER',
        ]
    ] = None


class LboAllowed(BaseModel):
    dataNetworkName: Optional[str] = None
    localBreakoutAllowed: Optional[Literal[True, False]] = None


class DataNetworkAccess(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    dataAccessList: Optional[List[DataAccess]] = None
    tunnellingMechanismList: Optional[List[TunnellingMechanism]] = None
    localBreakoutAllowedList: Optional[List[LboAllowed]] = None


class GnbId(BaseModel):
    __root__: conint(ge=0, le=4294967295)


class GnbIdLength(BaseModel):
    __root__: conint(ge=22, le=32)


class Snssai(BaseModel):
    sst: Optional[conint(ge=0, le=255)] = None
    sd: Optional[constr(regex=r'^[A-Fa-f0-9]{6}$')] = None


class PlmnIdList(BaseModel):
    __root__: List[PlmnId]


class PlmnInfo(BaseModel):
    plmnId: Optional[PlmnId] = None
    snssai: Optional[Snssai] = None
    sliceExpiryTime: Optional[datetime] = None


class NpnIdentity1(BaseModel):
    plmnId: PlmnId
    cagidList: List[str] = Field(..., max_items=12, min_items=1)
    nidList: Optional[List[str]] = Field(None, max_items=12, min_items=1)


class NpnIdentity2(BaseModel):
    plmnId: PlmnId
    cagidList: Optional[List[str]] = Field(None, max_items=12, min_items=1)
    nidList: List[str] = Field(..., max_items=12, min_items=1)


class IntraRatEsActivationOriginalCellLoadParameters(BaseModel):
    loadThreshold: Optional[int] = None
    timeDuration: Optional[int] = None


class IntraRatEsActivationCandidateCellsLoadParameters(BaseModel):
    loadThreshold: Optional[int] = None
    timeDuration: Optional[int] = None


class IntraRatEsDeactivationCandidateCellsLoadParameters(BaseModel):
    loadThreshold: Optional[int] = None
    timeDuration: Optional[int] = None


class EsNotAllowedTimePeriod(BaseModel):
    startTimeandendTime: Optional[str] = None
    periodOfDay: Optional[str] = None
    daysOfWeekList: Optional[str] = None
    listoftimeperiods: Optional[str] = None


class InterRatEsActivationOriginalCellParameters(BaseModel):
    loadThreshold: Optional[int] = None
    timeDuration: Optional[int] = None


class InterRatEsActivationCandidateCellParameters(BaseModel):
    loadThreshold: Optional[int] = None
    timeDuration: Optional[int] = None


class InterRatEsDeactivationCandidateCellParameters(BaseModel):
    loadThreshold: Optional[int] = None
    timeDuration: Optional[int] = None


class UeAccProbabilityDist(BaseModel):
    targetProbability: Optional[int] = None
    numberofpreamblessent: Optional[int] = None


class UeAccDelayProbabilityDist(BaseModel):
    targetProbability: Optional[int] = None
    accessdelay: Optional[int] = None


class RrmPolicyMember(BaseModel):
    plmnId: Optional[PlmnId] = None
    snssai: Optional[Snssai] = None


class AddressWithVlan(BaseModel):
    ipv4Address: Optional[
        constr(
            regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
        )
    ] = Field(None, example='198.51.100.1')
    ipv6Address: Optional[Ipv6Addr] = None
    vlanId: Optional[conint(ge=0, le=4096)] = None


class LocalAddress(BaseModel):
    addressWithVlan: Optional[AddressWithVlan] = None
    port: Optional[conint(ge=0, le=65535)] = None


class RemoteAddress(BaseModel):
    ipv4Address: Optional[
        constr(
            regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
        )
    ] = Field(None, example='198.51.100.1')
    ipv6Address: Optional[Ipv6Addr] = None


class CellIndividualOffset(BaseModel):
    rsrpOffsetSSB: Optional[int] = None
    rsrqOffsetSSB: Optional[int] = None
    sinrOffsetSSB: Optional[int] = None
    rsrpOffsetCSI_RS: Optional[int] = Field(None, alias='rsrpOffsetCSI-RS')
    rsrqOffsetCSI_RS: Optional[int] = Field(None, alias='rsrqOffsetCSI-RS')
    sinrOffsetCSI_RS: Optional[int] = Field(None, alias='sinrOffsetCSI-RS')


class QOffsetRangeList(BaseModel):
    rsrpOffsetSSB: Optional[
        Literal[
            -24,
            -22,
            -20,
            -18,
            -16,
            -14,
            -12,
            -10,
            -8,
            -6,
            -5,
            -4,
            -3,
            -2,
            -1,
            0,
            24,
            22,
            20,
            18,
            16,
            14,
            12,
            10,
            8,
            6,
            5,
            4,
            3,
            2,
            1,
        ]
    ] = None
    rsrqOffsetSSB: Optional[
        Literal[
            -24,
            -22,
            -20,
            -18,
            -16,
            -14,
            -12,
            -10,
            -8,
            -6,
            -5,
            -4,
            -3,
            -2,
            -1,
            0,
            24,
            22,
            20,
            18,
            16,
            14,
            12,
            10,
            8,
            6,
            5,
            4,
            3,
            2,
            1,
        ]
    ] = None
    sinrOffsetSSB: Optional[
        Literal[
            -24,
            -22,
            -20,
            -18,
            -16,
            -14,
            -12,
            -10,
            -8,
            -6,
            -5,
            -4,
            -3,
            -2,
            -1,
            0,
            24,
            22,
            20,
            18,
            16,
            14,
            12,
            10,
            8,
            6,
            5,
            4,
            3,
            2,
            1,
        ]
    ] = None
    rsrpOffsetCSI_RS: Optional[
        Literal[
            -24,
            -22,
            -20,
            -18,
            -16,
            -14,
            -12,
            -10,
            -8,
            -6,
            -5,
            -4,
            -3,
            -2,
            -1,
            0,
            24,
            22,
            20,
            18,
            16,
            14,
            12,
            10,
            8,
            6,
            5,
            4,
            3,
            2,
            1,
        ]
    ] = Field(None, alias='rsrpOffsetCSI-RS')
    rsrqOffsetCSI_RS: Optional[
        Literal[
            -24,
            -22,
            -20,
            -18,
            -16,
            -14,
            -12,
            -10,
            -8,
            -6,
            -5,
            -4,
            -3,
            -2,
            -1,
            0,
            24,
            22,
            20,
            18,
            16,
            14,
            12,
            10,
            8,
            6,
            5,
            4,
            3,
            2,
            1,
        ]
    ] = Field(None, alias='rsrqOffsetCSI-RS')
    sinrOffsetCSI_RS: Optional[
        Literal[
            -24,
            -22,
            -20,
            -18,
            -16,
            -14,
            -12,
            -10,
            -8,
            -6,
            -5,
            -4,
            -3,
            -2,
            -1,
            0,
            24,
            22,
            20,
            18,
            16,
            14,
            12,
            10,
            8,
            6,
            5,
            4,
            3,
            2,
            1,
        ]
    ] = Field(None, alias='sinrOffsetCSI-RS')


class FrequencyDomainPara(BaseModel):
    rimRSSubcarrierSpacing: Optional[int] = None
    rIMRSBandwidth: Optional[int] = None
    nrofGlobalRIMRSFrequencyCandidates: Optional[int] = None
    rimRSCommonCarrierReferencePoint: Optional[int] = None
    rimRSStartingFrequencyOffsetIdList: Optional[List[int]] = None


class SequenceDomainPara(BaseModel):
    nrofRIMRSSequenceCandidatesofRS1: Optional[int] = None
    rimRSScrambleIdListofRS1: Optional[List[int]] = None
    nrofRIMRSSequenceCandidatesofRS2: Optional[int] = None
    rimRSScrambleIdListofRS2: Optional[List[int]] = None
    enableEnoughNotEnoughIndication: Optional[Literal['ENABLE', 'DISABLE']] = None
    RIMRSScrambleTimerMultiplier: Optional[int] = None
    RIMRSScrambleTimerOffset: Optional[int] = None


class TimeDomainPara(BaseModel):
    dlULSwitchingPeriod1: Optional[
        Literal[
            'MS0P5',
            'MS0P625',
            'MS1',
            'MS1P25',
            'MS2',
            'MS2P5',
            'MS3',
            'MS4',
            'MS5',
            'MS10',
            'MS20',
        ]
    ] = None
    symbolOffsetOfReferencePoint1: Optional[int] = None
    dlULSwitchingPeriod2: Optional[
        Literal[
            'MS0P5',
            'MS0P625',
            'MS1',
            'MS1P25',
            'MS2',
            'MS2P5',
            'MS3',
            'MS4',
            'MS5',
            'MS10',
            'MS20',
        ]
    ] = None
    symbolOffsetOfReferencePoint2: Optional[int] = None
    totalnrofSetIdofRS1: Optional[int] = None
    totalnrofSetIdofRS2: Optional[int] = None
    nrofConsecutiveRIMRS1: Optional[int] = None
    nrofConsecutiveRIMRS2: Optional[int] = None
    consecutiveRIMRS1List: Optional[List[int]] = None
    consecutiveRIMRS2List: Optional[List[int]] = None
    enablenearfarIndicationRS1: Optional[Literal['ENABLE', 'DISABLE']] = None
    enablenearfarIndicationRS2: Optional[Literal['ENABLE', 'DISABLE']] = None


class RimRSReportInfo(BaseModel):
    detectedSetID: Optional[int] = None
    propagationDelay: Optional[int] = None
    functionalityOfRIMRS: Optional[
        Literal[
            'RS1', 'RS2', 'RS1_FOR_ENOUGH_MITIGATION', 'RS1_FOR_NOT_ENOUGH_MITIGATION'
        ]
    ] = None


class RimRSReportConf(BaseModel):
    reportIndicator: Optional[Literal['ENABLE', 'DISABLE']] = None
    reportInterval: Optional[int] = None
    nrofRIMRSReportInfo: Optional[int] = None
    maxPropagationDelay: Optional[int] = None
    rimRSReportInfoList: Optional[List[RimRSReportInfo]] = None


class TceMappingInfo(BaseModel):
    TceIPAddress: Optional[
        Union[
            Ipv6Addr,
            constr(
                regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
            ),
        ]
    ] = None
    TceID: Optional[int] = None
    PlmnTarget: Optional[PlmnId] = None


class ParameterRange(BaseModel):
    maxValue: Optional[int] = None
    minValue: Optional[int] = None


class NTNTAClist(BaseModel):
    __root__: List[constr(regex=r'(^[A-Fa-f0-9]{4}$)|(^[A-Fa-f0-9]{6}$)')]


class PositionVelocity(BaseModel):
    positionX: Optional[conint(ge=0, le=604800)] = None
    positionY: Optional[conint(ge=0, le=604800)] = None
    positionZ: Optional[conint(ge=0, le=604800)] = None
    velocityVX: Optional[conint(ge=-131072, le=131071)] = None
    velocityVY: Optional[conint(ge=-131072, le=131071)] = None
    velocityVZ: Optional[conint(ge=-131072, le=131071)] = None


class Orbital(BaseModel):
    semiMajorAxis: Optional[conint(ge=0, le=8589934591)] = None
    eccentricity: Optional[conint(ge=-524288, le=524287)] = None
    periapsis: Optional[conint(ge=0, le=16777215)] = None
    longitude: Optional[conint(ge=0, le=2097151)] = None
    inclination: Optional[conint(ge=-524288, le=524287)] = None
    meanAnomaly: Optional[conint(ge=0, le=16777215)] = None


class IpEndPoint(BaseModel):
    ipv4Address: Optional[
        constr(
            regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
        )
    ] = Field(None, example='198.51.100.1')
    ipv6Address: Optional[Ipv6Addr] = None
    ipv6Prefix: Optional[Ipv6Prefix] = None
    transport: Optional[Union[Literal['TCP'], str]] = None
    port: Optional[int] = None


class NFService(BaseModel):
    serviceInstanceId: Optional[str] = None
    serviceName: Optional[str] = None
    version: Optional[str] = None
    schema_: Optional[str] = Field(None, alias='schema')
    fqdn: Optional[str] = None
    interPlmnFqdn: Optional[str] = None
    ipEndPoints: Optional[List[IpEndPoint]] = None
    apiPrfix: Optional[str] = None
    allowedPlmns: Optional[PlmnId] = None
    allowedNfTypes: Optional[
        List[
            Literal[
                'NRF',
                'UDM',
                'AMF',
                'SMF',
                'AUSF',
                'NEF',
                'PCF',
                'SMSF',
                'NSSF',
                'UDR',
                'LMF',
                'GMLC',
                '5G_EIR',
                'SEPP',
                'UPF',
                'N3IWF',
                'AF',
                'UDSF',
                'DN',
                'BSF',
                'CHF',
                'NWDAF',
                'PCSCF',
                'CBCF',
                'HSS',
                'UCMF',
                'SOR_AF',
                'SPAF',
                'MME',
                'SCSAS',
                'SCEF',
                'SCP',
                'NSSAAF',
                'ICSCF',
                'SCSCF',
                'DRA',
                'IMS_AS',
                'AANF',
                '5G_DDNMF',
                'NSACF',
                'MFAF',
                'EASDF',
                'DCCF',
                'MB_SMF',
                'TSCTSF',
                'ADRF',
                'GBA_BSF',
                'CEF',
                'MB_UPF',
                'NSWOF',
                'PKMF',
                'MNPF',
                'SMS_GMSC',
                'SMS_IWMSC',
                'MBSF',
                'MBSTF',
                'PANF',
                'TNGF',
                'W_AGF',
                'TWIF',
                'TSN_AF',
            ]
        ]
    ] = None
    allowedNssais: Optional[List[Snssai]] = None


class DefaultNotificationSubscription(BaseModel):
    notificationType: Optional[
        Literal[
            'N1_MESSAGES',
            'N2_INFORMATION',
            'LOCATION_NOTIFICATION',
            'DATA_REMOVAL_NOTIFICATION',
            'DATA_CHANGE_NOTIFICATION',
            'LOCATION_UPDATE_NOTIFICATION',
            'NSSAA_REAUTH_NOTIFICATION',
            'NSSAA_REVOC_NOTIFICATION',
        ]
    ] = None
    callbackURI: Optional[str] = None
    n1MessageClass: Optional[bool] = None
    n2InformationClass: Optional[bool] = None
    versions: Optional[str] = None
    binding: Optional[str] = None


class SupportedFunc(BaseModel):
    function: Optional[str] = None
    policy: Optional[str] = None


class CommModel(BaseModel):
    groupId: Optional[int] = None
    commModelType: Optional[
        Literal[
            'DIRECT_COMMUNICATION_WO_NRF',
            'DIRECT_COMMUNICATION_WITH_NRF',
            'INDIRECT_COMMUNICATION_WO_DEDICATED_DISCOVERY',
            'INDIRECT_COMMUNICATION_WITH_DEDICATED_DISCOVERY',
        ]
    ] = Field(None, description='any of enumerated value')
    targetNFServiceList: Optional[List[str]] = None
    commModelConfiguration: Optional[str] = None


class FiveQiDscpMapping(BaseModel):
    fiveQIValues: Optional[List[int]] = None
    dscp: Optional[int] = None


class NetworkSliceInfo(BaseModel):
    sNSSAI: Optional[Snssai] = None
    cNSIId: Optional[str] = Field(
        None, description='CNSI Id is defined in TS 29.531, only for Core Network'
    )
    networkSliceRef: Optional[List[str]] = None


class PacketErrorRate(BaseModel):
    scalar: Optional[int] = None
    exponent: Optional[int] = None


class GtpUPathDelayThresholdsType(BaseModel):
    n3AveragePacketDelayThreshold: Optional[int] = None
    n3MinPacketDelayThreshold: Optional[int] = None
    n3MaxPacketDelayThreshold: Optional[int] = None
    n9AveragePacketDelayThreshold: Optional[int] = None
    n9MinPacketDelayThreshold: Optional[int] = None
    n9MaxPacketDelayThreshold: Optional[int] = None


class QFPacketDelayThresholdsType(BaseModel):
    thresholdDl: Optional[int] = None
    thresholdUl: Optional[int] = None
    thresholdRtt: Optional[int] = None


class Binary(BaseModel):
    __root__: bytes = Field(
        ..., description="string with format 'binary' as defined in OpenAPI."
    )


class BinaryRm(BaseModel):
    __root__: Optional[bytes] = Field(
        None,
        description='"string with format \'binary\' as defined in OpenAPI OpenAPI with \'nullable: true\' property."\n',
    )


class BytesRm(BaseModel):
    __root__: Optional[str] = Field(
        None,
        description="string with format 'bytes' as defined in OpenAPI OpenAPI with 'nullable: true' property.\n",
    )


class Date(BaseModel):
    __root__: date = Field(
        ..., description="string with format 'date' as defined in OpenAPI."
    )


class DateRm(BaseModel):
    __root__: Optional[date] = Field(
        None,
        description="string with format 'date' as defined in OpenAPI OpenAPI with 'nullable: true' property.\n",
    )


class DateTimeRm(BaseModel):
    __root__: Optional[datetime] = Field(
        None,
        description="string with format 'date-time' as defined in OpenAPI with 'nullable:true' property. \n",
    )


class Double(BaseModel):
    __root__: float = Field(
        ..., description="string with format 'double' as defined in OpenAPI"
    )


class DoubleRm(BaseModel):
    __root__: Optional[float] = Field(
        None,
        description="string with format 'double' as defined in OpenAPI with 'nullable: true' property.\n",
    )


class DurationSecRm(BaseModel):
    __root__: Optional[int] = Field(
        None,
        description="indicating a time in seconds with OpenAPI defined 'nullable: true' property.",
    )


class Float2(BaseModel):
    __root__: float = Field(
        ..., description="string with format 'float' as defined in OpenAPI."
    )


class FloatRm(BaseModel):
    __root__: Optional[float] = Field(
        None,
        description="string with format 'float' as defined in OpenAPI with the OpenAPI defined 'nullable: true' property.\n",
    )


class Int32(BaseModel):
    __root__: int = Field(
        ..., description="string with format 'int32' as defined in OpenAPI."
    )


class Int32Rm(BaseModel):
    __root__: Optional[int] = Field(
        None,
        description="string with format 'int32' as defined in OpenAPI with the OpenAPI defined 'nullable: true' property.\n",
    )


class Int64Rm(BaseModel):
    __root__: Optional[int] = Field(
        None,
        description="string with format 'int64' as defined in OpenAPI with the OpenAPI defined 'nullable: true' property.\n",
    )


class Ipv4AddrRm(BaseModel):
    __root__: Optional[
        constr(
            regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
        )
    ] = Field(
        None,
        description="String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166 with the OpenAPI defined 'nullable: true' property.\n",
        example='198.51.100.1',
    )


class Ipv4AddrMaskRm(BaseModel):
    __root__: Optional[
        constr(
            regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
        )
    ] = Field(
        None,
        description="String identifying a IPv4 address mask formatted in the 'dotted decimal' notation as defined in RFC 1166 with the OpenAPI defined 'nullable: true' property.\n",
        example='198.51.0.0/16',
    )


class Ipv6AddrRm(BaseModel):
    pass


class Ipv6PrefixRm(BaseModel):
    pass


class MacAddr48Rm(BaseModel):
    __root__: Optional[constr(regex=r'^([0-9a-fA-F]{2})((-[0-9a-fA-F]{2}){5})$')] = (
        Field(
            None,
            description='"String identifying a MAC address formatted in the hexadecimal notation according to clause 1.1 and clause 2.1 of RFC 7042 with the OpenAPI \'nullable: true\' property."\n',
        )
    )


class UintegerRm(BaseModel):
    __root__: Optional[conint(ge=0)] = Field(
        None,
        description="Unsigned Integer, i.e. only value 0 and integers above 0 are permissible with the OpenAPI 'nullable: true' property.\n",
    )


class Uint16Rm(BaseModel):
    __root__: Optional[conint(ge=0, le=65535)] = Field(
        None,
        description="Integer where the allowed values correspond to the value range of an unsigned  16-bit integer with the OpenAPI 'nullable: true' property.\n",
    )


class Uint32Rm(BaseModel):
    __root__: Optional[conint(ge=0, le=4294967295)] = Field(
        None,
        description="Integer where the allowed values correspond to the value range of an unsigned 32-bit integer with the OpenAPI 'nullable: true' property.\n",
    )


class Uint64(BaseModel):
    __root__: conint(ge=0, le=18446744073709551615) = Field(
        ...,
        description='Integer where the allowed values correspond to the value range of an unsigned 64-bit integer.\n',
    )


class Uint64Rm(BaseModel):
    __root__: Optional[conint(ge=0, le=18446744073709551615)] = Field(
        None,
        description="Integer where the allowed values correspond to the value range of an unsigned 16-bit integer with the OpenAPI 'nullable: true' property.\n",
    )


class UriRm(BaseModel):
    __root__: Optional[str] = Field(
        None,
        description="String providing an URI formatted according to RFC 3986 with the OpenAPI 'nullable: true' property.\n",
    )


class VarUeId(BaseModel):
    __root__: constr(
        regex=r'^(imsi-[0-9]{5,15}|nai-.+|msisdn-[0-9]{5,15}|extid-[^@]+@[^@]+|gci-.+|gli-.+|.+)$'
    ) = Field(..., description='String represents the SUPI or GPSI')


class VarUeIdRm(BaseModel):
    __root__: Optional[
        constr(
            regex=r'^(imsi-[0-9]{5,15}|nai-.+|msisdn-[0-9]{5,15}|extid-[^@]+@[^@]+|gci-.+|gli-.+|.+)$'
        )
    ] = Field(
        None,
        description="String represents the SUPI or GPSI with the OpenAPI 'nullable: true' property.",
    )


class TimeZone(BaseModel):
    __root__: str = Field(
        ...,
        description='String with format "time-numoffset" optionally appended by "daylightSavingTime", where \n- "time-numoffset" shall represent the time zone adjusted for daylight saving time and be\n   encoded as time-numoffset as defined in clause\xa05.6 of IETF RFC 3339; \n- "daylightSavingTime" shall represent the adjustment that has been made and shall be\n   encoded as "+1" or "+2" for a +1 or +2 hours adjustment. \n\nThe example is for 8 hours behind UTC, +1 hour adjustment for Daylight Saving Time.\n',
        example='-08:00+1',
    )


class TimeZoneRm(BaseModel):
    __root__: Optional[str] = Field(
        None,
        description='"String with format \'time-numoffset\' optionally appended by \'<daylightSavingTime>\', where\n  - \'time-numoffset\' shall represent the time zone adjusted for daylight saving time and be\n    encoded as time-numoffset as defined in clause 5.6 of IETF RFC 3339;\n  - \'daylightSavingTime\' shall represent the adjustment that has been made and shall be\n    encoded as \'+1\' or \'+2\' for a +1 or +2 hours adjustment.\n\n  But with the OpenAPI \'nullable: true\' property."\n',
    )


class StnSr(BaseModel):
    __root__: str = Field(
        ...,
        description='String representing the STN-SR as defined in clause 18.6 of 3GPP TS 23.003.',
    )


class StnSrRm(BaseModel):
    __root__: Optional[str] = Field(
        None,
        description="String representing the STN-SR as defined in clause 18.6 of 3GPP TS 23.003 with the OpenAPI 'nullable: true' property. \n",
    )


class CMsisdn(BaseModel):
    __root__: constr(regex=r'^[0-9]{5,15}$') = Field(
        ...,
        description='String representing the C-MSISDN as defined in clause 18.7 of 3GPP TS 23.003.',
    )


class CMsisdnRm(BaseModel):
    __root__: Optional[constr(regex=r'^[0-9]{5,15}$')] = Field(
        None,
        description="String representing the C-MSISDN as defined in clause 18.7 of 3GPP TS 23.003 with the OpenAPI 'nullable: true' property. \n",
    )


class MonthOfYear(BaseModel):
    __root__: conint(ge=1, le=12) = Field(
        ...,
        description='integer between and including 1 and 12 denoting a month. 1 shall indicate January, and the subsequent months shall be indicated with the next higher numbers. 12 shall indicate December.\n',
    )


class EmptyObject(BaseModel):
    pass

    class Config:
        extra = Extra.forbid


class UriScheme(BaseModel):
    __root__: Union[Literal['http', 'https'], str] = Field(
        ..., description='HTTP and HTTPS URI scheme.'
    )


class Link(BaseModel):
    href: Optional[str] = Field(
        None, description='String providing an URI formatted according to RFC 3986.'
    )


class LinkRm(BaseModel):
    href: Optional[str] = Field(
        None, description='String providing an URI formatted according to RFC 3986.'
    )


class PatchItem(BaseModel):
    op: Union[Literal['add', 'copy', 'move', 'remove', 'replace', 'test'], str] = Field(
        ..., description='Operations as defined in IETF RFC 6902.'
    )
    path: str = Field(
        ...,
        description='contains a JSON pointer value (as defined in IETF RFC 6901) that references a location of a resource on which the patch operation shall be performed.\n',
    )
    from_: Optional[str] = Field(
        None,
        alias='from',
        description='indicates the path of the source JSON element (according to JSON Pointer syntax) being moved or copied to the location indicated by the "path" attribute.\n',
    )
    value: Optional[Any] = None


class LinksValueSchema(BaseModel):
    __root__: Union[List[Link], Link] = Field(
        ..., description='A list of mutually exclusive alternatives of 1 or more links.'
    )


class SelfLink(BaseModel):
    self: Link


class InvalidParam(BaseModel):
    param: str = Field(
        ...,
        description='If the invalid parameter is an attribute in a JSON body, this IE shall contain the  attribute\'s name and shall be encoded as a JSON Pointer. If the invalid parameter is  an HTTP header, this IE shall be formatted as the concatenation of the string "header "  plus the name of such header. If the invalid parameter is a query parameter, this IE  shall be formatted as the concatenation of the string "query " plus the name of such  query parameter. If the invalid parameter is a variable part in the path of a resource  URI, this IE shall contain the name of the variable, including the symbols "{" and "}"  used in OpenAPI specification as the notation to represent variable path segments.\n',
    )
    reason: Optional[str] = Field(
        None,
        description='A human-readable reason, e.g. "must be a positive integer". In cases involving failed  operations in a PATCH request, the reason string should identify the operation that  failed using the operation\'s array index to assist in correlation of the invalid  parameter with the failed operation, e.g." Replacement value invalid for attribute  (failed operation index= 4)"\n',
    )


class ChangeItem(BaseModel):
    op: Union[Literal['ADD', 'MOVE', 'REMOVE', 'REPLACE'], str] = Field(
        ..., description='Indicates the type of change to be performed.'
    )
    path: str = Field(
        ...,
        description='contains a JSON pointer value (as defined in IETF RFC 6901) that references a target  location within the resource on which the change has been applied.\n',
    )
    from_: Optional[str] = Field(
        None,
        alias='from',
        description='indicates the path of the source JSON element (according to JSON Pointer syntax)  being moved or copied to the location indicated by the "path" attribute. It shall  be present if the "op" attribute is of value "MOVE".\n',
    )
    origValue: Optional[Any] = None
    newValue: Optional[Any] = None


class NotifyItem(BaseModel):
    resourceId: str = Field(
        ..., description='String providing an URI formatted according to RFC 3986.'
    )
    changes: List[ChangeItem] = Field(..., min_items=1)


class Atom(BaseModel):
    attr: str = Field(
        ..., description='contains the name of a defined query parameter.'
    )
    value: Any
    negative: Optional[bool] = Field(
        None,
        description='indicates whether the negative condition applies for the query condition.',
    )


class ReportItem(BaseModel):
    path: str = Field(
        ...,
        description='Contains a JSON pointer value (as defined in IETF RFC 6901) that references a  location of a resource to which the modification is subject.\n',
    )
    reason: Optional[str] = Field(
        None,
        description='A human-readable reason providing details on the reported modification failure.  The reason string should identify the operation that failed using the operation\'s  array index to assist in correlation of the invalid parameter with the failed  operation, e.g. "Replacement value invalid for attribute (failed operation index= 4)".\n',
    )


class Property(BaseModel):
    name: str = Field(..., description='The name of the property')
    required: Optional[bool] = Field(
        None,
        description='Indicates whether the property is required – true= required –  false(default)= not required.\n',
    )
    regex: Optional[str] = Field(
        None,
        description='A regular expression string to be applied to the value of the property.',
    )
    value: Optional[str] = Field(
        None,
        description='The property value. When present, it shall be a valid JSON string.',
    )


class RedirectResponse(BaseModel):
    cause: Optional[str] = None
    targetScp: Optional[str] = Field(
        None, description='String providing an URI formatted according to RFC 3986.'
    )
    targetSepp: Optional[str] = Field(
        None, description='String providing an URI formatted according to RFC 3986.'
    )


class TunnelAddress1(BaseModel):
    ipv4Addr: constr(
        regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
    ) = Field(
        ...,
        description="String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.\n",
        example='198.51.100.1',
    )
    ipv6Addr: Optional[Ipv6Addr] = None
    portNumber: conint(ge=0) = Field(
        ...,
        description='Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.',
    )


class TunnelAddress2(BaseModel):
    ipv4Addr: Optional[
        constr(
            regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
        )
    ] = Field(
        None,
        description="String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.\n",
        example='198.51.100.1',
    )
    ipv6Addr: Ipv6Addr
    portNumber: conint(ge=0) = Field(
        ...,
        description='Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.',
    )


class StringMatchingCondition(BaseModel):
    matchingString: Optional[str] = None
    matchingOperator: Union[
        Literal[
            'FULL_MATCH',
            'MATCH_ALL',
            'STARTS_WITH',
            'NOT_START_WITH',
            'ENDS_WITH',
            'NOT_END_WITH',
            'CONTAINS',
            'NOT_CONTAIN',
        ],
        str,
    ] = Field(..., description='the matching operation.')


class Ipv4AddressRange(BaseModel):
    start: constr(
        regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
    ) = Field(
        ...,
        description="String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.\n",
        example='198.51.100.1',
    )
    end: constr(
        regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
    ) = Field(
        ...,
        description="String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.\n",
        example='198.51.100.1',
    )


class Ipv6AddressRange(BaseModel):
    start: Ipv6Addr
    end: Ipv6Addr


class Ipv6PrefixRange(BaseModel):
    start: Ipv6Prefix
    end: Ipv6Prefix


class DnnRm(BaseModel):
    __root__: Optional[str] = Field(
        None,
        description="String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the  Network Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1  and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. 'Label1.Label2.Label3') with the OpenAPI 'nullable: true' property.\n",
    )


class WildcardDnnRm(BaseModel):
    __root__: Optional[constr(regex=r'^[*]$')] = Field(
        None,
        description="String representing the Wildcard DNN. It shall contain the string '*' but with the  OpenAPI 'nullable: true' property.\n",
    )


class Gpsi(BaseModel):
    __root__: constr(regex=r'^(msisdn-[0-9]{5,15}|extid-[^@]+@[^@]+|.+)$') = Field(
        ...,
        description='String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier= "extid-\'extid\', where \'extid\'  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier. \n',
    )


class GpsiRm(BaseModel):
    __root__: Optional[constr(regex=r'^(msisdn-[0-9]{5,15}|extid-[^@]+@[^@]+|.+)$')] = (
        Field(
            None,
            description="String identifying a Gpsi shall contain either an External Id or an MSISDN. It shall be  formatted as follows -External Identifier= 'extid-'extid', where 'extid' shall be formatted  according to clause 19.7.2 of 3GPP TS 23.003 that describes an External Identifier with the  OpenAPI 'nullable: true' property. \n",
        )
    )


class GroupIdRm(BaseModel):
    __root__: Optional[
        constr(
            regex=r'^[A-Fa-f0-9]{8}-[0-9]{3}-[0-9]{2,3}-([A-Fa-f0-9][A-Fa-f0-9]){1,10}$'
        )
    ] = Field(
        None,
        description="String identifying a group of devices network internal globally unique ID which identifies a set of IMSIs, as specified in clause 19.9 of 3GPP TS 23.003 with the OpenAPI 'nullable: true' property.\n",
    )


class ExternalGroupId(BaseModel):
    __root__: constr(regex=r'^extgroupid-[^@]+@[^@]+$') = Field(
        ...,
        description='String identifying External Group Identifier that identifies a group made up of one or more  subscriptions associated to a group of IMSIs, as specified in clause 19.7.3 of 3GPP TS 23.003. \n',
    )


class ExternalGroupIdRm(BaseModel):
    __root__: Optional[constr(regex=r'^extgroupid-[^@]+@[^@]+$')] = Field(
        None,
        description="String identifying External Group Identifier that identifies a group made up of one or more  subscriptions associated to a group of IMSIs, as specified in clause 19.7.3 of  3GPP TS 23.003  with the OpenAPI 'nullable: true' property. \n",
    )


class Pei(BaseModel):
    __root__: constr(
        regex=r'^(imei-[0-9]{15}|imeisv-[0-9]{16}|mac((-[0-9a-fA-F]{2}){6})(-untrusted)?|eui((-[0-9a-fA-F]{2}){8})|.+)$'
    ) = Field(
        ...,
        description='String representing a Permanent Equipment Identifier that may contain - an IMEI or IMEISV, as  specified in clause 6.2 of 3GPP TS 23.003; a MAC address for a 5G-RG or FN-RG via  wireline  access, with an indication that this address cannot be trusted for regulatory purpose if this  address cannot be used as an Equipment Identifier of the FN-RG, as specified in clause 4.7.7  of 3GPP TS23.316. Examples are imei-012345678901234 or imeisv-0123456789012345. \n',
    )


class PeiRm(BaseModel):
    __root__: Optional[
        constr(
            regex=r'^(imei-[0-9]{15}|imeisv-[0-9]{16}|mac((-[0-9a-fA-F]{2}){6})(-untrusted)?|eui((-[0-9a-fA-F]{2}){8})|.+)$'
        )
    ] = Field(
        None,
        description="This data type is defined in the same way as the 'Pei' data type but with the OpenAPI 'nullable: true' property.\n",
    )


class SupiRm(BaseModel):
    __root__: Optional[
        constr(regex=r'^(imsi-[0-9]{5,15}|nai-.+|gci-.+|gli-.+|.+)$')
    ] = Field(
        None,
        description="This data type is defined in the same way as the 'Supi' data type, but with the  OpenAPI 'nullable: true' property. \n",
    )


class RfspIndex(BaseModel):
    __root__: conint(ge=1, le=256) = Field(
        ...,
        description='Unsigned integer representing the "Subscriber Profile ID for RAT/Frequency Priority"  as specified in 3GPP TS 36.413.\n',
    )


class RfspIndexRm(BaseModel):
    __root__: Optional[conint(ge=1, le=256)] = Field(
        None,
        description="Unsigned integer representing the 'Subscriber Profile ID for RAT/Frequency Priority'  as specified in 3GPP TS 36.413 with the OpenAPI 'nullable: true' property. \n",
    )


class MtcProviderInformation(BaseModel):
    __root__: str = Field(
        ..., description='String uniquely identifying MTC provider information.'
    )


class SupiOrSuci(BaseModel):
    __root__: constr(
        regex=r'^(imsi-[0-9]{5,15}|nai-.+|gli-.+|gci-.+|suci-(0-[0-9]{3}-[0-9]{2,3}|[1-7]-.+)-[0-9]{1,4}-(0-0-.*|[a-fA-F1-9]-([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])-[a-fA-F0-9]+)|.+)$'
    ) = Field(..., description='String identifying a SUPI or a SUCI.')


class ApplicationlayerId(BaseModel):
    __root__: str = Field(
        ...,
        description='String identifying an UE with application layer ID. The format of the application  layer ID parameter is same as the Application layer ID defined in clause 11.3.4 of  3GPP TS 24.554.\n',
    )


class NsacSai(BaseModel):
    __root__: str = Field(
        ...,
        description='String identifying the Network Slice Admission Control Service Area Identifier.\n',
    )


class GroupServiceId(BaseModel):
    __root__: Union[Literal[1, 2, 3], int] = Field(
        ...,
        description='Possible values are:\n- 1: Group specific NAS level congestion control\n- 2: Group specific Monitoring of Number of UEs present in a geographical area\n- 3: Group specific Group specific for 5G LAN Type service\n',
    )


class ApplicationId(BaseModel):
    __root__: str = Field(
        ..., description='String providing an application identifier.'
    )


class ApplicationIdRm(BaseModel):
    __root__: Optional[str] = Field(
        None,
        description="String providing an application identifier with the OpenAPI 'nullable: true' property.\n",
    )


class PduSessionId(BaseModel):
    __root__: conint(ge=0, le=255) = Field(
        ...,
        description='Unsigned integer identifying a PDU session, within the range 0 to 255, as specified in  clause 11.2.3.1b, bits 1 to 8, of 3GPP TS 24.007. If the PDU Session ID is allocated by the  Core Network for UEs not supporting N1 mode, reserved range 64 to 95 is used. PDU Session ID  within the reserved range is only visible in the Core Network. \n',
    )


class MccRm(BaseModel):
    __root__: Optional[constr(regex=r'^\d{3}$')] = Field(
        None,
        description="Mobile Country Code part of the PLMN, comprising 3 digits, as defined in clause 9.3.3.5 of  3GPP TS 38.413 with the OpenAPI 'nullable: true' property.\n",
    )


class MncRm(BaseModel):
    __root__: Optional[constr(regex=r'^\d{2,3}$')] = Field(
        None,
        description="Mobile Network Code part of the PLMN, comprising 2 or 3 digits, as defined in clause 9.3.3.5 of 3GPP TS 38.413 with the OpenAPI 'nullable: true' property.\n",
    )


class TacRm(BaseModel):
    __root__: Optional[constr(regex=r'(^[A-Fa-f0-9]{4}$)|(^[A-Fa-f0-9]{6}$)')] = Field(
        None,
        description="This data type is defined in the same way as the 'Tac' data type, but with the OpenAPI 'nullable: true' property.\n",
    )


class EutraCellIdRm(BaseModel):
    __root__: Optional[constr(regex=r'^[A-Fa-f0-9]{7}$')] = Field(
        None,
        description="This data type is defined in the same way as the 'EutraCellId' data type, but with the OpenAPI 'nullable: true' property.\n",
    )


class NrCellIdRm(BaseModel):
    __root__: Optional[constr(regex=r'^[A-Fa-f0-9]{9}$')] = Field(
        None,
        description="This data type is defined in the same way as the 'NrCellId' data type, but with the OpenAPI 'nullable: true' property.\n",
    )


class DnaiRm(BaseModel):
    __root__: Optional[str] = Field(
        None,
        description="This data type is defined in the same way as the 'Dnai' data type, but with the OpenAPI 'nullable: true' property.\n",
    )


class Field5GMmCause(BaseModel):
    __root__: conint(ge=0) = Field(
        ...,
        description='Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.',
    )


class AreaCodeRm(BaseModel):
    __root__: Optional[str] = Field(
        None,
        description="This data type is defined in the same way as the 'AreaCode' data type, but with the OpenAPI 'nullable: true' property.\n",
    )


class NidRm(BaseModel):
    __root__: Optional[constr(regex=r'^[A-Fa-f0-9]{11}$')] = Field(
        None,
        description='This data type is defined in the same way as the \'Nid\' data type, but with the OpenAPI \'nullable: true\' property."\n',
    )


class NfServiceSetId(BaseModel):
    __root__: str = Field(
        ...,
        description='NF Service Set Identifier (see clause 28.12 of 3GPP TS 23.003) formatted as the following  string "set<Set ID>.sn<Service Name>.nfi<NF Instance ID>.5gc.mnc<MNC>.mcc<MCC>", or  "set<SetID>.sn<ServiceName>.nfi<NFInstanceID>.5gc.nid<NID>.mnc<MNC>.mcc<MCC>" with  <MCC> encoded as defined in clause 5.4.2 ("Mcc" data type definition)   <MNC> encoding the Mobile Network Code part of the PLMN, comprising 3 digits. \n  If there are only 2 significant digits in the MNC, one "0" digit shall be inserted \n  at the left side to fill the 3 digits coding of MNC.  Pattern: \'^[0-9]{3}$\'\n<NID> encoded as defined in clause\xa05.4.2 ("Nid" data type definition)  <NFInstanceId> encoded as defined in clause 5.3.2  <ServiceName> encoded as defined in 3GPP TS 29.510  <Set ID> encoded as a string of characters consisting of alphabetic \n  characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that shall end \n  with either an alphabetic character or a digit.\n',
    )


class PlmnAssiUeRadioCapId(BaseModel):
    __root__: str = Field(
        ..., description="string with format 'bytes' as defined in OpenAPI"
    )


class ManAssiUeRadioCapId(BaseModel):
    __root__: str = Field(
        ..., description="string with format 'bytes' as defined in OpenAPI"
    )


class TypeAllocationCode(BaseModel):
    __root__: constr(regex=r'^[0-9]{8}$') = Field(
        ...,
        description='Type Allocation Code (TAC) of the UE, comprising the initial eight-digit portion of the 15-digit IMEI and 16-digit IMEISV codes. See clause 6.2 of 3GPP TS 23.003.\n',
    )


class HfcNIdRm(BaseModel):
    __root__: Optional[constr(max_length=6)] = Field(
        None,
        description="This data type is defined in the same way as the 'HfcNId' data type, but with the OpenAPI 'nullable: true' property.\n",
    )


class NsSrg(BaseModel):
    __root__: str = Field(
        ...,
        description='String providing a Network Slice Simultaneous Registration Group. See clause 5.15.12 of  3GPP TS 23.501\n',
    )


class NsSrgRm(BaseModel):
    __root__: Optional[str] = Field(
        None,
        description='String providing a Network Slice Simultaneous Registration Group with the OpenAPI "nullable: true" property. See clause 5.15.12 of 3GPP TS 23.501\n',
    )


class RelayServiceCode(BaseModel):
    __root__: conint(ge=0, le=16777215) = Field(
        ...,
        description='Relay Service Code to identify a connectivity service provided by the UE-to-Network relay or the UE-to-UE relay.\n',
    )


class Field5GPrukId(BaseModel):
    __root__: constr(
        regex=r'^rid[0-9]{1,4}\.pid[0-9a-fA-F]+\@prose-cp\.5gc\.mnc[0-9]{2,3}\.mcc[0-9]{3}\.3gppnetwork\.org$'
    ) = Field(
        ...,
        description='A string carrying the CP-PRUK ID of the 5G ProSe Remote UE or the 5G ProSe End UE. The CP-PRUK ID is a string in NAI format as specified in clause 28.7.11 of 3GPP TS 23.003.\n',
    )


class NsagId(BaseModel):
    __root__: int = Field(
        ..., description='The Network Slice AS Group ID, see 3GPP TS 38.413\n'
    )


class NsagIdRm(BaseModel):
    __root__: Optional[int] = Field(
        None,
        description='This data type is defined in the same way as the "NsagId" data type, but with the OpenAPI "nullable: true" property\n',
    )


class GeoSatelliteId(BaseModel):
    __root__: str = Field(..., description='A string carrying the GEO Satellite ID.\n')


class RatTypeRm(BaseModel):
    __root__: Union[
        Union[
            Literal[
                'NR',
                'EUTRA',
                'WLAN',
                'VIRTUAL',
                'NBIOT',
                'WIRELINE',
                'WIRELINE_CABLE',
                'WIRELINE_BBF',
                'LTE-M',
                'NR_U',
                'EUTRA_U',
                'TRUSTED_N3GA',
                'TRUSTED_WLAN',
                'UTRA',
                'GERA',
                'NR_LEO',
                'NR_MEO',
                'NR_GEO',
                'NR_OTHER_SAT',
                'NR_REDCAP',
                'WB_E_UTRAN_LEO',
                'WB_E_UTRAN_MEO',
                'WB_E_UTRAN_GEO',
                'WB_E_UTRAN_OTHERSAT',
                'NB_IOT_LEO',
                'NB_IOT_MEO',
                'NB_IOT_GEO',
                'NB_IOT_OTHERSAT',
                'LTE_M_LEO',
                'LTE_M_MEO',
                'LTE_M_GEO',
                'LTE_M_OTHERSAT',
                'NR_EREDCAP',
            ],
            str,
        ],
    ] = Field(
        ...,
        description="Provides information about the radio access but with the OpenAPI 'nullable: true' property. \n",
    )


class PduSessionTypeRm(BaseModel):
    __root__: Union[
        Union[Literal['IPV4', 'IPV6', 'IPV4V6', 'UNSTRUCTURED', 'ETHERNET'], str],
    ] = Field(
        ...,
        description='PduSessionType indicates the type of a PDU session. It shall comply with the provisions defined in table 5.4.3.3-1 but with the OpenAPI "nullable: true" property. \n',
    )


class UpIntegrityRm(BaseModel):
    __root__: Union[Union[Literal['REQUIRED', 'PREFERRED', 'NOT_NEEDED'], str],] = (
        Field(
            ...,
            description='indicates whether UP integrity protection is required, preferred or not needed for all the traffic on the PDU Session. It shall comply with the provisions defined in table 5.4.3.4-1. \n',
        )
    )


class UpConfidentialityRm(BaseModel):
    __root__: Union[Union[Literal['REQUIRED', 'PREFERRED', 'NOT_NEEDED'], str],] = (
        Field(
            ...,
            description="indicates whether UP integrity protection is required, preferred or not needed for all the  traffic on the PDU Session. It shall comply with the provisions defined in table 5.4.3.4-1, but with the OpenAPI 'nullable: true' property. \n",
        )
    )


class SscModeRm(BaseModel):
    __root__: Union[Union[Literal['SSC_MODE_1', 'SSC_MODE_2', 'SSC_MODE_3'], str],] = (
        Field(
            ...,
            description="represents the service and session continuity mode It shall comply with the provisions defined in table 5.4.3.6-1 but with the OpenAPI 'nullable: true' property. \n",
        )
    )


class DnaiChangeTypeRm(BaseModel):
    __root__: Union[Union[Literal['EARLY', 'EARLY_LATE', 'LATE'], str],] = Field(
        ...,
        description="It can take the values  as specified for DnaiChangeType but with the OpenAPI 'nullable: true' property. \n",
    )


class RestrictionTypeRm(BaseModel):
    __root__: Union[Union[Literal['ALLOWED_AREAS', 'NOT_ALLOWED_AREAS'], str],] = Field(
        ...,
        description="It contains the restriction type ALLOWED_AREAS or NOT_ALLOWED_AREAS but with the OpenAPI 'nullable: true' property. \n",
    )


class CoreNetworkTypeRm(BaseModel):
    __root__: Union[Union[Literal['5GC', 'EPC'], str],] = Field(
        ...,
        description="It contains the Core Network type 5GC or EPC but with the OpenAPI 'nullable: true' property. \n",
    )


class StationaryIndicationRm(BaseModel):
    __root__: Union[Union[Literal['STATIONARY', 'MOBILE'], str],] = Field(
        ...,
        description='This enumeration is defined in the same way as the \'StationaryIndication\' enumeration, but with the OpenAPI \'nullable: true\' property."\n',
    )


class ScheduledCommunicationTypeRm(BaseModel):
    __root__: Union[
        Union[Literal['DOWNLINK_ONLY', 'UPLINK_ONLY', 'BIDIRECTIONAL'], str],
    ] = Field(
        ...,
        description='This enumeration is defined in the same way as the \'ScheduledCommunicationTypen\' enumeration, but with the OpenAPI \'nullable: true\' property." \n',
    )


class TrafficProfileRm(BaseModel):
    __root__: Union[
        Union[
            Literal[
                'SINGLE_TRANS_UL',
                'SINGLE_TRANS_DL',
                'DUAL_TRANS_UL_FIRST',
                'DUAL_TRANS_DL_FIRST',
                'MULTI_TRANS',
            ],
            str,
        ],
    ] = Field(
        ...,
        description="This enumeration is defined in the same way as the 'TrafficProfile' enumeration, but with the OpenAPI 'nullable: true' property. \n",
    )


class LcsServiceAuth(BaseModel):
    __root__: Union[
        Literal[
            'LOCATION_ALLOWED_WITH_NOTIFICATION',
            'LOCATION_ALLOWED_WITHOUT_NOTIFICATION',
            'LOCATION_ALLOWED_WITHOUT_RESPONSE',
            'LOCATION_RESTRICTED_WITHOUT_RESPONSE',
            'NOTIFICATION_ONLY',
            'NOTIFICATION_AND_VERIFICATION_ONLY',
        ],
        str,
    ] = Field(
        ...,
        description='Possible values are:\n- "LOCATION_ALLOWED_WITH_NOTIFICATION": Location allowed with notification\n- "LOCATION_ALLOWED_WITHOUT_NOTIFICATION": Location allowed without notification\n- "LOCATION_ALLOWED_WITHOUT_RESPONSE": Location with notification and privacy\n   verification; location allowed if no response\n- "LOCATION_RESTRICTED_WITHOUT_RESPONSE": Location with notification and privacy\n  verification; location restricted if no response\n- "NOTIFICATION_ONLY": Notification only\n- "NOTIFICATION_AND_VERIFICATION_ONLY": Notification and privacy verification only\n',
    )


class DlDataDeliveryStatusRm(BaseModel):
    __root__: Union[Union[Literal['BUFFERED', 'TRANSMITTED', 'DISCARDED'], str],] = (
        Field(
            ...,
            description="This data type is defined in the same way as the ' DlDataDeliveryStatus ' data type, but with the OpenAPI 'nullable: true' property. \n",
        )
    )


class LineTypeRm(BaseModel):
    __root__: Union[Union[Literal['DSL', 'PON'], str],] = Field(
        ...,
        description="This data type is defined in the same way as the 'LineType' data type, but with the OpenAPI 'nullable: true' property. \n",
    )


class NotificationFlag(BaseModel):
    __root__: Union[Literal['ACTIVATE', 'DEACTIVATE', 'RETRIEVAL'], str] = Field(
        ...,
        description='Possible values are:\n- ACTIVATE: The event notification is activated.\n- DEACTIVATE: The event notification is deactivated and shall be muted. The available\n   event(s) shall be stored.\n- RETRIEVAL: The event notification shall be sent to the NF service consumer(s),\n  after that, is muted again. \n',
    )


class SatelliteBackhaulCategoryRm(BaseModel):
    __root__: Union[
        Union[
            Literal[
                'GEO',
                'MEO',
                'LEO',
                'OTHER_SAT',
                'DYNAMIC_GEO',
                'DYNAMIC_MEO',
                'DYNAMIC_LEO',
                'DYNAMIC_OTHER_SAT',
                'NON_SATELLITE',
            ],
            str,
        ],
    ] = Field(
        ...,
        description="Provides information about the satellite backhaul but with the OpenAPI 'nullable: true' property. \n",
    )


class Snssai1(BaseModel):
    sst: conint(ge=0, le=255) = Field(
        ...,
        description='Unsigned integer, within the range 0 to 255, representing the Slice/Service Type.  It indicates the expected Network Slice behaviour in terms of features and services. Values 0 to 127 correspond to the standardized SST range. Values 128 to 255 correspond  to the Operator-specific range. See clause 28.4.2 of 3GPP TS 23.003. Standardized values are defined in clause 5.15.2.2 of 3GPP TS 23.501. \n',
    )
    sd: Optional[constr(regex=r'^[A-Fa-f0-9]{6}$')] = Field(
        None,
        description='3-octet string, representing the Slice Differentiator, in hexadecimal representation. Each character in the string shall take a value of "0" to "9", "a" to "f" or "A" to "F" and shall represent 4 bits. The most significant character representing the 4 most significant bits of the SD shall appear first in the string, and the character representing the 4 least significant bit of the SD shall appear last in the string. This is an optional parameter that complements the Slice/Service type(s) to allow to  differentiate amongst multiple Network Slices of the same Slice/Service type. This IE shall be absent if no SD value is associated with the SST.\n',
    )


class PlmnId1(BaseModel):
    mcc: constr(regex=r'^\d{3}$') = Field(
        ...,
        description='Mobile Country Code part of the PLMN, comprising 3 digits, as defined in clause 9.3.3.5 of 3GPP TS 38.413. \n',
    )
    mnc: constr(regex=r'^\d{2,3}$') = Field(
        ...,
        description='Mobile Network Code part of the PLMN, comprising 2 or 3 digits, as defined in  clause 9.3.3.5 of 3GPP TS 38.413. \n',
    )


class PlmnIdRm(BaseModel):
    __root__: Union[PlmnId1,] = Field(
        ...,
        description="This data type is defined in the same way as the 'PlmnId' data type, but with the OpenAPI 'nullable: true' property. \n",
    )


class Tai1(BaseModel):
    plmnId: PlmnId1
    tac: constr(regex=r'(^[A-Fa-f0-9]{4}$)|(^[A-Fa-f0-9]{6}$)') = Field(
        ...,
        description='2 or 3-octet string identifying a tracking area code as specified in clause 9.3.3.10  of 3GPP TS 38.413, in hexadecimal representation. Each character in the string shall  take a value of "0" to "9", "a" to "f" or "A" to "F" and shall represent 4 bits. The most significant character representing the 4 most significant bits of the TAC shall  appear first in the string, and the character representing the 4 least significant bit  of the TAC shall appear last in the string. \n',
    )
    nid: Optional[constr(regex=r'^[A-Fa-f0-9]{11}$')] = Field(
        None,
        description='This represents the Network Identifier, which together with a PLMN ID is used to identify an SNPN (see 3GPP TS 23.003 and 3GPP TS 23.501 clause 5.30.2.1). \n',
    )


class TaiRm(BaseModel):
    __root__: Union[Tai1,] = Field(
        ...,
        description="This data type is defined in the same way as the 'Tai' data type, but with the OpenAPI 'nullable: true' property. \n",
    )


class Ecgi(BaseModel):
    plmnId: PlmnId1
    eutraCellId: constr(regex=r'^[A-Fa-f0-9]{7}$') = Field(
        ...,
        description='28-bit string identifying an E-UTRA Cell Id as specified in clause 9.3.1.9 of  3GPP TS 38.413, in hexadecimal representation. Each character in the string shall take a  value of "0" to "9", "a" to "f" or "A" to "F" and shall represent 4 bits. The most  significant character representing the 4 most significant bits of the Cell Id shall appear  first in the string, and the character representing the 4 least significant bit of the  Cell Id shall appear last in the string. \n',
    )
    nid: Optional[constr(regex=r'^[A-Fa-f0-9]{11}$')] = Field(
        None,
        description='This represents the Network Identifier, which together with a PLMN ID is used to identify an SNPN (see 3GPP TS 23.003 and 3GPP TS 23.501 clause 5.30.2.1). \n',
    )


class EcgiRm(BaseModel):
    __root__: Union[Ecgi,] = Field(
        ...,
        description="This data type is defined in the same way as the 'Ecgi' data type, but with the OpenAPI 'nullable: true' property.\n",
    )


class Ncgi(BaseModel):
    plmnId: PlmnId1
    nrCellId: constr(regex=r'^[A-Fa-f0-9]{9}$') = Field(
        ...,
        description='36-bit string identifying an NR Cell Id as specified in clause 9.3.1.7 of 3GPP TS 38.413,  in hexadecimal representation. Each character in the string shall take a value of "0" to "9",  "a" to "f" or "A" to "F" and shall represent 4 bits. The most significant character  representing the 4 most significant bits of the Cell Id shall appear first in the string, and  the character representing the 4 least significant bit of the Cell Id shall appear last in the  string. \n',
    )
    nid: Optional[constr(regex=r'^[A-Fa-f0-9]{11}$')] = Field(
        None,
        description='This represents the Network Identifier, which together with a PLMN ID is used to identify an SNPN (see 3GPP TS 23.003 and 3GPP TS 23.501 clause 5.30.2.1). \n',
    )


class NcgiRm(BaseModel):
    __root__: Union[Ncgi,] = Field(
        ...,
        description="This data type is defined in the same way as the 'Ncgi' data type, but with the  OpenAPI 'nullable: true' property. \n",
    )


class UpSecurity(BaseModel):
    upIntegr: Union[Literal['REQUIRED', 'PREFERRED', 'NOT_NEEDED'], str] = Field(
        ...,
        description='indicates whether UP integrity protection is required, preferred or not needed for all the traffic on the PDU Session. It shall comply with the provisions defined in  table 5.4.3.4-1. \n',
    )
    upConfid: Union[Literal['REQUIRED', 'PREFERRED', 'NOT_NEEDED'], str] = Field(
        ...,
        description='indicates whether UP confidentiality protection is required, preferred or not needed for all the traffic on the PDU Session. It shall comply with the provisions defined in table 5.4.3.5-1.\n',
    )


class UpSecurityRm(BaseModel):
    __root__: Union[UpSecurity,] = Field(
        ...,
        description="This data type is defined in the same way as the 'UpSecurity' data type, but with the OpenAPI 'nullable: true' property.\n",
    )


class NgApCause(BaseModel):
    group: conint(ge=0) = Field(
        ...,
        description='Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.',
    )
    value: conint(ge=0) = Field(
        ...,
        description='Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.',
    )


class RefToBinaryData(BaseModel):
    contentId: str = Field(
        ...,
        description='This IE shall contain the value of the Content-ID header of the referenced binary body part.\n',
    )


class RefToBinaryDataRm(BaseModel):
    __root__: Union[RefToBinaryData,] = Field(
        ...,
        description="This data type is defined in the same way as the ' RefToBinaryData ' data type, but with the OpenAPI 'nullable: true' property. \n",
    )


class RouteInformation(BaseModel):
    ipv4Addr: Optional[
        constr(
            regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
        )
    ] = Field(
        None,
        description="String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.\n",
        example='198.51.100.1',
    )
    ipv6Addr: Optional[Ipv6Addr] = None
    portNumber: conint(ge=0) = Field(
        ...,
        description='Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.',
    )


class Area1(BaseModel):
    tacs: List[constr(regex=r'(^[A-Fa-f0-9]{4}$)|(^[A-Fa-f0-9]{6}$)')] = Field(
        ..., min_items=1
    )
    areaCode: Optional[str] = Field(None, description='Values are operator specific.')


class Area2(BaseModel):
    tacs: Optional[List[constr(regex=r'(^[A-Fa-f0-9]{4}$)|(^[A-Fa-f0-9]{6}$)')]] = (
        Field(None, min_items=1)
    )
    areaCode: str = Field(..., description='Values are operator specific.')


class ServiceAreaRestriction(BaseModel):
    restrictionType: Optional[
        Union[Literal['ALLOWED_AREAS', 'NOT_ALLOWED_AREAS'], str]
    ] = Field(
        None,
        description='It contains the restriction type ALLOWED_AREAS or NOT_ALLOWED_AREAS.',
    )
    areas: Optional[List[Union[Area1, Area2]]] = None
    maxNumOfTAs: Optional[conint(ge=0)] = Field(
        None,
        description='Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.',
    )
    maxNumOfTAsForNotAllowedAreas: Optional[conint(ge=0)] = Field(
        None,
        description='Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.',
    )


class GNbId(BaseModel):
    bitLength: conint(ge=22, le=32) = Field(
        ...,
        description='Unsigned integer representing the bit length of the gNB ID as defined in clause 9.3.1.6 of 3GPP TS 38.413 [11], within the range 22 to 32.\n',
    )
    gNBValue: constr(regex=r'^[A-Fa-f0-9]{6,8}$') = Field(
        ...,
        description='This represents the identifier of the gNB. The value of the gNB ID shall be encoded in hexadecimal representation. Each character in the string shall take a value of "0" to "9", "a" to "f" or "A" to "F" and shall represent 4 bits. The padding 0 shall be added to make multiple nibbles,  the most significant character representing the padding 0 if required together with the 4 most significant bits of the gNB ID shall appear first in the string, and the character representing the 4 least significant bit of the gNB ID shall appear last in the string.\n',
    )


class AtsssCapability(BaseModel):
    atsssLL: Optional[bool] = Field(
        False,
        description='Indicates the support of Access Traffic Steering, Switching and Splitting procedures  using the ATSSS-LL steering functionality (see clauses 4.2.10, 5.32 of 3GPP TS 23.501). true: Supported false (default): Not Supported\n',
    )
    mptcp: Optional[bool] = Field(
        False,
        description='Indicates the support of Access Traffic Steering, Switching and Splitting procedures using the MPTCP steering functionality (see clauses 4.2.10, 5.32 of 3GPP\xa0TS\xa023.501 true: Supported false (default): Not Supported\n',
    )
    mpquic: Optional[bool] = Field(
        False,
        description='Indicates the support of Access Traffic Steering, Switching and Splitting procedures  using the MPQUIC steering functionality (see clauses 4.2.10, 5.32 of 3GPP\xa0TS\xa023.501) true: Supported false (default): Not Supported\n',
    )
    rttWithoutPmf: Optional[bool] = Field(
        False,
        description='This IE is only used by the UPF to indicate whether the UPF supports RTT measurement without PMF (see clauses\xa05.32.2, 6.3.3.3 of 3GPP\xa0TS\xa023.501 true: Supported false (default): Not Supported\n',
    )


class PlmnIdNid(BaseModel):
    mcc: constr(regex=r'^\d{3}$') = Field(
        ...,
        description='Mobile Country Code part of the PLMN, comprising 3 digits, as defined in clause 9.3.3.5 of 3GPP TS 38.413. \n',
    )
    mnc: constr(regex=r'^\d{2,3}$') = Field(
        ...,
        description='Mobile Network Code part of the PLMN, comprising 2 or 3 digits, as defined in  clause 9.3.3.5 of 3GPP TS 38.413. \n',
    )
    nid: Optional[constr(regex=r'^[A-Fa-f0-9]{11}$')] = Field(
        None,
        description='This represents the Network Identifier, which together with a PLMN ID is used to identify an SNPN (see 3GPP TS 23.003 and 3GPP TS 23.501 clause 5.30.2.1). \n',
    )


class PlmnIdNidRm(BaseModel):
    __root__: Union[PlmnIdNid,] = Field(
        ...,
        description="This data type is defined in the same way as the 'PlmnIdNid' data type, but with the OpenAPI 'nullable: true' property.\n",
    )


class SmallDataRateStatus(BaseModel):
    remainPacketsUl: Optional[conint(ge=0)] = Field(
        None,
        description='When present, it shall contain the number of packets the UE is allowed to send uplink in the given time unit for the given PDU session (see clause 5.31.14.3 of 3GPP TS 23.501.\n',
    )
    remainPacketsDl: Optional[conint(ge=0)] = Field(
        None,
        description='When present it shall contain the number of packets the AF is allowed to send downlink in the given time unit for the given PDU session (see clause 5.31.14.3 of 3GPP TS 23.501.\n',
    )
    validityTime: Optional[datetime] = Field(
        None, description="string with format 'date-time' as defined in OpenAPI."
    )
    remainExReportsUl: Optional[conint(ge=0)] = Field(
        None,
        description='When present, it shall indicate number of additional exception reports the UE is allowed to send uplink in the given time  unit for  the given PDU session (see clause 5.31.14.3 of 3GPP TS 23.501.\n',
    )
    remainExReportsDl: Optional[conint(ge=0)] = Field(
        None,
        description='When present, it shall indicate number of additional exception reports the AF is allowed to send downlink  in the given time unit for the given PDU session (see clause 5.31.14.3 in 3GPP TS 23.501\n',
    )


class HfcNodeId(BaseModel):
    hfcNId: constr(max_length=6) = Field(
        ...,
        description='This IE represents the identifier of the HFC node Id as specified in CableLabs WR-TR-5WWC-ARCH. It is provisioned by the wireline operator as part of wireline operations and may contain up to six characters.\n',
    )


class HfcNodeIdRm(BaseModel):
    __root__: Union[HfcNodeId,] = Field(
        ...,
        description="This data type is defined in the same way as the 'HfcNodeId' data type, but with the OpenAPI 'nullable: true' property.\n",
    )


class ApnRateStatus(BaseModel):
    remainPacketsUl: Optional[conint(ge=0)] = Field(
        None,
        description='When present, it shall contain the number of packets the UE is allowed to send uplink in the given time unit for the given APN (all PDN connections of the UE to this APN see clause 4.7.7.3 in 3GPP TS 23.401.\n',
    )
    remainPacketsDl: Optional[conint(ge=0)] = Field(
        None,
        description='When present, it shall contain the number of packets the UE is allowed to send uplink in the given time unit for the given APN (all PDN connections of the UE to this APN see clause 4.7.7.3 in 3GPP TS 23.401.\n',
    )
    validityTime: Optional[datetime] = Field(
        None, description="string with format 'date-time' as defined in OpenAPI."
    )
    remainExReportsUl: Optional[conint(ge=0)] = Field(
        None,
        description='When present, it shall indicate the number of additional exception reports the UE is allowed to send uplink in the given time unit for the given APN (all PDN connections of the UE to this APN, see clause 4.7.7.3 in 3GPP TS 23.401.\n',
    )
    remainExReportsDl: Optional[conint(ge=0)] = Field(
        None,
        description='When present, it shall indicate the number of additional exception reports the AF is allowed to send downlink in the  given time unit for the given APN (all PDN connections of the UE to this APN, see clause 4.7.7.3 in 3GPP TS 23.401.\n',
    )


class ScheduledCommunicationTime(BaseModel):
    daysOfWeek: Optional[List[conint(ge=1, le=7)]] = Field(
        None,
        description='Identifies the day(s) of the week. If absent, it indicates every day of the week.\n',
        max_items=6,
        min_items=1,
    )
    timeOfDayStart: Optional[str] = Field(
        None,
        description='String with format partial-time or full-time as defined in clause 5.6 of IETF RFC 3339. Examples, 20:15:00, 20:15:00-08:00 (for 8 hours behind UTC). \n',
    )
    timeOfDayEnd: Optional[str] = Field(
        None,
        description='String with format partial-time or full-time as defined in clause 5.6 of IETF RFC 3339. Examples, 20:15:00, 20:15:00-08:00 (for 8 hours behind UTC). \n',
    )


class ScheduledCommunicationTimeRm(BaseModel):
    __root__: Union[ScheduledCommunicationTime,] = Field(
        ...,
        description="This data type is defined in the same way as the 'ScheduledCommunicationTime' data type, but with the OpenAPI 'nullable: true' property.\n",
    )


class BatteryIndication(BaseModel):
    batteryInd: Optional[bool] = Field(
        None,
        description='This IE shall indicate whether the UE is battery powered or not. true: the UE is battery powered; false or absent: the UE is not battery powered\n',
    )
    replaceableInd: Optional[bool] = Field(
        None,
        description='This IE shall indicate whether the battery of the UE is replaceable or not. true: the battery of the UE is replaceable; false or absent: the battery of the UE is not replaceable.\n',
    )
    rechargeableInd: Optional[bool] = Field(
        None,
        description='This IE shall indicate whether the battery of the UE is rechargeable or not. true: the battery of UE is rechargeable; false or absent: the battery of the UE is not rechargeable.\n',
    )


class BatteryIndicationRm(BaseModel):
    __root__: Union[BatteryIndication,] = Field(
        ...,
        description="This data type is defined in the same way as the 'BatteryIndication' data type, but with the OpenAPI 'nullable: true' property.\n",
    )


class AcsInfo(BaseModel):
    acsUrl: Optional[str] = Field(
        None, description='String providing an URI formatted according to RFC 3986.'
    )
    acsIpv4Addr: Optional[
        constr(
            regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
        )
    ] = Field(
        None,
        description="String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.\n",
        example='198.51.100.1',
    )
    acsIpv6Addr: Optional[Ipv6Addr] = None


class AcsInfoRm(BaseModel):
    __root__: Union[AcsInfo,] = Field(
        ...,
        description="This data type is defined in the same way as the 'AcsInfo' data type, but with the  OpenAPI 'nullable: true' property.\n",
    )


class NrV2xAuth(BaseModel):
    vehicleUeAuth: Optional[Union[Literal['AUTHORIZED', 'NOT_AUTHORIZED'], str]] = (
        Field(
            None,
            description='Possible values are:\n- AUTHORIZED: Indicates that the UE is authorized.\n- NOT_AUTHORIZED: Indicates that the UE is not authorized.\n',
        )
    )
    pedestrianUeAuth: Optional[Union[Literal['AUTHORIZED', 'NOT_AUTHORIZED'], str]] = (
        Field(
            None,
            description='Possible values are:\n- AUTHORIZED: Indicates that the UE is authorized.\n- NOT_AUTHORIZED: Indicates that the UE is not authorized.\n',
        )
    )


class LteV2xAuth(BaseModel):
    vehicleUeAuth: Optional[Union[Literal['AUTHORIZED', 'NOT_AUTHORIZED'], str]] = (
        Field(
            None,
            description='Possible values are:\n- AUTHORIZED: Indicates that the UE is authorized.\n- NOT_AUTHORIZED: Indicates that the UE is not authorized.\n',
        )
    )
    pedestrianUeAuth: Optional[Union[Literal['AUTHORIZED', 'NOT_AUTHORIZED'], str]] = (
        Field(
            None,
            description='Possible values are:\n- AUTHORIZED: Indicates that the UE is authorized.\n- NOT_AUTHORIZED: Indicates that the UE is not authorized.\n',
        )
    )


class CellGlobalId(BaseModel):
    plmnId: PlmnId1
    lac: constr(regex=r'^[A-Fa-f0-9]{4}$')
    cellId: constr(regex=r'^[A-Fa-f0-9]{4}$')


class ServiceAreaId(BaseModel):
    plmnId: PlmnId1
    lac: constr(regex=r'^[A-Fa-f0-9]{4}$') = Field(
        ..., description='Location Area Code.'
    )
    sac: constr(regex=r'^[A-Fa-f0-9]{4}$') = Field(
        ..., description='Service Area Code.'
    )


class LocationAreaId(BaseModel):
    plmnId: PlmnId1
    lac: constr(regex=r'^[A-Fa-f0-9]{4}$') = Field(
        ..., description='Location Area Code.'
    )


class RoutingAreaId(BaseModel):
    plmnId: PlmnId1
    lac: constr(regex=r'^[A-Fa-f0-9]{4}$') = Field(
        ..., description='Location Area Code'
    )
    rac: constr(regex=r'^[A-Fa-f0-9]{2}$') = Field(..., description='Routing Area Code')


class DddTrafficDescriptor(BaseModel):
    ipv4Addr: Optional[
        constr(
            regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
        )
    ] = Field(
        None,
        description="String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.\n",
        example='198.51.100.1',
    )
    ipv6Addr: Optional[Ipv6Addr] = None
    portNumber: Optional[conint(ge=0)] = Field(
        None,
        description='Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.',
    )
    macAddr: Optional[constr(regex=r'^([0-9a-fA-F]{2})((-[0-9a-fA-F]{2}){5})$')] = (
        Field(
            None,
            description='String identifying a MAC address formatted in the hexadecimal notation according to clause 1.1 and clause 2.1 of RFC 7042.\n',
        )
    )


class MoExpDataCounter(BaseModel):
    counter: int = Field(
        ...,
        description='Unsigned integer identifying the MO Exception Data Counter, as specified in clause 5.31.14.3 of 3GPP TS 23.501.\n',
    )
    timeStamp: Optional[datetime] = Field(
        None, description="string with format 'date-time' as defined in OpenAPI."
    )


class NssaaStatus(BaseModel):
    snssai: Snssai1
    status: Union[Literal['EAP_SUCCESS', 'EAP_FAILURE', 'PENDING'], str] = Field(
        ...,
        description='Possible values are:\n- "EAP_SUCCESS": The NSSAA status is EAP-Success.\n- "EAP_FAILURE": The NSSAA status is EAP-Failure.\n- "PENDING": The NSSAA status is Pending. \n',
    )


class NssaaStatusRm(BaseModel):
    __root__: Union[NssaaStatus,] = Field(
        ...,
        description="This data type is defined in the same way as the 'NssaaStatus' data type, but with the OpenAPI 'nullable: true' property.\n",
    )


class TnapId(BaseModel):
    ssId: Optional[str] = Field(
        None,
        description='This IE shall be present if the UE is accessing the 5GC via a trusted WLAN access network.When present, it shall contain the SSID of the access point to which the UE is attached, that is received over NGAP,  see IEEE Std 802.11-2012. \n',
    )
    bssId: Optional[str] = Field(
        None,
        description='When present, it shall contain the BSSID of the access point to which the UE is attached, that is received over NGAP, see IEEE Std 802.11-2012. \n',
    )
    civicAddress: Optional[str] = Field(
        None, description="string with format 'bytes' as defined in OpenAPI"
    )


class TnapIdRm(BaseModel):
    __root__: Union[TnapId,] = Field(
        ...,
        description="This data type is defined in the same way as the 'TnapId' data type, but with the OpenAPI 'nullable: true' property. \n",
    )


class TwapId(BaseModel):
    ssId: str = Field(
        ...,
        description='This IE shall contain the SSID of the access point to which the UE is attached, that is received over NGAP, see IEEE Std 802.11-2012. \n',
    )
    bssId: Optional[str] = Field(
        None,
        description='When present, it shall contain the BSSID of the access point to which the UE is attached, for trusted WLAN access, see IEEE Std 802.11-2012. \n',
    )
    civicAddress: Optional[str] = Field(
        None, description="string with format 'bytes' as defined in OpenAPI"
    )


class TwapIdRm(BaseModel):
    __root__: Union[TwapId,] = Field(
        ...,
        description="This data type is defined in the same way as the 'TwapId' data type, but with the OpenAPI 'nullable: true' property.\n",
    )


class SdRange(BaseModel):
    start: Optional[constr(regex=r'^[A-Fa-f0-9]{6}$')] = Field(
        None,
        description='First value identifying the start of an SD range. This string shall be formatted as specified for the sd attribute of the Snssai data type in clause 5.4.4.2.\n',
    )
    end: Optional[constr(regex=r'^[A-Fa-f0-9]{6}$')] = Field(
        None,
        description='Last value identifying the end of an SD range. This string shall be formatted as specified for the sd attribute of the Snssai data type in clause 5.4.4.2.\n',
    )


class ProseServiceAuth(BaseModel):
    proseDirectDiscoveryAuth: Optional[
        Union[Literal['AUTHORIZED', 'NOT_AUTHORIZED'], str]
    ] = Field(
        None,
        description='Possible values are:\n- AUTHORIZED: Indicates that the UE is authorized.\n- NOT_AUTHORIZED: Indicates that the UE is not authorized.\n',
    )
    proseDirectCommunicationAuth: Optional[
        Union[Literal['AUTHORIZED', 'NOT_AUTHORIZED'], str]
    ] = Field(
        None,
        description='Possible values are:\n- AUTHORIZED: Indicates that the UE is authorized.\n- NOT_AUTHORIZED: Indicates that the UE is not authorized.\n',
    )
    proseL2RelayAuth: Optional[Union[Literal['AUTHORIZED', 'NOT_AUTHORIZED'], str]] = (
        Field(
            None,
            description='Possible values are:\n- AUTHORIZED: Indicates that the UE is authorized.\n- NOT_AUTHORIZED: Indicates that the UE is not authorized.\n',
        )
    )
    proseL3RelayAuth: Optional[Union[Literal['AUTHORIZED', 'NOT_AUTHORIZED'], str]] = (
        Field(
            None,
            description='Possible values are:\n- AUTHORIZED: Indicates that the UE is authorized.\n- NOT_AUTHORIZED: Indicates that the UE is not authorized.\n',
        )
    )
    proseL2RemoteAuth: Optional[Union[Literal['AUTHORIZED', 'NOT_AUTHORIZED'], str]] = (
        Field(
            None,
            description='Possible values are:\n- AUTHORIZED: Indicates that the UE is authorized.\n- NOT_AUTHORIZED: Indicates that the UE is not authorized.\n',
        )
    )
    proseL3RemoteAuth: Optional[Union[Literal['AUTHORIZED', 'NOT_AUTHORIZED'], str]] = (
        Field(
            None,
            description='Possible values are:\n- AUTHORIZED: Indicates that the UE is authorized.\n- NOT_AUTHORIZED: Indicates that the UE is not authorized.\n',
        )
    )
    proseMultipathComL2RemoteAuth: Optional[
        Union[Literal['AUTHORIZED', 'NOT_AUTHORIZED'], str]
    ] = Field(
        None,
        description='Possible values are:\n- AUTHORIZED: Indicates that the UE is authorized.\n- NOT_AUTHORIZED: Indicates that the UE is not authorized.\n',
    )
    proseL2UeRelayAuth: Optional[
        Union[Literal['AUTHORIZED', 'NOT_AUTHORIZED'], str]
    ] = Field(
        None,
        description='Possible values are:\n- AUTHORIZED: Indicates that the UE is authorized.\n- NOT_AUTHORIZED: Indicates that the UE is not authorized.\n',
    )
    proseL3UeRelayAuth: Optional[
        Union[Literal['AUTHORIZED', 'NOT_AUTHORIZED'], str]
    ] = Field(
        None,
        description='Possible values are:\n- AUTHORIZED: Indicates that the UE is authorized.\n- NOT_AUTHORIZED: Indicates that the UE is not authorized.\n',
    )
    proseL2EndAuth: Optional[Union[Literal['AUTHORIZED', 'NOT_AUTHORIZED'], str]] = (
        Field(
            None,
            description='Possible values are:\n- AUTHORIZED: Indicates that the UE is authorized.\n- NOT_AUTHORIZED: Indicates that the UE is not authorized.\n',
        )
    )
    proseL3EndAuth: Optional[Union[Literal['AUTHORIZED', 'NOT_AUTHORIZED'], str]] = (
        Field(
            None,
            description='Possible values are:\n- AUTHORIZED: Indicates that the UE is authorized.\n- NOT_AUTHORIZED: Indicates that the UE is not authorized.\n',
        )
    )


class IpAddr2(BaseModel):
    ipv4Addr: constr(
        regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
    ) = Field(
        ...,
        description="String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.\n",
        example='198.51.100.1',
    )
    ipv6Addr: Optional[Ipv6Addr] = None
    ipv6Prefix: Optional[Ipv6Prefix] = None


class IpAddr3(BaseModel):
    ipv4Addr: Optional[
        constr(
            regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
        )
    ] = Field(
        None,
        description="String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.\n",
        example='198.51.100.1',
    )
    ipv6Addr: Ipv6Addr
    ipv6Prefix: Optional[Ipv6Prefix] = None


class IpAddr4(BaseModel):
    ipv4Addr: Optional[
        constr(
            regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
        )
    ] = Field(
        None,
        description="String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.\n",
        example='198.51.100.1',
    )
    ipv6Addr: Optional[Ipv6Addr] = None
    ipv6Prefix: Ipv6Prefix


class SACInfo(BaseModel):
    numericValNumUes: Optional[int] = None
    numericValNumPduSess: Optional[int] = None
    percValueNumUes: Optional[conint(ge=0, le=100)] = None
    percValueNumPduSess: Optional[conint(ge=0, le=100)] = None
    uesWithPduSessionInd: Optional[bool] = False


class SACEventStatus(BaseModel):
    reachedNumUes: Optional[SACInfo] = None
    reachedNumPduSess: Optional[SACInfo] = None


class ServerAddressingInfo1(BaseModel):
    ipv4Addresses: List[
        constr(
            regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
        )
    ] = Field(..., min_items=1)
    ipv6Addresses: Optional[List[Ipv6Addr]] = Field(None, min_items=1)
    fqdnList: Optional[
        List[
            constr(
                regex=r'^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$',
                min_length=4,
                max_length=253,
            )
        ]
    ] = Field(None, min_items=1)


class ServerAddressingInfo2(BaseModel):
    ipv4Addresses: Optional[
        List[
            constr(
                regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
            )
        ]
    ] = Field(None, min_items=1)
    ipv6Addresses: List[Ipv6Addr] = Field(..., min_items=1)
    fqdnList: Optional[
        List[
            constr(
                regex=r'^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$',
                min_length=4,
                max_length=253,
            )
        ]
    ] = Field(None, min_items=1)


class ServerAddressingInfo3(BaseModel):
    ipv4Addresses: Optional[
        List[
            constr(
                regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
            )
        ]
    ] = Field(None, min_items=1)
    ipv6Addresses: Optional[List[Ipv6Addr]] = Field(None, min_items=1)
    fqdnList: List[
        constr(
            regex=r'^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$',
            min_length=4,
            max_length=253,
        )
    ] = Field(..., min_items=1)


class ServerAddressingInfo(BaseModel):
    __root__: Union[
        ServerAddressingInfo1, ServerAddressingInfo2, ServerAddressingInfo3
    ] = Field(
        ...,
        description='Contains addressing information (IP addresses and/or FQDNs) of a server.',
    )


class PcfUeCallbackInfo(BaseModel):
    callbackUri: str = Field(
        ..., description='String providing an URI formatted according to RFC 3986.'
    )
    bindingInfo: Optional[str] = None


class PduSessionInfo(BaseModel):
    snssai: Snssai1
    dnn: str = Field(
        ...,
        description='String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. "Label1.Label2.Label3").\n',
    )


class EasServerAddress(BaseModel):
    ip: Union[IpAddr2, IpAddr3, IpAddr4] = Field(
        ..., description='Contains an IP adresse.'
    )
    port: conint(ge=0) = Field(
        ...,
        description='Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.',
    )


class RoamingRestrictions(BaseModel):
    accessAllowed: Optional[bool] = None


class GeoServiceArea(BaseModel):
    geographicAreaList: Optional[List[str]] = Field(None, min_items=1)
    civicAddressList: Optional[List[str]] = Field(None, min_items=1)


class MutingExceptionInstructions(BaseModel):
    bufferedNotifs: Optional[
        Union[Literal['SEND_ALL', 'DISCARD_ALL', 'DROP_OLD'], str]
    ] = Field(
        None,
        description='Indicates the required action by the event producer NF on the buffered Notifications.\n',
    )
    subscription: Optional[
        Union[Literal['CLOSE', 'CONTINUE_WITH_MUTING', 'CONTINUE_WITHOUT_MUTING'], str]
    ] = Field(
        None,
        description='Indicates the required action by the event producer NF on the event subscription if an exception occurs while the event is muted.\n',
    )


class MutingNotificationsSettings(BaseModel):
    maxNoOfNotif: Optional[int] = None
    durationBufferedNotif: Optional[int] = Field(
        None, description='indicating a time in seconds.'
    )


class CombGciAndHfcNIds(BaseModel):
    globalCableId: Optional[str] = Field(
        None,
        description='Global Cable Identifier uniquely identifying the connection between the 5G-CRG or FN-CRG to the 5GS. See clause 28.15.4 of 3GPP TS 23.003. This shall be encoded as a string per clause 28.15.4 of 3GPP TS 23.003, and compliant with the syntax specified  in clause 2.2  of IETF RFC 7542 for the username part of a NAI. The GCI value is specified in CableLabs WR-TR-5WWC-ARCH.\n',
    )
    hfcNId: Optional[constr(max_length=6)] = Field(
        None,
        description='This IE represents the identifier of the HFC node Id as specified in CableLabs WR-TR-5WWC-ARCH. It is provisioned by the wireline operator as part of wireline operations and may contain up to six characters.\n',
    )


class PartiallyAllowedSnssai(BaseModel):
    snssai: Snssai1
    allowedTaiList: List[Tai1] = Field(..., min_items=1)


class VarRepPeriod(BaseModel):
    repPeriod: int = Field(..., description='indicating a time in seconds.')
    percValueNfLoad: Optional[conint(ge=0)] = Field(
        None,
        description='Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.',
    )


class RangingSlPosAuth(BaseModel):
    rgSlPosTargetAuth: Optional[Union[Literal['AUTHORIZED', 'NOT_AUTHORIZED'], str]] = (
        Field(
            None,
            description='Possible values are:\n- AUTHORIZED: Indicates that the UE is authorized.\n- NOT_AUTHORIZED: Indicates that the UE is not authorized.\n',
        )
    )
    rgSlPosSlRefAuth: Optional[Union[Literal['AUTHORIZED', 'NOT_AUTHORIZED'], str]] = (
        Field(
            None,
            description='Possible values are:\n- AUTHORIZED: Indicates that the UE is authorized.\n- NOT_AUTHORIZED: Indicates that the UE is not authorized.\n',
        )
    )
    rgSlPosLocAuth: Optional[Union[Literal['AUTHORIZED', 'NOT_AUTHORIZED'], str]] = (
        Field(
            None,
            description='Possible values are:\n- AUTHORIZED: Indicates that the UE is authorized.\n- NOT_AUTHORIZED: Indicates that the UE is not authorized.\n',
        )
    )
    rgSlPosClientAuth: Optional[Union[Literal['AUTHORIZED', 'NOT_AUTHORIZED'], str]] = (
        Field(
            None,
            description='Possible values are:\n- AUTHORIZED: Indicates that the UE is authorized.\n- NOT_AUTHORIZED: Indicates that the UE is not authorized.\n',
        )
    )
    rgSlPosServerAuth: Optional[Union[Literal['AUTHORIZED', 'NOT_AUTHORIZED'], str]] = (
        Field(
            None,
            description='Possible values are:\n- AUTHORIZED: Indicates that the UE is authorized.\n- NOT_AUTHORIZED: Indicates that the UE is not authorized.\n',
        )
    )


class NrA2xAuth(BaseModel):
    uavUeAuth: Optional[Union[Literal['AUTHORIZED', 'NOT_AUTHORIZED'], str]] = Field(
        None,
        description='Possible values are:\n- AUTHORIZED: Indicates that the UE is authorized.\n- NOT_AUTHORIZED: Indicates that the UE is not authorized.\n',
    )


class LteA2xAuth(BaseModel):
    uavUeAuth: Optional[Union[Literal['AUTHORIZED', 'NOT_AUTHORIZED'], str]] = Field(
        None,
        description='Possible values are:\n- AUTHORIZED: Indicates that the UE is authorized.\n- NOT_AUTHORIZED: Indicates that the UE is not authorized.\n',
    )


class SliceUsageControlInfo1(BaseModel):
    sNssai: Snssai1
    deregInactTimer: int = Field(..., description='indicating a time in seconds.')
    sessInactTimer: Optional[int] = Field(
        None, description='indicating a time in seconds.'
    )


class SliceUsageControlInfo2(BaseModel):
    sNssai: Snssai1
    deregInactTimer: Optional[int] = Field(
        None, description='indicating a time in seconds.'
    )
    sessInactTimer: int = Field(..., description='indicating a time in seconds.')


class SliceUsageControlInfo(BaseModel):
    __root__: Union[SliceUsageControlInfo1, SliceUsageControlInfo2] = Field(
        ..., description='The network slice usage control related information'
    )


class NtnTaiInfo(BaseModel):
    plmnId: PlmnIdNid
    tacList: List[constr(regex=r'(^[A-Fa-f0-9]{4}$)|(^[A-Fa-f0-9]{6}$)')] = Field(
        ..., min_items=1
    )
    derivedTac: Optional[constr(regex=r'(^[A-Fa-f0-9]{4}$)|(^[A-Fa-f0-9]{6}$)')] = (
        Field(
            None,
            description='2 or 3-octet string identifying a tracking area code as specified in clause 9.3.3.10  of 3GPP TS 38.413, in hexadecimal representation. Each character in the string shall  take a value of "0" to "9", "a" to "f" or "A" to "F" and shall represent 4 bits. The most significant character representing the 4 most significant bits of the TAC shall  appear first in the string, and the character representing the 4 least significant bit  of the TAC shall appear last in the string. \n',
        )
    )


class MitigationInfo(BaseModel):
    percValueNumUes: Optional[conint(ge=0, le=100)] = None
    newUesInd: Optional[bool] = None


class SnssaiReplaceInfo(BaseModel):
    snssai: Snssai1
    status: Optional[Union[Literal['AVAILABLE', 'UNAVAILABLE'], str]] = Field(
        None, description='Indicates the S-NSSAI availability.'
    )
    altSnssai: Optional[Snssai1] = None
    nsReplTerminInd: Optional[
        Union[Literal['NEW_UES_TERMINATION', 'ALL_UES_TERMINATION'], str]
    ] = Field(
        None, description='Indicates the termination of Network Slice Replacement.'
    )
    plmnId: Optional[PlmnId1] = None
    mitigationInfo: Optional[MitigationInfo] = None


class QfiRm(BaseModel):
    __root__: Optional[conint(ge=0, le=63)] = Field(
        None,
        description="This data type is defined in the same way as the 'Qfi' data type, but with the OpenAPI 'nullable: true' property.\n",
    )


class Field5QiRm(BaseModel):
    __root__: Optional[conint(ge=0, le=255)] = Field(
        None,
        description='This data type is defined in the same way as the \'5QiPriorityLevel\' data type, but with the OpenAPI \'nullable: true\' property. "\n',
    )


class PacketRate(BaseModel):
    __root__: constr(regex=r'^\d+(\.\d+)? (pps|kpps|Mpps|Gpps|Tpps)$') = Field(
        ...,
        description='String representing a packet rate, i.e., packet per second; the prefixes follow the symbols from The International System of Units, and represent x1000 multipliers.\n',
    )


class PacketRateRm(BaseModel):
    __root__: Optional[constr(regex=r'^\d+(\.\d+)? (pps|kpps|Mpps|Gpps|Tpps)$')] = (
        Field(
            None,
            description="This data type is defined in the same way as the 'PacketRate' data type, but with the OpenAPI 'nullable: true' property.\n",
        )
    )


class TrafficVolume(BaseModel):
    __root__: constr(regex=r'^\d+(\.\d+)? (B|kB|MB|GB|TB)$') = Field(
        ...,
        description='String representing a Traffic Volume measured in bytes; the prefixes follow the symbols from The International System of Units, and represent x1000 multipliers.\n',
    )


class TrafficVolumeRm(BaseModel):
    __root__: Optional[constr(regex=r'^\d+(\.\d+)? (B|kB|MB|GB|TB)$')] = Field(
        None,
        description="This data type is defined in the same way as the 'TrafficVolume' data type, but with the OpenAPI 'nullable: true' property.\n",
    )


class ArpPriorityLevelRm(BaseModel):
    __root__: Optional[conint(ge=1, le=15)] = Field(
        None,
        description="This data type is defined in the same way as the 'ArpPriorityLevel' data type, but with the OpenAPI 'nullable: true' property.\n",
    )


class Field5QiPriorityLevelRm(BaseModel):
    __root__: Optional[conint(ge=1, le=127)] = Field(
        None,
        description="This data type is defined in the same way as the '5QiPriorityLevel' data type, but with the OpenAPI 'nullable: true' property.\n",
    )


class PacketDelBudgetRm(BaseModel):
    __root__: Optional[conint(ge=1)] = Field(
        None,
        description="This data type is defined in the same way as the 'PacketDelBudget' data type, but with the OpenAPI 'nullable: true' property.\n",
    )


class PacketErrRateRm(BaseModel):
    __root__: Optional[constr(regex=r'^([0-9]E-[0-9])$')] = Field(
        None,
        description="This data type is defined in the same way as the 'PacketErrRate' data type, but with the OpenAPI 'nullable: true' property.\n",
    )


class PacketLossRate(BaseModel):
    __root__: conint(ge=0, le=1000) = Field(
        ...,
        description='Unsigned integer indicating Packet Loss Rate (see clauses 5.7.2.8 and 5.7.4 of 3GPP TS 23.501), expressed in tenth of percent.\n',
    )


class AverWindowRm(BaseModel):
    __root__: Optional[conint(ge=1, le=4095)] = Field(
        2000,
        description="This data type is defined in the same way as the 'AverWindow' data type, but with the OpenAPI 'nullable: true' property.\n",
    )


class MaxDataBurstVolRm(BaseModel):
    __root__: Optional[conint(ge=1, le=4095)] = Field(
        None,
        description="This data type is defined in the same way as the 'MaxDataBurstVol' data type, but with the OpenAPI 'nullable: true' property.\n",
    )


class SamplingRatio(BaseModel):
    __root__: conint(ge=1, le=100) = Field(
        ...,
        description='Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent. \n',
    )


class SamplingRatioRm(BaseModel):
    __root__: Optional[conint(ge=1, le=100)] = Field(
        None,
        description="This data type is defined in the same way as the 'SamplingRatio' data type, but with the  OpenAPI 'nullable: true' property. \n",
    )


class RgWirelineCharacteristicsRm(BaseModel):
    __root__: Union[str,] = Field(
        ...,
        description="This data type is defined in the same way as the 'RgWirelineCharacteristics' data type, but with the OpenAPI 'nullable: true' property.\n",
    )


class ExtPacketDelBudgetRm(BaseModel):
    __root__: Optional[conint(ge=1)] = Field(
        None,
        description='This data type is defined in the same way as the \'ExtPacketDelBudget\' data type, but with the OpenAPI \'nullable: true\' property. "\n',
    )


class Metadata(BaseModel):
    __root__: Optional[str] = Field(
        None,
        description='A String which is transparently passed to the UPF to be applied for traffic to SFC.\n',
    )


class PreemptionCapabilityRm(BaseModel):
    __root__: Union[Union[Literal['NOT_PREEMPT', 'MAY_PREEMPT'], str],] = Field(
        ...,
        description="This enumeration is defined in the same way as the 'PreemptionCapability' enumeration, but with the OpenAPI 'nullable: true' property.\n",
    )


class PreemptionVulnerabilityRm(BaseModel):
    __root__: Union[Union[Literal['NOT_PREEMPTABLE', 'PREEMPTABLE'], str],] = Field(
        ...,
        description='This enumeration is defined in the same way as the \'PreemptionVulnerability\' enumeration, but with the OpenAPI \'nullable: true\' property." \n',
    )


class ReflectiveQoSAttributeRm(BaseModel):
    __root__: Union[Union[Literal['RQOS', 'NO_RQOS'], str],] = Field(
        ...,
        description='This enumeration is defined in the same way as the \'ReflectiveQosAttribute\' enumeration, but with the OpenAPI \'nullable: true\' property. "\n',
    )


class NotificationControlRm(BaseModel):
    __root__: Union[Union[Literal['REQUESTED', 'NOT_REQUESTED'], str],] = Field(
        ...,
        description="This enumeration is defined in the same way as the 'NotificationControl' enumeration, but with the OpenAPI 'nullable: true' property.\n",
    )


class QosResourceTypeRm(BaseModel):
    __root__: Union[
        Union[Literal['NON_GBR', 'NON_CRITICAL_GBR', 'CRITICAL_GBR'], str],
    ] = Field(
        ...,
        description='This enumeration is defined in the same way as the \'QosResourceType\' enumeration, but with the OpenAPI \'nullable: true\' property. "\n',
    )


class AdditionalQosFlowInfo(BaseModel):
    __root__: Union[Union[Literal['MORE_LIKELY'], str],] = Field(
        ...,
        description='The enumeration AdditionalQosFlowInfo provides additional QoS flow information (see clause  9.3.1.12 3GPP\xa0TS\xa038.413\xa0[11]). It shall comply with the provisions defined in table 5.5.3.12-1.\n',
    )


class PartitioningCriteriaRm(BaseModel):
    __root__: Union[
        Union[Literal['TAC', 'SUBPLMN', 'GEOAREA', 'SNSSAI', 'DNN'], str],
    ] = Field(
        ...,
        description="This data type is defined in the same way as the ' PartitioningCriteria ' data type, but with the OpenAPI 'nullable: true' property.\n",
    )


class Arp(BaseModel):
    priorityLevel: conint(ge=1, le=15) = Field(
        ...,
        description='nullable true shall not be used for this attribute. Unsigned integer indicating the ARP Priority Level (see clause 5.7.2.2 of 3GPP TS 23.501, within the range 1 to 15.Values are ordered in decreasing order of priority, i.e. with 1 as the highest priority and 15 as the lowest priority. \n',
    )
    preemptCap: Union[Literal['NOT_PREEMPT', 'MAY_PREEMPT'], str] = Field(
        ...,
        description='The enumeration PreemptionCapability indicates the pre-emption capability of a request on other QoS flows. See clause 5.7.2.2 of 3GPP TS 23.501. It shall comply with the provisions defined in table 5.5.3.1-1.\n',
    )
    preemptVuln: Union[Literal['NOT_PREEMPTABLE', 'PREEMPTABLE'], str] = Field(
        ...,
        description='The enumeration PreemptionVulnerability indicates the pre-emption vulnerability of the QoS flow to pre-emption from other QoS flows. See clause 5.7.2.2 of 3GPP TS 23.501. It shall comply with the provisions defined in table 5.5.3.2-1\n',
    )


class Ambr(BaseModel):
    uplink: constr(regex=r'^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$') = Field(
        ...,
        description='String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix "K" is used to represent the standard symbol "k".\n',
    )
    downlink: constr(regex=r'^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$') = Field(
        ...,
        description='String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix "K" is used to represent the standard symbol "k".\n',
    )


class Dynamic5Qi(BaseModel):
    resourceType: Union[Literal['NON_GBR', 'NON_CRITICAL_GBR', 'CRITICAL_GBR'], str] = (
        Field(
            ...,
            description='The enumeration QosResourceType indicates whether a QoS Flow is non-GBR, delay critical GBR, or non-delay critical GBR (see clauses 5.7.3.4 and 5.7.3.5 of 3GPP TS 23.501). It shall comply with the provisions defined in table 5.5.3.6-1. \n',
        )
    )
    priorityLevel: conint(ge=1, le=127) = Field(
        ...,
        description='Unsigned integer indicating the 5QI Priority Level (see clauses 5.7.3.3 and 5.7.4 of 3GPP TS 23.501, within the range 1 to 127.Values are ordered in decreasing order of priority,  i.e. with 1 as the highest priority and 127 as the lowest priority. \n',
    )
    packetDelayBudget: conint(ge=1) = Field(
        ...,
        description='Unsigned integer indicating Packet Delay Budget (see clauses 5.7.3.4 and 5.7.4 of 3GPP TS 23.501), expressed in milliseconds.\n',
    )
    packetErrRate: constr(regex=r'^([0-9]E-[0-9])$') = Field(
        ...,
        description='String representing Packet Error Rate (see clause 5.7.3.5 and 5.7.4 of 3GPP TS 23.501, expressed as a "scalar x 10-k" where the scalar and the exponent k are each encoded as one decimal digit.\n',
    )
    averWindow: Optional[conint(ge=1, le=4095)] = Field(
        None,
        description='Unsigned integer indicating Averaging Window (see clause 5.7.3.6 and 5.7.4 of 3GPP TS 23.501), expressed in milliseconds. \n',
    )
    maxDataBurstVol: Optional[conint(ge=1, le=4095)] = Field(
        None,
        description='Unsigned integer indicating Maximum Data Burst Volume (see clauses 5.7.3.7 and 5.7.4 of 3GPP TS 23.501), expressed in Bytes. \n',
    )
    extMaxDataBurstVol: Optional[conint(ge=4096, le=2000000)] = Field(
        None,
        description='Unsigned integer indicating Maximum Data Burst Volume (see clauses 5.7.3.7 and 5.7.4 of 3GPP TS 23.501), expressed in Bytes. \n',
    )
    extPacketDelBudget: Optional[conint(ge=1)] = Field(
        None,
        description='Unsigned integer indicating Packet Delay Budget (see clauses\xa05.7.3.4 and 5.7.4 of 3GPP TS 23.501 [8])), expressed in 0.01 milliseconds.\n',
    )
    cnPacketDelayBudgetDl: Optional[conint(ge=1)] = Field(
        None,
        description='Unsigned integer indicating Packet Delay Budget (see clauses\xa05.7.3.4 and 5.7.4 of 3GPP TS 23.501 [8])), expressed in 0.01 milliseconds.\n',
    )
    cnPacketDelayBudgetUl: Optional[conint(ge=1)] = Field(
        None,
        description='Unsigned integer indicating Packet Delay Budget (see clauses\xa05.7.3.4 and 5.7.4 of 3GPP TS 23.501 [8])), expressed in 0.01 milliseconds.\n',
    )


class NonDynamic5Qi(BaseModel):
    priorityLevel: Optional[conint(ge=1, le=127)] = Field(
        None,
        description='Unsigned integer indicating the 5QI Priority Level (see clauses 5.7.3.3 and 5.7.4 of 3GPP TS 23.501, within the range 1 to 127.Values are ordered in decreasing order of priority,  i.e. with 1 as the highest priority and 127 as the lowest priority. \n',
    )
    averWindow: Optional[conint(ge=1, le=4095)] = Field(
        None,
        description='Unsigned integer indicating Averaging Window (see clause 5.7.3.6 and 5.7.4 of 3GPP TS 23.501), expressed in milliseconds. \n',
    )
    maxDataBurstVol: Optional[conint(ge=1, le=4095)] = Field(
        None,
        description='Unsigned integer indicating Maximum Data Burst Volume (see clauses 5.7.3.7 and 5.7.4 of 3GPP TS 23.501), expressed in Bytes. \n',
    )
    extMaxDataBurstVol: Optional[conint(ge=4096, le=2000000)] = Field(
        None,
        description='Unsigned integer indicating Maximum Data Burst Volume (see clauses 5.7.3.7 and 5.7.4 of 3GPP TS 23.501), expressed in Bytes. \n',
    )
    cnPacketDelayBudgetDl: Optional[conint(ge=1)] = Field(
        None,
        description='Unsigned integer indicating Packet Delay Budget (see clauses\xa05.7.3.4 and 5.7.4 of 3GPP TS 23.501 [8])), expressed in 0.01 milliseconds.\n',
    )
    cnPacketDelayBudgetUl: Optional[conint(ge=1)] = Field(
        None,
        description='Unsigned integer indicating Packet Delay Budget (see clauses\xa05.7.3.4 and 5.7.4 of 3GPP TS 23.501 [8])), expressed in 0.01 milliseconds.\n',
    )


class ArpRm(BaseModel):
    __root__: Union[Arp,] = Field(
        ...,
        description="This data type is defined in the same way as the 'Arp' data type, but with the OpenAPI 'nullable: true' property.\n",
    )


class AmbrRm(BaseModel):
    __root__: Union[Ambr,] = Field(
        ...,
        description='This data type is defined in the same way as the \'Ambr\' data type, but with the OpenAPI \'nullable: true\' property."\n',
    )


class SliceMbr(BaseModel):
    uplink: constr(regex=r'^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$') = Field(
        ...,
        description='String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix "K" is used to represent the standard symbol "k".\n',
    )
    downlink: constr(regex=r'^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$') = Field(
        ...,
        description='String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix "K" is used to represent the standard symbol "k".\n',
    )


class SliceMbrRm(BaseModel):
    __root__: Union[SliceMbr,] = Field(..., description='SliceMbr with nullable: true')


class PduSetQosPara(BaseModel):
    pduSetDelayBudget: Optional[conint(ge=1)] = Field(
        None,
        description='Unsigned integer indicating Packet Delay Budget (see clauses\xa05.7.3.4 and 5.7.4 of 3GPP TS 23.501 [8])), expressed in 0.01 milliseconds.\n',
    )
    pduSetErrRate: Optional[constr(regex=r'^([0-9]E-[0-9])$')] = Field(
        None,
        description='String representing Packet Error Rate (see clause 5.7.3.5 and 5.7.4 of 3GPP TS 23.501, expressed as a "scalar x 10-k" where the scalar and the exponent k are each encoded as one decimal digit.\n',
    )
    pduSetHandlingInfo: Optional[
        Union[Literal['ALL_PDUS_NEEDED', 'ALL_PDUS_NOT_NEEDED'], str]
    ] = Field(
        None,
        description='Possible values are:\n- "ALL_PDUS_NEEDED": All PDUs of the PDU Set are needed\n- "ALL_PDUS_NOT_NEEDED": All PDUs of the PDU Set are not needed\n',
    )


class PduSetQosParaRm(BaseModel):
    __root__: Union[PduSetQosPara,] = Field(
        ..., description='PduSetQosPara with nullable: true'
    )


class RtpHeaderExtInfo(BaseModel):
    rtpHeaderExtType: Optional[Union[Literal['PDU_SET_MARKING'], str]] = Field(
        None,
        description='The enumeration indicates the type of Rtp Header Extension type \n',
    )
    rtpHeaderExtId: Optional[conint(ge=1, le=255)] = None
    longFormat: Optional[bool] = None
    pduSetSizeActive: Optional[bool] = None


class RtpPayloadInfo(BaseModel):
    rtpPayloadTypeList: Optional[List[conint(ge=1, le=127)]] = Field(None, min_items=1)
    rtpPayloadFormat: Optional[Union[Literal['H264', 'H265'], str]] = Field(
        None,
        description='The enumeration RtpPayloadFormat indicates the RTP Payload format \n',
    )


class TraceDepthRm(BaseModel):
    __root__: Union[
        Union[
            Literal[
                'MINIMUM',
                'MEDIUM',
                'MAXIMUM',
                'MINIMUM_WO_VENDOR_EXTENSION',
                'MEDIUM_WO_VENDOR_EXTENSION',
                'MAXIMUM_WO_VENDOR_EXTENSION',
            ],
            str,
        ],
    ] = Field(
        ...,
        description="This enumeration is defined in the same way as the 'TraceDepth' enumeration, but with the OpenAPI 'nullable: true' property.\n",
    )


class TraceData(BaseModel):
    traceRef: constr(regex=r'^[0-9]{3}[0-9]{2,3}-[A-Fa-f0-9]{6}$') = Field(
        ...,
        description='Trace Reference (see 3GPP TS 32.422).It shall be encoded as the concatenation of MCC, MNC and Trace ID as follows: <MCC><MNC>-<Trace ID> The Trace ID shall be encoded as a 3 octet string in hexadecimal representation. Each character in the Trace ID string shall take a value of "0" to "9", "a" to "f" or "A" to "F" and shall represent 4 bits. The most significant character representing the 4 most significant bits of the Trace ID shall appear first in the string, and the character representing the 4 least significant bit of the Trace ID shall appear last in the string.\n',
    )
    traceDepth: Union[
        Literal[
            'MINIMUM',
            'MEDIUM',
            'MAXIMUM',
            'MINIMUM_WO_VENDOR_EXTENSION',
            'MEDIUM_WO_VENDOR_EXTENSION',
            'MAXIMUM_WO_VENDOR_EXTENSION',
        ],
        str,
    ] = Field(
        ...,
        description='The enumeration TraceDepth defines how detailed information should be recorded in the trace. See 3GPP TS 32.422 for further description of the values. It shall comply with the provisions defined in table 5.6.3.1-1\n',
    )
    neTypeList: constr(regex=r'^[A-Fa-f0-9]+$') = Field(
        ...,
        description='List of NE Types (see 3GPP TS 32.422). It shall be encoded as an octet string in hexadecimal representation. Each character in the string shall take a value of "0" to "9", "a" to "f" or "A" to "F" and shall represent 4 bits. The most significant character representing the 4 most significant bits shall appear first in the string, and the character representing the 4 least significant bit shall appear last in the string. Octets shall be coded according to 3GPP TS 32.422.\n',
    )
    eventList: constr(regex=r'^[A-Fa-f0-9]+$') = Field(
        ...,
        description='Triggering events (see 3GPP TS 32.422). It shall be encoded as an octet string in hexadecimal representation. Each character in the string shall take a value of "0" to "9", "a" to "f" or "A" to "F" and shall represent 4 bits. The most significant character representing the 4 most significant bits shall appear first in the string, and the character representing the 4 least significant bit shall appear last in the string. Octets shall be coded according to 3GPP TS 32.422.\n',
    )
    collectionEntityIpv4Addr: Optional[
        constr(
            regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
        )
    ] = Field(
        None,
        description="String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.\n",
        example='198.51.100.1',
    )
    collectionEntityIpv6Addr: Optional[Ipv6Addr] = None
    traceReportingConsumerUri: Optional[str] = Field(
        None, description='String providing an URI formatted according to RFC 3986.'
    )
    interfaceList: Optional[constr(regex=r'^[A-Fa-f0-9]+$')] = Field(
        None,
        description='List of Interfaces (see 3GPP TS 32.422). It shall be encoded as an octet string in hexadecimal representation. Each character in the string shall take a value of "0" to "9", "a" to "f" or "A" to "F" and shall represent 4 bits. The most significant character representing the 4 most significant bits shall appear first in the string, and the character representing the  4 least significant bit shall appear last in the string. Octets shall be coded according to 3GPP TS 32.422. If this attribute is not present, all the interfaces applicable to the list of NE types indicated in the neTypeList attribute should be traced.\n',
    )


class TacInfo(BaseModel):
    tacList: List[constr(regex=r'(^[A-Fa-f0-9]{4}$)|(^[A-Fa-f0-9]{6}$)')] = Field(
        ..., min_items=1
    )


class CagInfo(BaseModel):
    cagList: List[constr(regex=r'^[A-Fa-f0-9]{8}$')] = Field(..., min_items=1)


class NidInfo(BaseModel):
    nidList: List[constr(regex=r'^[A-Fa-f0-9]{11}$')] = Field(..., min_items=1)


class MbsfnArea(BaseModel):
    mbsfnAreaId: Optional[conint(ge=0, le=255)] = Field(
        None, description='This IE shall contain the MBSFN Area ID.'
    )
    carrierFrequency: Optional[conint(ge=0, le=262143)] = Field(
        None,
        description='When present, this IE shall contain the Carrier Frequency (EARFCN).',
    )


class InterFreqTargetInfo(BaseModel):
    dlCarrierFreq: conint(ge=0, le=3279165) = Field(
        ...,
        description='Integer value indicating the ARFCN applicable for a downlink, uplink or bi-directional (TDD) NR global frequency raster, as definition of "ARFCN-ValueNR" IE in clause 6.3.2 of 3GPP TS 38.331.\n',
    )
    cellIdList: Optional[List[conint(ge=0, le=1007)]] = Field(
        None,
        description='When present, this IE shall contain a list of the physical cell identities where the UE is requested to perform measurement logging for the indicated frequency.\n',
        max_items=32,
        min_items=1,
    )


class QmcAreaScope(BaseModel):
    nrCellIdList: Optional[List[constr(regex=r'^[A-Fa-f0-9]{9}$')]] = Field(
        None, min_items=1
    )
    tacList: Optional[List[constr(regex=r'(^[A-Fa-f0-9]{4}$)|(^[A-Fa-f0-9]{6}$)')]] = (
        Field(None, min_items=1)
    )
    taiList: Optional[List[Tai1]] = Field(None, min_items=1)
    plmnList: Optional[List[PlmnId1]] = Field(None, min_items=1)


class QoeTarget(BaseModel):
    supi: Optional[constr(regex=r'^(imsi-[0-9]{5,15}|nai-.+|gci-.+|gli-.+|.+)$')] = (
        Field(
            None,
            description='String identifying a Supi that shall contain either an IMSI, a network specific identifier,\na Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause \n2.2A of 3GPP TS 23.003. It shall be formatted as follows\n - for an IMSI "imsi-<imsi>", where <imsi> shall be formatted according to clause 2.2\n   of 3GPP TS 23.003 that describes an IMSI.\n - for a network specific identifier "nai-<nai>, where <nai> shall be formatted\n   according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.\n - for a GCI "gci-<gci>", where <gci> shall be formatted according to clause 28.15.2\n   of 3GPP TS 23.003.\n - for a GLI "gli-<gli>", where <gli> shall be formatted according to clause 28.16.2 of\n   3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall\n   only contain characters allowed according to the "lower-with-hyphen" naming convention\n   defined in 3GPP TS 29.501.\n',
        )
    )
    imsi: Optional[constr(regex=r'^[0-9]{5,15}$')] = Field(
        None, description='String identifying an IMSI'
    )


class OdbPacketServices(BaseModel):
    __root__: Union[
        Union[
            Literal[
                'ALL_PACKET_SERVICES',
                'ROAMER_ACCESS_HPLMN_AP',
                'ROAMER_ACCESS_VPLMN_AP',
            ],
            str,
        ],
    ] = Field(
        ...,
        description='The enumeration OdbPacketServices defines the Barring of Packet Oriented Services. See 3GPP TS 23.015 for further description. It shall comply with the provisions defined in table 5.7.3.2-1\n',
    )


class OdbData(BaseModel):
    roamingOdb: Optional[
        Union[Literal['OUTSIDE_HOME_PLMN', 'OUTSIDE_HOME_PLMN_COUNTRY'], str]
    ] = Field(
        None,
        description='The enumeration RoamingOdb defines the Barring of Roaming as. See 3GPP TS 23.015 for further description. It shall comply with the provisions defined in table 5.7.3.1-1.\n',
    )


class ChargingId(BaseModel):
    __root__: conint(ge=0, le=4294967295) = Field(
        ...,
        description='Integer where the allowed values correspond to the value range of an unsigned 32-bit integer.\n',
    )


class SmfChargingId(BaseModel):
    __root__: constr(
        regex=r'^(0|([1-9]{1}[0-9]{0,9}))\.smf-([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})$'
    ) = Field(..., description='String based Charging ID')


class ApplicationChargingId(BaseModel):
    __root__: str = Field(
        ...,
        description='Application provided charging identifier allowing correlation of charging information.\n',
    )


class RatingGroup(BaseModel):
    __root__: conint(ge=0, le=4294967295) = Field(
        ...,
        description='Integer where the allowed values correspond to the value range of an unsigned 32-bit integer.\n',
    )


class ServiceId(BaseModel):
    __root__: conint(ge=0, le=4294967295) = Field(
        ...,
        description='Integer where the allowed values correspond to the value range of an unsigned 32-bit integer.\n',
    )


class QosFlowUsageReport(BaseModel):
    qfi: conint(ge=0, le=63) = Field(
        ...,
        description='Unsigned integer identifying a QoS flow, within the range 0 to 63.',
    )
    startTimeStamp: datetime = Field(
        ..., description="string with format 'date-time' as defined in OpenAPI."
    )
    endTimeStamp: datetime = Field(
        ..., description="string with format 'date-time' as defined in OpenAPI."
    )
    downlinkVolume: int = Field(
        ..., description="string with format 'int64' as defined in OpenAPI."
    )
    uplinkVolume: int = Field(
        ..., description="string with format 'int64' as defined in OpenAPI."
    )


class VolumeTimedReport(BaseModel):
    startTimeStamp: datetime = Field(
        ..., description="string with format 'date-time' as defined in OpenAPI."
    )
    endTimeStamp: datetime = Field(
        ..., description="string with format 'date-time' as defined in OpenAPI."
    )
    downlinkVolume: int = Field(
        ..., description="string with format 'int64' as defined in OpenAPI."
    )
    uplinkVolume: int = Field(
        ..., description="string with format 'int64' as defined in OpenAPI."
    )


class AreaSessionPolicyId(BaseModel):
    __root__: conint(ge=0, le=65535) = Field(
        ...,
        description='Integer where the allowed values correspond to the value range of an unsigned 16-bit integer.\n',
    )


class Tmgi(BaseModel):
    mbsServiceId: constr(regex=r'^[A-Fa-f0-9]{6}$') = Field(
        ..., description='MBS Service ID'
    )
    plmnId: PlmnId1


class Ssm(BaseModel):
    sourceIpAddr: Union[IpAddr2, IpAddr3, IpAddr4] = Field(
        ..., description='Contains an IP adresse.'
    )
    destIpAddr: Union[IpAddr2, IpAddr3, IpAddr4] = Field(
        ..., description='Contains an IP adresse.'
    )


class NcgiTai(BaseModel):
    tai: Tai1
    cellList: List[Ncgi] = Field(
        ..., description='List of List of NR cell ids', min_items=1
    )


class MbsSessionEvent(BaseModel):
    eventType: Union[
        Literal[
            'MBS_REL_TMGI_EXPIRY',
            'BROADCAST_DELIVERY_STATUS',
            'INGRESS_TUNNEL_ADD_CHANGE',
        ],
        str,
    ] = Field(..., description='MBS Session Event Type')


class ExternalMbsServiceArea1(BaseModel):
    geographicAreaList: List[str] = Field(..., min_items=1)
    civicAddressList: Optional[List[str]] = Field(None, min_items=1)


class ExternalMbsServiceArea2(BaseModel):
    geographicAreaList: Optional[List[str]] = Field(None, min_items=1)
    civicAddressList: List[str] = Field(..., min_items=1)


class MbsKeyInfo(BaseModel):
    keyDomainId: str = Field(
        ..., description="string with format 'bytes' as defined in OpenAPI"
    )
    mskId: str = Field(
        ..., description="string with format 'bytes' as defined in OpenAPI"
    )
    msk: Optional[str] = Field(
        None, description="string with format 'bytes' as defined in OpenAPI"
    )
    mskLifetime: Optional[datetime] = Field(
        None, description="string with format 'date-time' as defined in OpenAPI."
    )
    mtkId: Optional[str] = Field(
        None, description="string with format 'bytes' as defined in OpenAPI"
    )
    mtk: Optional[str] = Field(
        None, description="string with format 'bytes' as defined in OpenAPI"
    )


class IngressTunAddrInfo(BaseModel):
    ingressTunAddr: List[Union[TunnelAddress1, TunnelAddress2]] = Field(
        ..., min_items=1
    )


class MbsQoSReq(BaseModel):
    field_5qi: conint(ge=0, le=255) = Field(
        ...,
        alias='5qi',
        description='Unsigned integer representing a 5G QoS Identifier (see clause 5.7.2.1 of 3GPP TS 23.501, within the range 0 to 255.\n',
    )
    guarBitRate: Optional[constr(regex=r'^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$')] = (
        Field(
            None,
            description='String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix "K" is used to represent the standard symbol "k".\n',
        )
    )
    maxBitRate: Optional[constr(regex=r'^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$')] = (
        Field(
            None,
            description='String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix "K" is used to represent the standard symbol "k".\n',
        )
    )
    averWindow: Optional[conint(ge=1, le=4095)] = Field(
        None,
        description='Unsigned integer indicating Averaging Window (see clause 5.7.3.6 and 5.7.4 of 3GPP TS 23.501), expressed in milliseconds. \n',
    )
    reqMbsArp: Optional[Arp] = None


class MbsMediaInfo(BaseModel):
    mbsMedType: Optional[str] = None
    maxReqMbsBwDl: Optional[
        constr(regex=r'^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$')
    ] = Field(
        None,
        description='String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix "K" is used to represent the standard symbol "k".\n',
    )
    minReqMbsBwDl: Optional[
        constr(regex=r'^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$')
    ] = Field(
        None,
        description='String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix "K" is used to represent the standard symbol "k".\n',
    )
    codecs: Optional[List[str]] = Field(None, max_items=2, min_items=1)


class ClockQualityDetailLevel(BaseModel):
    __root__: Union[Literal['CLOCK_QUALITY_METRICS', 'ACCEPT_INDICATION'], str] = Field(
        ..., description='Indicates the Clock Quality Detail Level.'
    )


class ClockQuality(BaseModel):
    traceabilityToGnss: Optional[bool] = None
    traceabilityToUtc: Optional[bool] = None
    frequencyStability: Optional[conint(ge=0, le=65535)] = Field(
        None,
        description='Integer where the allowed values correspond to the value range of an unsigned 16-bit integer.\n',
    )
    clockAccuracyIndex: Optional[constr(regex=r'^[A-Fa-f0-9]{2}$')] = None
    clockAccuracyValue: Optional[conint(ge=1, le=40000000)] = None


class SessionId(BaseModel):
    __root__: str = Field(..., description='IMS Session Identifier')


class MediaId(BaseModel):
    __root__: str = Field(..., description='IMS Media Flow Identifier')


class MaxMessageSize(BaseModel):
    __root__: conint(le=64) = Field(..., description='Maximum SCTP user message size')


class MediaResourceType(BaseModel):
    __root__: Union[Literal['DC', 'AR', 'AUDIO', 'VIDEO'], str] = Field(
        ..., description='Indicates the Media Resource type'
    )


class MediaProxy(BaseModel):
    __root__: Union[Literal['HTTP', 'UDP'], str] = Field(
        ..., description='Media Proxy Configuration applicable to the media flow'
    )


class SecuritySetup(BaseModel):
    __root__: Union[Literal['ACTIVE', 'PASSIVE', 'ACTPASS'], str] = Field(
        ..., description='security setup of the DTLS connection'
    )


class DcEndpoint(BaseModel):
    sctpPort: Optional[conint(ge=0, le=65535)] = Field(
        None, description='Local or remote port for Data Channel'
    )
    fingerprint: Optional[
        constr(
            regex=r'^(SHA-1|SHA-224|SHA-256|SHA-384|SHA-512|MD5|MD2|TOKEN)\s[0-9A-F]{2}(:[0-9A-F]{2})+'
        )
    ] = Field(
        None,
        description='local or remote certificate fingerprint for the DTLS association',
    )
    tlsId: Optional[constr(regex=r'^[A-Fa-f0-9+/_-]{20,255}$')] = Field(
        None, description='local or remote TLS ID for the media stream'
    )


class DcStream(BaseModel):
    streamId: Optional[conint(le=65535)] = Field(
        0, description='Stream identifier for Data Channel'
    )
    subprotocol: Optional[constr(regex=r'^[A-Fa-f0-9]{20}$')] = Field(
        None, description='Subprotocol of the SCTP stream'
    )
    order: Optional[bool] = None
    maxRetry: Optional[int] = Field(
        0, description='maximal number of the times a message will be retransmitted'
    )
    maxTime: Optional[int] = Field(
        0,
        description='maximal lifetime in milliseconds after which a message will no longer be transmitted or retransmitted\n',
    )
    priority: Optional[int] = Field(
        256, description='priority of data channel relative to other data channels'
    )
    appBindingInfo: Optional[str] = Field(
        None, description='application binding information of the Data Channel.'
    )


class ReplaceHttpUrl(BaseModel):
    replaceHttpUrl: Optional[str] = Field(
        None, description='String providing an URI formatted according to RFC 3986.'
    )
    streamId: Optional[conint(le=65535)] = Field(
        0, description='Stream identifier for Data Channel'
    )


class Endpoint(BaseModel):
    ip: Union[IpAddr2, IpAddr3, IpAddr4] = Field(
        ..., description='Contains an IP adresse.'
    )
    transport: Union[Literal['UDP', 'TCP'], str] = Field(
        ...,
        description='Possible values are:\n- UDP: User Datagram Protocol.\n- TCP: Transmission Control Protocol. \n',
    )
    portNumber: conint(ge=0) = Field(
        ...,
        description='Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.',
    )


class SteeringMode(BaseModel):
    steerModeValue: Optional[str] = None
    active: Optional[Literal['3GPP_ACCESS', 'NON_3GPP_ACCESS']] = Field(
        None, description='Indicates whether the access is  via 3GPP or via non-3GPP.'
    )
    standby: Optional[Union[Literal['3GPP_ACCESS', 'NON_3GPP_ACCESS'],]] = Field(
        None,
        description='Indicates wether the access is via 3GPP or via non-3GPP but with the OpenAPI  \'nullable: true\' property."\n',
    )
    threeGLoad: Optional[conint(ge=0)] = Field(
        None,
        description='Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.',
    )
    prioAcc: Optional[Literal['3GPP_ACCESS', 'NON_3GPP_ACCESS']] = Field(
        None, description='Indicates whether the access is  via 3GPP or via non-3GPP.'
    )


class SnssaiInfo(BaseModel):
    plmnInfo: Optional[PlmnInfo] = None
    administrativeState: Optional[Literal['LOCKED', 'UNLOCKED']] = None


class NsacfInfoSnssai(BaseModel):
    SnssaiInfo: Optional[SnssaiInfo] = None
    isSubjectToNsac: Optional[bool] = None
    maxNumberofUEs: Optional[int] = None
    eACMode: Optional[Literal['INACTIVE', 'ACTIVE']] = None
    activeEacThreshold: Optional[int] = None
    deactiveEacThreshold: Optional[int] = None
    numberofUEs: Optional[int] = None
    uEIdList: Optional[List[str]] = None
    maxNumberofPDUSessions: Optional[int] = None


class NRTACRange(BaseModel):
    nRTACstart: Optional[str] = None
    nRTACend: Optional[str] = None
    nRTACpattern: Optional[str] = None


class TaiRange(BaseModel):
    plmnId: Optional[PlmnId] = None
    nRTACRangelist: Optional[List[NRTACRange]] = None


class GUAMInfo(BaseModel):
    pLMNId: Optional[PlmnId] = None
    aMFIdentifier: Optional[int] = None


class DnnSmfInfoItem(BaseModel):
    dnn: Optional[str] = None
    dnaiList: Optional[List[str]] = Field(None, min_items=1)


class DnaiSatelliteMapping(BaseModel):
    dnaiList: Optional[List[str]] = Field(None, min_items=1)
    geoSatelliteId: Optional[constr(regex=r'^[0-9]{5}$')] = None


class SnssaiSmfInfoItem(BaseModel):
    sNSSAI: Optional[Snssai] = None
    dnnSmfInfoList: Optional[List[DnnSmfInfoItem]] = None


class Field5GCNfConnEcmInfo(BaseModel):
    field_5GCNFType: Optional[Literal['PCF', 'NEF', 'SCEF']] = Field(
        None, alias='5GCNFType'
    )
    field_5GCNFIpAddress: Optional[str] = Field(None, alias='5GCNFIpAddress')
    field_5GCNFRef: Optional[str] = Field(None, alias='5GCNFRef')


class UPFConnectionInfo(BaseModel):
    uPFIpAddress: Optional[str] = None
    uPFRef: Optional[str] = None


class SnpnId(BaseModel):
    mcc: Optional[constr(regex=r'^[0-9]{3}$')] = None
    mnc: Optional[constr(regex=r'^[0-9]{2,3}$')] = None
    nid: Optional[str] = None


class SnpnInfo(BaseModel):
    snpnId: Optional[SnpnId] = None
    snssai: Optional[Snssai] = None


class SupiRange(BaseModel):
    start: Optional[str] = None
    end: Optional[str] = None
    pattern: Optional[str] = None


class IdentityRange(BaseModel):
    start: Optional[str] = None
    end: Optional[str] = None
    pattern: Optional[str] = None


class ProseCapability(BaseModel):
    proseDirectDiscovery: Optional[bool] = None
    proseDirectCommunication: Optional[bool] = None
    proseL2UetoNetworkRelay: Optional[bool] = None
    proseL3UetoNetworkRelay: Optional[bool] = None
    proseL2RemoteUe: Optional[bool] = None
    proseL3RemoteUe: Optional[bool] = None


class V2xCapability(BaseModel):
    lteV2x: Optional[bool] = None
    nrV2x: Optional[bool] = None


class InternalGroupIdRange(BaseModel):
    start: Optional[str] = None
    end: Optional[str] = None
    pattern: Optional[str] = None


class SuciInfo(BaseModel):
    routingInds: Optional[List[str]] = None
    hNwPubKeyIds: Optional[List[int]] = None


class SuciInfoList(BaseModel):
    __root__: List[SuciInfo]


class SharedDataIdRange(BaseModel):
    pattern: Optional[str] = None


class SupiRangeList(BaseModel):
    __root__: List[SupiRange]


class InternalGroupIdRangeList(BaseModel):
    __root__: List[InternalGroupIdRange]


class InterfaceUpfInfoItem(BaseModel):
    interfaceType: Optional[
        Literal['N3', 'N6', 'N9', 'DATA_FORWARDING', 'N3MB', 'N6MB', 'N19MB', 'NMB9']
    ] = None
    ipv4EndpointAddresses: Optional[
        List[
            constr(
                regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
            )
        ]
    ] = Field(None, min_items=1)
    ipv6EndpointAddresses: Optional[List[Ipv6Addr]] = Field(None, min_items=1)
    fqdn: Optional[str] = None
    networkInstance: Optional[str] = None


class AtsssCapability1(BaseModel):
    atsssLL: Optional[bool] = None
    mptcp: Optional[bool] = None
    rttWithoutPmf: Optional[bool] = None


class IpInterface(BaseModel):
    ipv4EndpointAddresses: Optional[
        constr(
            regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
        )
    ] = Field(None, example='198.51.100.1')
    ipv6EndpointAddresses: Optional[Ipv6Addr] = None
    fqdn: Optional[str] = None


class Ipv4AddressRange1(BaseModel):
    start: Optional[
        constr(
            regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
        )
    ] = Field(None, example='198.51.100.1')
    end: Optional[
        constr(
            regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
        )
    ] = Field(None, example='198.51.100.1')


class Ipv6PrefixRange1(BaseModel):
    start: Optional[Ipv6Prefix] = None
    end: Optional[Ipv6Prefix] = None


class PlmnIdNid1(BaseModel):
    mcc: Optional[constr(regex=r'^[0-9]{3}$')] = None
    mnc: Optional[constr(regex=r'^[0-9]{2,3}$')] = None
    nid: Optional[constr(regex=r'^[A-Fa-f0-9]{11}$')] = None


class ScpDomainInfo(BaseModel):
    scpFqdn: Optional[str] = None
    scpIpEndPoints: Optional[List[IpEndPoint]] = Field(None, min_items=1)
    scpPrefix: Optional[str] = None
    scpPorts: Optional[Dict[str, conint(ge=0, le=65535)]] = Field(
        None,
        description='Port numbers for HTTP and HTTPS. The key of the map shall be "http" or "https".\n',
    )


class SeppInfo(BaseModel):
    seppPrefix: Optional[str] = None
    seppPorts: Optional[Dict[str, conint(ge=0, le=65535)]] = Field(
        None,
        description='Port numbers for HTTP and HTTPS. The key of the map shall be "http" or "https".\n',
    )
    remotePlmnList: Optional[List[PlmnId]] = Field(None, min_items=1)
    remoteSnpnList: Optional[List[PlmnIdNid]] = Field(None, min_items=1)


class UdsfInfo(BaseModel):
    groupId: Optional[str] = Field(None, description='Identifier of a group of NFs.')
    supiRanges: Optional[List[SupiRange]] = Field(None, min_items=1)
    storageIdRanges: Optional[Dict[str, List[IdentityRange]]] = Field(
        None,
        description='A map (list of key-value pairs) where realmId serves as key and each value in the map is an array of IdentityRanges. Each IdentityRange is a range of storageIds.\n',
    )


class NsacfCapability(BaseModel):
    supportUeSAC: Optional[bool] = Field(
        False,
        description='Indicates the service capability of the NSACF to monitor and control the number of\nregistered UEs per network slice for the network slice that is subject to NSAC\ntrue: Supported\nfalse (default): Not Supported\n',
    )
    supportPduSAC: Optional[bool] = Field(
        False,
        description='Indicates the service capability of the NSACF to monitor and control the number of\nestablished PDU sessions per network slice for the network slice that is subject to NSAC\ntrue: Supported\nfalse (default): Not Supported\n',
    )


class NwdafCapability(BaseModel):
    analyticsAggregation: Optional[bool] = False
    analyticsMetadataProvisioning: Optional[bool] = False


class ScpInfo(BaseModel):
    scpDomainInfoList: Optional[Dict[str, ScpDomainInfo]] = Field(
        None,
        description='A map (list of key-value pairs) where the key of the map shall be the string identifying an SCP domain\n',
    )
    scpPrefix: Optional[str] = None
    scpPorts: Optional[Dict[str, conint(ge=0, le=65535)]] = Field(
        None,
        description='Port numbers for HTTP and HTTPS. The key of the map shall be "http" or "https".\n',
    )
    addressDomains: Optional[List[str]] = Field(None, min_items=1)
    ipv4Addresses: Optional[
        List[
            constr(
                regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
            )
        ]
    ] = Field(None, min_items=1)
    ipv6Prefixes: Optional[List[Ipv6Prefix]] = Field(None, min_items=1)
    ipv4AddrRanges: Optional[List[Ipv4AddressRange1]] = Field(None, min_items=1)
    ipv6PrefixRanges: Optional[List[Ipv6PrefixRange1]] = Field(None, min_items=1)
    servedNfSetIdList: Optional[List[str]] = Field(None, min_items=1)
    remotePlmnList: Optional[List[PlmnId1]] = Field(None, min_items=1)
    remoteSnpnList: Optional[List[PlmnIdNid1]] = Field(None, min_items=1)
    ipReachability: Optional[Union[Literal['IPV4', 'IPV6', 'IPV4V6'], str]] = Field(
        None, description='Indicates the type(s) of IP addresses reachable via an SCP'
    )
    scpCapabilities: Optional[List[Literal['INDIRECT_COM_WITH_DELEG_DISC']]] = None


class PfdData(BaseModel):
    appIds: Optional[List[str]] = Field(None, min_items=1)
    afIds: Optional[List[str]] = Field(None, min_items=1)


class AfEventExposureData(BaseModel):
    afEvents: List[
        Union[
            Literal[
                'SVC_EXPERIENCE',
                'UE_MOBILITY',
                'UE_COMM',
                'EXCEPTIONS',
                'USER_DATA_CONGESTION',
                'PERF_DATA',
                'DISPERSION',
                'COLLECTIVE_BEHAVIOUR',
                'MS_QOE_METRICS',
                'MS_CONSUMPTION',
                'MS_NET_ASSIST_INVOCATION',
                'MS_DYN_POLICY_INVOCATION',
                'MS_ACCESS_ACTIVITY',
            ],
            str,
        ]
    ] = Field(..., min_items=1)
    afIds: Optional[List[str]] = Field(None, min_items=1)
    appIds: Optional[List[str]] = Field(None, min_items=1)


class DnnInfoItem(BaseModel):
    dnn: Union[str, constr(regex=r'^[*]$')]


class DnnEasdfInfoItem(BaseModel):
    dnn: Union[str, constr(regex=r'^[*]$')]
    dnaiList: Optional[List[str]] = Field(None, min_items=1)


class NssaafInfo(BaseModel):
    supiRanges: Optional[List[SupiRange]] = Field(None, min_items=1)
    internalGroupIdentifiersRanges: Optional[List[InternalGroupIdRange]] = Field(
        None, min_items=1
    )


class LmfInfo(BaseModel):
    servingClientTypes: Optional[
        List[
            Union[
                Literal[
                    'EMERGENCY_SERVICES',
                    'VALUE_ADDED_SERVICES',
                    'PLMN_OPERATOR_SERVICES',
                    'LAWFUL_INTERCEPT_SERVICES',
                    'PLMN_OPERATOR_BROADCAST_SERVICES',
                    'PLMN_OPERATOR_OM',
                    'PLMN_OPERATOR_ANONYMOUS_STATISTICS',
                    'PLMN_OPERATOR_TARGET_MS_SERVICE_SUPPORT',
                ],
                str,
            ]
        ]
    ] = Field(None, min_items=1)
    lmfId: Optional[str] = None
    servingAccessTypes: Optional[List[Literal['3GPP_ACCESS', 'NON_3GPP_ACCESS']]] = (
        Field(None, min_items=1)
    )
    servingAnNodeTypes: Optional[List[Union[Literal['GNB', 'NG_ENB'], str]]] = Field(
        None, min_items=1
    )
    servingRatTypes: Optional[
        List[
            Union[
                Literal[
                    'NR',
                    'EUTRA',
                    'WLAN',
                    'VIRTUAL',
                    'NBIOT',
                    'WIRELINE',
                    'WIRELINE_CABLE',
                    'WIRELINE_BBF',
                    'LTE-M',
                    'NR_U',
                    'EUTRA_U',
                    'TRUSTED_N3GA',
                    'TRUSTED_WLAN',
                    'UTRA',
                    'GERA',
                    'NR_LEO',
                    'NR_MEO',
                    'NR_GEO',
                    'NR_OTHER_SAT',
                    'NR_REDCAP',
                    'WB_E_UTRAN_LEO',
                    'WB_E_UTRAN_MEO',
                    'WB_E_UTRAN_GEO',
                    'WB_E_UTRAN_OTHERSAT',
                    'NB_IOT_LEO',
                    'NB_IOT_MEO',
                    'NB_IOT_GEO',
                    'NB_IOT_OTHERSAT',
                    'LTE_M_LEO',
                    'LTE_M_MEO',
                    'LTE_M_GEO',
                    'LTE_M_OTHERSAT',
                    'NR_EREDCAP',
                ],
                str,
            ]
        ]
    ] = Field(None, min_items=1)
    taiList: Optional[List[Tai1]] = Field(None, min_items=1)
    taiRangeList: Optional[List[TaiRange]] = Field(None, min_items=1)
    supportedGADShapes: Optional[
        List[
            Union[
                Literal[
                    'POINT',
                    'POINT_UNCERTAINTY_CIRCLE',
                    'POINT_UNCERTAINTY_ELLIPSE',
                    'POLYGON',
                    'POINT_ALTITUDE',
                    'POINT_ALTITUDE_UNCERTAINTY',
                    'ELLIPSOID_ARC',
                    'LOCAL_2D_POINT_UNCERTAINTY_ELLIPSE',
                    'LOCAL_3D_POINT_UNCERTAINTY_ELLIPSOID',
                ],
                str,
            ]
        ]
    ] = Field(None, min_items=1)


class UdrInfo(BaseModel):
    groupId: Optional[str] = Field(None, description='Identifier of a group of NFs.')
    supiRanges: Optional[List[SupiRange]] = Field(None, min_items=1)
    gpsiRanges: Optional[List[IdentityRange]] = Field(None, min_items=1)
    externalGroupIdentifiersRanges: Optional[List[IdentityRange]] = None
    supportedDataSets: Optional[
        List[
            Literal[
                'SUBSCRIPTION',
                'POLICY',
                'EXPOSURE',
                'APPLICATION',
                'A_PFD',
                'A_AFTI',
                'A_IPTV',
                'A_BDT',
                'A_SPD',
                'A_EASD',
                'A_AMI',
                'P_UE',
                'P_SCD',
                'P_BDT',
                'P_PLMNUE',
                'P_NSSCD',
            ]
        ]
    ] = None
    sharedDataIdRanges: Optional[List[SharedDataIdRange]] = None


class UdmInfo(BaseModel):
    groupId: Optional[str] = Field(None, description='Identifier of a group of NFs.')
    supiRanges: Optional[List[SupiRange]] = Field(None, min_items=1)
    gpsiRanges: Optional[List[IdentityRange]] = Field(None, min_items=1)
    externalGroupIdentifiersRanges: Optional[List[IdentityRange]] = Field(
        None, min_items=1
    )
    routingIndicators: Optional[List[constr(regex=r'^[0-9]{1,4}$')]] = Field(
        None, min_items=1
    )
    internalGroupIdentifiersRanges: Optional[List[InternalGroupIdRange]] = Field(
        None, min_items=1
    )
    suciInfos: Optional[List[SuciInfo]] = Field(None, min_items=1)


class PlmnRange1(BaseModel):
    start: constr(regex=r'^[0-9]{3}[0-9]{2,3}$')
    end: constr(regex=r'^[0-9]{3}[0-9]{2,3}$')
    pattern: Optional[str] = None


class PlmnRange2(BaseModel):
    start: Optional[constr(regex=r'^[0-9]{3}[0-9]{2,3}$')] = None
    end: Optional[constr(regex=r'^[0-9]{3}[0-9]{2,3}$')] = None
    pattern: str


class SmsfInfo(BaseModel):
    roamingUeInd: Optional[bool] = None
    remotePlmnRangeList: Optional[List[Union[PlmnRange1, PlmnRange2]]] = Field(
        None, min_items=1
    )


class ChfInfo(BaseModel):
    supiRangeList: Optional[List[SupiRange]] = Field(None, min_items=0)
    gpsiRangeList: Optional[List[IdentityRange]] = Field(None, min_items=0)
    plmnRangeList: Optional[List[Union[PlmnRange1, PlmnRange2]]] = Field(
        None, min_items=0
    )
    groupId: Optional[str] = Field(None, description='Identifier of a group of NFs.')
    primaryChfInstance: Optional[UUID] = Field(
        None,
        description='String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122. \n',
    )
    secondaryChfInstance: Optional[UUID] = Field(
        None,
        description='String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122. \n',
    )


class N2InterfaceAmfInfo1(BaseModel):
    ipv4EndpointAddress: List[
        constr(
            regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
        )
    ] = Field(..., min_items=1)
    ipv6EndpointAddress: Optional[List[Ipv6Addr]] = Field(None, min_items=1)
    amfName: Optional[str] = None


class N2InterfaceAmfInfo2(BaseModel):
    ipv4EndpointAddress: Optional[
        List[
            constr(
                regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
            )
        ]
    ] = Field(None, min_items=1)
    ipv6EndpointAddress: List[Ipv6Addr] = Field(..., min_items=1)
    amfName: Optional[str] = None


class SmfInfo(BaseModel):
    sNssaiSmfInfoList: List[SnssaiSmfInfoItem] = Field(..., min_items=1)
    taiList: Optional[List[Tai1]] = Field(None, min_items=1)
    taiRangeList: Optional[List[TaiRange]] = Field(None, min_items=1)
    pgwFqdn: Optional[
        constr(
            regex=r'^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$',
            min_length=4,
            max_length=253,
        )
    ] = Field(None, description='Fully Qualified Domain Name')
    pgwIpAddrList: Optional[
        List[
            Union[
                Ipv6Addr,
                Ipv6Prefix,
                constr(
                    regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
                ),
            ]
        ]
    ] = Field(None, min_items=1)
    accessType: Optional[List[Literal['3GPP_ACCESS', 'NON_3GPP_ACCESS']]] = Field(
        None, min_items=1
    )
    priority: Optional[conint(ge=0, le=65535)] = None
    vsmfSupportInd: Optional[bool] = None
    pgwFqdnList: Optional[
        List[
            constr(
                regex=r'^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$',
                min_length=4,
                max_length=253,
            )
        ]
    ] = Field(None, min_items=1)
    smfOnboardingCapability: Optional[bool] = False
    ismfSupportInd: Optional[bool] = None
    smfUPRPCapability: Optional[bool] = False


class A2xCapability(BaseModel):
    lteA2x: Optional[bool] = False
    nrA2x: Optional[bool] = False


class GlobalRanNodeID1(BaseModel):
    pLmnId: PlmnId
    n3IwfId: constr(regex=r'^[A-Fa-f0-9]+$')
    gNbId: Optional[conint(ge=0, le=4294967295)] = None
    ngeNbId: Optional[
        constr(
            regex=r'^(MacroNGeNB-[A-Fa-f0-9]{5}|LMacroNGeNB-[A-Fa-f0-9]{6}|SMacroNGeNB-[A-Fa-f0-9]{5})$'
        )
    ] = None
    wagfId: Optional[constr(regex=r'^[A-Fa-f0-9]+$')] = None
    tngfId: Optional[constr(regex=r'^[A-Fa-f0-9]+$')] = None
    twifId: Optional[str] = None


class GlobalRanNodeID2(BaseModel):
    pLmnId: Optional[PlmnId] = None
    n3IwfId: Optional[constr(regex=r'^[A-Fa-f0-9]+$')] = None
    gNbId: conint(ge=0, le=4294967295)
    ngeNbId: Optional[
        constr(
            regex=r'^(MacroNGeNB-[A-Fa-f0-9]{5}|LMacroNGeNB-[A-Fa-f0-9]{6}|SMacroNGeNB-[A-Fa-f0-9]{5})$'
        )
    ] = None
    wagfId: Optional[constr(regex=r'^[A-Fa-f0-9]+$')] = None
    tngfId: Optional[constr(regex=r'^[A-Fa-f0-9]+$')] = None
    twifId: Optional[str] = None


class GlobalRanNodeID3(BaseModel):
    pLmnId: PlmnId
    n3IwfId: Optional[constr(regex=r'^[A-Fa-f0-9]+$')] = None
    gNbId: Optional[conint(ge=0, le=4294967295)] = None
    ngeNbId: constr(
        regex=r'^(MacroNGeNB-[A-Fa-f0-9]{5}|LMacroNGeNB-[A-Fa-f0-9]{6}|SMacroNGeNB-[A-Fa-f0-9]{5})$'
    )
    wagfId: Optional[constr(regex=r'^[A-Fa-f0-9]+$')] = None
    tngfId: Optional[constr(regex=r'^[A-Fa-f0-9]+$')] = None
    twifId: Optional[str] = None


class GlobalRanNodeID4(BaseModel):
    pLmnId: Optional[PlmnId] = None
    n3IwfId: Optional[constr(regex=r'^[A-Fa-f0-9]+$')] = None
    gNbId: Optional[conint(ge=0, le=4294967295)] = None
    ngeNbId: Optional[
        constr(
            regex=r'^(MacroNGeNB-[A-Fa-f0-9]{5}|LMacroNGeNB-[A-Fa-f0-9]{6}|SMacroNGeNB-[A-Fa-f0-9]{5})$'
        )
    ] = None
    wagfId: constr(regex=r'^[A-Fa-f0-9]+$')
    tngfId: Optional[constr(regex=r'^[A-Fa-f0-9]+$')] = None
    twifId: Optional[str] = None


class GlobalRanNodeID5(BaseModel):
    pLmnId: PlmnId
    n3IwfId: Optional[constr(regex=r'^[A-Fa-f0-9]+$')] = None
    gNbId: Optional[conint(ge=0, le=4294967295)] = None
    ngeNbId: Optional[
        constr(
            regex=r'^(MacroNGeNB-[A-Fa-f0-9]{5}|LMacroNGeNB-[A-Fa-f0-9]{6}|SMacroNGeNB-[A-Fa-f0-9]{5})$'
        )
    ] = None
    wagfId: Optional[constr(regex=r'^[A-Fa-f0-9]+$')] = None
    tngfId: constr(regex=r'^[A-Fa-f0-9]+$')
    twifId: Optional[str] = None


class GlobalRanNodeID6(BaseModel):
    pLmnId: Optional[PlmnId] = None
    n3IwfId: Optional[constr(regex=r'^[A-Fa-f0-9]+$')] = None
    gNbId: Optional[conint(ge=0, le=4294967295)] = None
    ngeNbId: Optional[
        constr(
            regex=r'^(MacroNGeNB-[A-Fa-f0-9]{5}|LMacroNGeNB-[A-Fa-f0-9]{6}|SMacroNGeNB-[A-Fa-f0-9]{5})$'
        )
    ] = None
    wagfId: Optional[constr(regex=r'^[A-Fa-f0-9]+$')] = None
    tngfId: Optional[constr(regex=r'^[A-Fa-f0-9]+$')] = None
    twifId: str


class TimeDuration(BaseModel):
    blockedDurStartTime: Optional[datetime] = None
    blockedDurEndTime: Optional[datetime] = None


class Field5GDdnmfInfo(BaseModel):
    plmnId: PlmnId1


class ImsiRange1(BaseModel):
    start: constr(regex=r'^[0-9]+$')
    end: constr(regex=r'^[0-9]+$')
    pattern: Optional[str] = None


class ImsiRange2(BaseModel):
    start: Optional[constr(regex=r'^[0-9]+$')] = None
    end: Optional[constr(regex=r'^[0-9]+$')] = None
    pattern: str


class GmlcInfo(BaseModel):
    servingClientTypes: Optional[
        List[
            Union[
                Literal[
                    'EMERGENCY_SERVICES',
                    'VALUE_ADDED_SERVICES',
                    'PLMN_OPERATOR_SERVICES',
                    'LAWFUL_INTERCEPT_SERVICES',
                    'PLMN_OPERATOR_BROADCAST_SERVICES',
                    'PLMN_OPERATOR_OM',
                    'PLMN_OPERATOR_ANONYMOUS_STATISTICS',
                    'PLMN_OPERATOR_TARGET_MS_SERVICE_SUPPORT',
                ],
                str,
            ]
        ]
    ] = None
    gmlcNumbers: Optional[List[constr(regex=r'^[0-9]{5,15}$')]] = None


class DnnTsctsfInfoItem(BaseModel):
    dnn: Union[str, constr(regex=r'^[*]$')]


class TsctsfInfo(BaseModel):
    sNssaiInfoList: Optional[Any] = Field(
        None,
        description='A map (list of key-value pairs) where a valid JSON string serves as key',
    )
    externalGroupIdentifiersRanges: Optional[List[IdentityRange]] = None
    supiRanges: Optional[List[SupiRange]] = None
    gpsiRanges: Optional[List[IdentityRange]] = None
    internalGroupIdentifiersRanges: Optional[List[InternalGroupIdRange]] = None


class MbSmfInfo(BaseModel):
    sNssaiInfoList: Optional[Any] = Field(
        None,
        description='A map (list of key-value pairs) where a valid JSON string serves as key',
    )
    tmgiRangeList: Optional[Any] = Field(
        None,
        description='A map (list of key-value pairs) where a valid JSON string serves as key',
    )
    taiList: Optional[List[Tai1]] = Field(None, min_items=1)
    taiRangeList: Optional[List[TaiRange]] = Field(None, min_items=1)
    mbsSessionList: Optional[Any] = Field(
        None,
        description='A map (list of key-value pairs) where a valid JSON string serves as key',
    )


class TmgiRange(BaseModel):
    mbsServiceIdStart: constr(regex=r'^[A-Fa-f0-9]{6}$')
    mbsServiceIdEnd: constr(regex=r'^[A-Fa-f0-9]{6}$')
    plmnId: PlmnId1
    nid: Optional[constr(regex=r'^[A-Fa-f0-9]{11}$')] = Field(
        None,
        description='This represents the Network Identifier, which together with a PLMN ID is used to identify an SNPN (see 3GPP TS 23.003 and 3GPP TS 23.501 clause 5.30.2.1). \n',
    )


class NcgiModel(BaseModel):
    plmnId: PlmnId1
    nrCellId: constr(regex=r'^[A-Fa-f0-9]{9}$')
    nid: Optional[constr(regex=r'^[A-Fa-f0-9]{11}$')] = None


class DnnMbSmfInfoItem(BaseModel):
    dnn: Union[str, constr(regex=r'^[*]$')]


class AanfInfo(BaseModel):
    routingIndicators: Optional[List[constr(regex=r'^[0-9]{1,4}$')]] = None


class DnnUpfInfoItem(BaseModel):
    dnn: str = Field(
        ...,
        description='String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. "Label1.Label2.Label3").\n',
    )
    dnaiList: Optional[List[str]] = Field(None, min_items=1)
    pduSessionTypes: Optional[
        List[Union[Literal['IPV4', 'IPV6', 'IPV4V6', 'UNSTRUCTURED', 'ETHERNET'], str]]
    ] = Field(None, min_items=1)
    ipv4AddressRanges: Optional[List[Ipv4AddressRange1]] = Field(None, min_items=1)
    ipv6PrefixRanges: Optional[List[Ipv6PrefixRange1]] = Field(None, min_items=1)
    natedIpv4AddressRanges: Optional[List[Ipv4AddressRange1]] = Field(None, min_items=1)
    natedIpv6PrefixRanges: Optional[List[Ipv6PrefixRange1]] = Field(None, min_items=1)
    ipv4IndexList: Optional[List[Union[int, str]]] = Field(None, min_items=1)
    ipv6IndexList: Optional[List[Union[int, str]]] = Field(None, min_items=1)
    networkInstance: Optional[str] = Field(
        None,
        description='The N6 Network Instance associated with the S-NSSAI and DNN.\n',
    )
    dnaiNwInstanceList: Optional[Dict[str, str]] = Field(
        None,
        description='Map of network instance per DNAI for the DNN, where the key of the map is the DNAI. When present, the value of each entry of the map shall contain a N6 network instance that is configured for the DNAI indicated by the key.\n',
    )


class MnpfInfo(BaseModel):
    msisdnRanges: List[IdentityRange] = Field(..., min_items=1)


class SliceExpiryInfo(BaseModel):
    pLMNInfo: Optional[PlmnInfo] = None
    expiryTime: Optional[datetime] = None


class PcscfInfo(BaseModel):
    accessType: Optional[List[Literal['3GPP_ACCESS', 'NON_3GPP_ACCESS']]] = Field(
        None, min_items=1
    )
    dnnList: Optional[List[str]] = Field(None, min_items=1)
    gmFqdn: Optional[str] = None
    gmIpv4Addresses: Optional[
        List[
            constr(
                regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
            )
        ]
    ] = Field(None, min_items=1)
    gmIpv6Addresses: Optional[List[Ipv6Addr]] = Field(None, min_items=1)
    mwFqdn: Optional[str] = None
    mwIpv4Addresses: Optional[
        List[
            constr(
                regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
            )
        ]
    ] = Field(None, min_items=1)
    mwIpv6Addresses: Optional[List[Ipv6Addr]] = Field(None, min_items=1)
    servedIpv4AddressRanges: Optional[List[Ipv4AddressRange1]] = Field(
        None, min_items=1
    )
    servedIpv6PrefixRanges: Optional[List[Ipv6PrefixRange1]] = Field(None, min_items=1)


class NfInfo(BaseModel):
    nfType: Optional[
        Literal[
            'NRF',
            'UDM',
            'AMF',
            'SMF',
            'AUSF',
            'NEF',
            'PCF',
            'SMSF',
            'NSSF',
            'UDR',
            'LMF',
            'GMLC',
            '5G_EIR',
            'SEPP',
            'UPF',
            'N3IWF',
            'AF',
            'UDSF',
            'DN',
            'BSF',
            'CHF',
            'NWDAF',
            'PCSCF',
            'CBCF',
            'HSS',
            'UCMF',
            'SOR_AF',
            'SPAF',
            'MME',
            'SCSAS',
            'SCEF',
            'SCP',
            'NSSAAF',
            'ICSCF',
            'SCSCF',
            'DRA',
            'IMS_AS',
            'AANF',
            '5G_DDNMF',
            'NSACF',
            'MFAF',
            'EASDF',
            'DCCF',
            'MB_SMF',
            'TSCTSF',
            'ADRF',
            'GBA_BSF',
            'CEF',
            'MB_UPF',
            'NSWOF',
            'PKMF',
            'MNPF',
            'SMS_GMSC',
            'SMS_IWMSC',
            'MBSF',
            'MBSTF',
            'PANF',
            'TNGF',
            'W_AGF',
            'TWIF',
            'TSN_AF',
        ]
    ] = Field(None, description=' NF name defined in TS 23.501 or TS 29.510')


class Attributes30(ManagedFunctionAttr):
    plmnIdList: Optional[List[PlmnId]] = None
    nRTACList: Optional[
        List[constr(regex=r'(^[A-Fa-f0-9]{4}$)|(^[A-Fa-f0-9]{6}$)')]
    ] = None
    amfSetId: Optional[str] = Field(
        None, description='AmfSetId is defined in TS 23.003'
    )
    snssaiList: Optional[List[Snssai]] = None
    aMFRegionRef: Optional[str] = None
    aMFSetMemberList: Optional[List[str]] = None


class Attributes31(ManagedFunctionAttr):
    plmnIdList: Optional[List[PlmnId]] = None
    nRTACList: Optional[
        List[constr(regex=r'(^[A-Fa-f0-9]{4}$)|(^[A-Fa-f0-9]{6}$)')]
    ] = None
    amfRegionId: Optional[conint(le=255)] = Field(
        None, description='AmfRegionId is defined in TS 23.003'
    )
    snssaiList: Optional[List[Snssai]] = None
    aMFSetListRef: Optional[List[str]] = None


class Attributes34(ManagedFunctionAttr):
    plmnIdList: Optional[List[PlmnId]] = None
    commModelList: Optional[List[CommModel]] = None


class Attributes45(ManagedFunctionAttr):
    plmnId: Optional[PlmnId] = None
    sEPPType: Optional[Literal['CSEPP', 'PSEPP']] = Field(
        None, description='any of enumerated value'
    )
    sEPPId: Optional[int] = None
    fqdn: Optional[str] = None
    seppInfo: Optional[SeppInfo] = None


class Attributes54(ManagedFunctionAttr):
    plmnIdList: Optional[List[PlmnId]] = None


class Attributes56(ManagedFunctionAttr):
    plmnId: Optional[PlmnId] = None
    sEPPId: Optional[int] = None
    fqdn: Optional[str] = None


class Attributes57(EPRPAttr):
    localAddress: Optional[LocalAddress] = None
    remoteAddress: Optional[RemoteAddress] = None


class Attributes58(EPRPAttr):
    localAddress: Optional[LocalAddress] = None
    remoteAddress: Optional[RemoteAddress] = None
    epTransportRefs: Optional[List[str]] = None


class Attributes59(EPRPAttr):
    localAddress: Optional[LocalAddress] = None
    remoteAddress: Optional[RemoteAddress] = None


class Attributes98(BaseModel):
    FiveQiDscpMappingList: Optional[List[FiveQiDscpMapping]] = None


class Attributes101(BaseModel):
    gtpUPathQoSMonitoringState: Optional[Literal['ENABLED', 'DISABLED']] = None
    gtpUPathMonitoredSNSSAIs: Optional[List[Snssai]] = None
    monitoredDSCPs: Optional[List[conint(ge=0, le=255)]] = None
    isEventTriggeredGtpUPathMonitoringSupported: Optional[bool] = None
    isPeriodicGtpUMonitoringSupported: Optional[bool] = None
    isImmediateGtpUMonitoringSupported: Optional[bool] = None
    gtpUPathDelayThresholds: Optional[GtpUPathDelayThresholdsType] = None
    gtpUPathMinimumWaitTime: Optional[int] = None
    gtpUPathMeasurementPeriod: Optional[int] = None


class Attributes102(BaseModel):
    qFQoSMonitoringState: Optional[Literal['ENABLED', 'DISABLED']] = None
    qFMonitoredSNSSAIs: Optional[List[Snssai]] = None
    qFMonitored5QIs: Optional[List[conint(ge=0, le=255)]] = None
    isEventTriggeredQFMonitoringSupported: Optional[bool] = None
    isPeriodicQFMonitoringSupported: Optional[bool] = None
    isSessionReleasedQFMonitoringSupported: Optional[bool] = None
    qFPacketDelayThresholds: Optional[QFPacketDelayThresholdsType] = None
    qFMinimumWaitTime: Optional[int] = None
    qFMeasurementPeriod: Optional[int] = None


class Attributes106(EPRPAttr):
    localAddress: Optional[LocalAddress] = None
    remoteAddress: Optional[RemoteAddress] = None


class Attributes138(BaseModel):
    activationStatus: Optional[Literal['ACTIVATED', 'DEACTIVATED']] = None


class Attributes139(EPRPAttr):
    localAddress: Optional[LocalAddress] = None
    remoteAddress: Optional[RemoteAddress] = None


class RrmPolicyAttr(BaseModel):
    resourceType: Optional[
        Literal['PRB', 'PRB_UL', 'PRB_DL', 'RRC_CONNECTED_USERS', 'DRB']
    ] = None
    rRMPolicyMemberList: Optional[List[RrmPolicyMember]] = None


class Attributes142(ManagedFunctionAttr):
    gnbDuId: Optional[conint(ge=0, le=68719476735)] = None
    gnbDuName: Optional[constr(max_length=150)] = None
    gnbId: Optional[conint(ge=0, le=4294967295)] = None
    gnbIdLength: Optional[conint(ge=22, le=32)] = None
    rimRSReportConf: Optional[RimRSReportConf] = None
    configurable5QISetRef: Optional[str] = None
    dynamic5QISetRef: Optional[str] = None


class Attributes143(ManagedFunctionAttr):
    gnbId: Optional[conint(ge=0, le=4294967295)] = None
    gnbIdLength: Optional[conint(ge=22, le=32)] = None
    gnbCuUpId: Optional[conint(ge=0, le=68719476735)] = None
    plmnInfoList: Optional[List[PlmnInfo]] = None
    configurable5QISetRef: Optional[str] = None
    dynamic5QISetRef: Optional[str] = None


class Attributes145(ManagedFunctionAttr):
    cellLocalId: Optional[int] = None
    plmnInfoList: Optional[List[PlmnInfo]] = None
    nRFrequencyRef: Optional[str] = None


class Attributes146(ManagedFunctionAttr):
    administrativeState: Optional[Literal['LOCKED', 'UNLOCKED']] = None
    operationalState: Optional[Literal['ENABLED', 'DISABLED']] = None
    cellLocalId: Optional[int] = None
    cellState: Optional[Literal['IDLE', 'INACTIVE', 'ACTIVE']] = None
    plmnInfoList: Optional[List[PlmnInfo]] = None
    npnIdentityList: Optional[List[Union[NpnIdentity1, NpnIdentity2]]] = None
    nrPci: Optional[conint(le=503)] = None
    nrTac: Optional[constr(regex=r'(^[A-Fa-f0-9]{4}$)|(^[A-Fa-f0-9]{6}$)')] = None
    arfcnDL: Optional[int] = None
    arfcnUL: Optional[int] = None
    arfcnSUL: Optional[int] = None
    bSChannelBwDL: Optional[int] = None
    bSChannelBwUL: Optional[int] = None
    bSChannelBwSUL: Optional[int] = None
    ssbFrequency: Optional[conint(ge=0, le=3279165)] = None
    ssbPeriodicity: Optional[Literal[5, 10, 20, 40, 80, 160]] = None
    ssbSubCarrierSpacing: Optional[Literal[15, 30, 120, 240]] = None
    ssbOffset: Optional[conint(ge=0, le=159)] = None
    ssbDuration: Optional[Literal[1, 2, 3, 4, 5]] = None
    nrSectorCarrierRef: Optional[List[str]] = None
    bwpRef: Optional[List[str]] = Field(
        None, description='Condition is BWP sets are not supported'
    )
    bwpSetRef: Optional[List[str]] = Field(
        None, description='Condition is BWP sets are supported'
    )
    rimRSMonitoringStartTime: Optional[str] = None
    rimRSMonitoringStopTime: Optional[str] = None
    rimRSMonitoringWindowDuration: Optional[int] = None
    rimRSMonitoringWindowStartingOffset: Optional[int] = None
    rimRSMonitoringWindowPeriodicity: Optional[int] = None
    rimRSMonitoringOccasionInterval: Optional[int] = None
    rimRSMonitoringOccasionStartingOffset: Optional[int] = None
    nRFrequencyRef: Optional[str] = None
    victimSetRef: Optional[str] = None
    aggressorSetRef: Optional[str] = None


class Attributes147(BaseModel):
    absoluteFrequencySSB: Optional[conint(ge=0, le=3279165)] = None
    ssbSubCarrierSpacing: Optional[Literal[15, 30, 120, 240]] = None
    multiFrequencyBandListNR: Optional[conint(ge=1, le=256)] = None


class Attributes148(BaseModel):
    earfcnDL: Optional[conint(ge=0, le=262143)] = None
    multiBandInfoListEutra: Optional[conint(ge=1, le=256)] = None


class Attributes149(ManagedFunctionAttr):
    txDirection: Optional[Literal['DL', 'UL', 'DL_AND_UL']] = None
    configuredMaxTxPower: Optional[int] = None
    arfcnDL: Optional[int] = None
    arfcnUL: Optional[int] = None
    bSChannelBwDL: Optional[int] = None
    bSChannelBwUL: Optional[int] = None
    sectorEquipmentFunctionRef: Optional[str] = None


class Attributes150(ManagedFunctionAttr):
    bwpContext: Optional[Literal['DL', 'UL', 'SUL']] = None
    isInitialBwp: Optional[Literal['INITIAL', 'OTHER', 'SUL']] = None
    subCarrierSpacing: Optional[int] = None
    cyclicPrefix: Optional[Literal['15', '30', '60', '120']] = None
    startRB: Optional[int] = None
    numberOfRBs: Optional[int] = None


class Attributes151(BaseModel):
    coverageShape: Optional[conint(le=65535)] = None
    digitalAzimuth: Optional[conint(ge=-1800, le=1800)] = None
    digitalTilt: Optional[conint(ge=-900, le=900)] = None


class Attributes152(BaseModel):
    beamIndex: Optional[int] = None
    beamType: Optional[Literal['SSB_BEAM']] = None
    beamAzimuth: Optional[conint(ge=-1800, le=1800)] = None
    beamTilt: Optional[conint(ge=-900, le=900)] = None
    beamHorizWidth: Optional[conint(ge=0, le=3599)] = None
    beamVertWidth: Optional[conint(ge=0, le=1800)] = None


class Attributes153(RrmPolicyAttr):
    rRMPolicyMaxRatio: Optional[conint(ge=0, le=100)] = 100
    rRMPolicyMinRatio: Optional[conint(ge=0, le=100)] = 0
    rRMPolicyDedicatedRatio: Optional[conint(ge=0, le=100)] = 0


class Attributes154(BaseModel):
    nRTCI: Optional[int] = None
    cellIndividualOffset: Optional[CellIndividualOffset] = None
    adjacentNRCellRef: Optional[str] = None
    nRFreqRelationRef: Optional[str] = None
    isRemoveAllowed: Optional[bool] = None
    isHOAllowed: Optional[bool] = None
    isESCoveredBy: Optional[Literal[False, 'PARTIAL', 'FULL']] = None
    isENDCAllowed: Optional[bool] = None
    isMLBAllowed: Optional[bool] = None


class Attributes155(ManagedFunctionAttr):
    adjacentEUtranCellRef: Optional[str] = None


class Attributes156(BaseModel):
    offsetMO: Optional[QOffsetRangeList] = None
    blockListEntry: Optional[List[conint(ge=0, le=1007)]] = None
    blockListEntryIdleMode: Optional[int] = None
    cellReselectionPriority: Optional[int] = None
    cellReselectionSubPriority: Optional[confloat(ge=0.2, le=0.8, multiple_of=0.2)] = (
        None
    )
    pMax: Optional[conint(ge=-30, le=33)] = None
    qOffsetFreq: Optional[float] = None
    qQualMin: Optional[float] = None
    qRxLevMin: Optional[conint(ge=-140, le=-44)] = None
    threshXHighP: Optional[conint(ge=0, le=62)] = None
    threshXHighQ: Optional[conint(ge=0, le=31)] = None
    threshXLowP: Optional[conint(ge=0, le=62)] = None
    threshXLowQ: Optional[conint(ge=0, le=31)] = None
    tReselectionNr: Optional[conint(ge=0, le=7)] = None
    tReselectionNRSfHigh: Optional[Literal[25, 50, 75, 100]] = None
    tReselectionNRSfMedium: Optional[Literal[25, 50, 75, 100]] = None
    nRFrequencyRef: Optional[str] = None


class Attributes157(BaseModel):
    cellIndividualOffset: Optional[CellIndividualOffset] = None
    blackListEntry: Optional[List[conint(ge=0, le=1007)]] = None
    blackListEntryIdleMode: Optional[int] = None
    cellReselectionPriority: Optional[int] = None
    cellReselectionSubPriority: Optional[confloat(ge=0.2, le=0.8, multiple_of=0.2)] = (
        None
    )
    pMax: Optional[conint(ge=-30, le=33)] = None
    qOffsetFreq: Optional[float] = None
    qQualMin: Optional[float] = None
    qRxLevMin: Optional[conint(ge=-140, le=-44)] = None
    threshXHighP: Optional[conint(ge=0, le=62)] = None
    threshXHighQ: Optional[conint(ge=0, le=31)] = None
    threshXLowP: Optional[conint(ge=0, le=62)] = None
    threshXLowQ: Optional[conint(ge=0, le=31)] = None
    tReselectionEutran: Optional[conint(ge=0, le=7)] = None
    tReselectionNRSfHigh: Optional[Literal[25, 50, 75, 100]] = None
    tReselectionNRSfMedium: Optional[Literal[25, 50, 75, 100]] = None
    eUTranFrequencyRef: Optional[str] = None


class Attributes158(BaseModel):
    intrasystemANRManagementSwitch: Optional[bool] = None
    intersystemANRManagementSwitch: Optional[bool] = None


class Attributes159(BaseModel):
    desSwitch: Optional[bool] = None
    intraRatEsActivationOriginalCellLoadParameters: Optional[
        IntraRatEsActivationOriginalCellLoadParameters
    ] = None
    intraRatEsActivationCandidateCellsLoadParameters: Optional[
        IntraRatEsActivationCandidateCellsLoadParameters
    ] = None
    intraRatEsDeactivationCandidateCellsLoadParameters: Optional[
        IntraRatEsDeactivationCandidateCellsLoadParameters
    ] = None
    esNotAllowedTimePeriod: Optional[EsNotAllowedTimePeriod] = None
    interRatEsActivationOriginalCellParameters: Optional[
        InterRatEsActivationOriginalCellParameters
    ] = None
    interRatEsActivationCandidateCellParameters: Optional[
        InterRatEsActivationCandidateCellParameters
    ] = None
    interRatEsDeactivationCandidateCellParameters: Optional[
        InterRatEsDeactivationCandidateCellParameters
    ] = None
    isProbingCapable: Optional[Literal[True, False]] = None
    energySavingState: Optional[Literal['IS_NOT_ENERGY_SAVING', 'IS_ENERGY_SAVING']] = (
        None
    )
    mLEntityRef: Optional[str] = None
    aIMLInferenceFunctionRef: Optional[str] = None


class Attributes160(BaseModel):
    drachOptimizationControl: Optional[bool] = None
    ueAccProbabilityDist: Optional[UeAccProbabilityDist] = None
    ueAccDelayProbabilityDist: Optional[UeAccDelayProbabilityDist] = None


class Attributes161(BaseModel):
    dmroControl: Optional[bool] = None
    maximumDeviationHoTriggerLow: Optional[conint(ge=-20, le=20)] = None
    maximumDeviationHoTriggerHigh: Optional[conint(ge=-20, le=20)] = None
    minimumTimeBetweenHoTriggerChange: Optional[conint(ge=0, le=604800)] = None
    tstoreUEcntxt: Optional[conint(ge=0, le=1023)] = None
    mLEntityRef: Optional[str] = None
    aIMLInferenceFunctionRef: Optional[str] = None


class Attributes162(BaseModel):
    dlboControl: Optional[bool] = None
    maximumDeviationHoTrigger: Optional[conint(ge=-20, le=20)] = None
    minimumTimeBetweenHoTriggerChange: Optional[conint(ge=0, le=604800)] = None
    mLEntityRef: Optional[str] = None
    aIMLInferenceFunctionRef: Optional[str] = None


class Attributes163(BaseModel):
    dPciConfigurationControl: Optional[bool] = None
    nRPciList: Optional[List[conint(le=503)]] = None


class Attributes164(BaseModel):
    cPciConfigurationControl: Optional[bool] = None
    cSonPciList: Optional[List[conint(le=503)]] = None


class Attributes165(BaseModel):
    cesSwitch: Optional[bool] = None
    intraRatEsActivationOriginalCellLoadParameters: Optional[
        IntraRatEsActivationOriginalCellLoadParameters
    ] = None
    intraRatEsActivationCandidateCellsLoadParameters: Optional[
        IntraRatEsActivationCandidateCellsLoadParameters
    ] = None
    intraRatEsDeactivationCandidateCellsLoadParameters: Optional[
        IntraRatEsDeactivationCandidateCellsLoadParameters
    ] = None
    esNotAllowedTimePeriod: Optional[EsNotAllowedTimePeriod] = None
    interRatEsActivationOriginalCellParameters: Optional[
        IntraRatEsActivationOriginalCellLoadParameters
    ] = None
    interRatEsActivationCandidateCellParameters: Optional[
        IntraRatEsActivationOriginalCellLoadParameters
    ] = None
    interRatEsDeactivationCandidateCellParameters: Optional[
        IntraRatEsActivationOriginalCellLoadParameters
    ] = None
    energySavingControl: Optional[
        Literal['TO_BE_ENERGY_SAVING', 'TO_BE_NOT_ENERGY_SAVING']
    ] = None
    energySavingState: Optional[Literal['IS_NOT_ENERGY_SAVING', 'IS_ENERGY_SAVING']] = (
        None
    )


class Attributes166(BaseModel):
    frequencyDomainPara: Optional[FrequencyDomainPara] = None
    sequenceDomainPara: Optional[SequenceDomainPara] = None
    timeDomainPara: Optional[TimeDomainPara] = None


class Attributes167(BaseModel):
    setId: Optional[conint(le=4194303)] = None
    setType: Optional[Literal['RS1', 'RS2']] = None
    nRCellDURefs: Optional[List[str]] = None


class Attributes168(ManagedFunctionAttr):
    gnbId: Optional[conint(ge=0, le=4294967295)] = None
    gnbIdLength: Optional[conint(ge=22, le=32)] = None


class Attributes170(ManagedFunctionAttr):
    gnbId: Optional[conint(ge=0, le=4294967295)] = None
    gnbIdLength: Optional[conint(ge=22, le=32)] = None
    plmnId: Optional[PlmnId] = None


class Attributes171(ManagedFunctionAttr):
    cellLocalId: Optional[int] = None
    nrPci: Optional[conint(le=503)] = None
    plmnIdList: Optional[List[PlmnId]] = None
    nRFrequencyRef: Optional[str] = None


class Attributes172(ManagedFunctionAttr):
    eNBId: Optional[int] = None


class Attributes173(ManagedFunctionAttr):
    EUtranFrequencyRef: Optional[str] = None


class Attributes174(EPRPAttr):
    localAddress: Optional[LocalAddress] = None
    remoteAddress: Optional[RemoteAddress] = None


class Attributes180(EPRPAttr):
    localAddress: Optional[LocalAddress] = None
    remoteAddress: Optional[RemoteAddress] = None
    epTransportRefs: Optional[List[str]] = None


class Attributes182(EPRPAttr):
    localAddress: Optional[LocalAddress] = None
    remoteAddress: Optional[RemoteAddress] = None


class Attributes185(BaseModel):
    coverageShapeList: Optional[int] = None
    downlinkTransmitPowerRange: Optional[ParameterRange] = None
    antennaTiltRange: Optional[ParameterRange] = None
    antennaAzimuthRange: Optional[ParameterRange] = None
    digitalTiltRange: Optional[ParameterRange] = None
    digitalAzimuthRange: Optional[ParameterRange] = None


class Attributes186(BaseModel):
    nTNpLMNInfoList: Optional[List[PlmnInfo]] = None
    nTNTAClist: Optional[
        List[constr(regex=r'(^[A-Fa-f0-9]{4}$)|(^[A-Fa-f0-9]{6}$)')]
    ] = None


class ServiceProfile(BaseModel):
    serviceProfileId: Optional[str] = None
    plmnInfoList: Optional[List[PlmnInfo]] = None
    maxNumberofUEs: Optional[float] = None
    dLLatency: Optional[float] = None
    uLLatency: Optional[float] = None
    uEMobilityLevel: Optional[
        Literal['STATIONARY', 'NOMADIC', 'RESTRICTED_MOBILITY', 'FULL_MOBILITY']
    ] = None
    sst: Optional[conint(ge=0, le=255)] = None
    networkSliceSharingIndicator: Optional[Literal['SHARED', 'NON_SHARED']] = None
    availability: Optional[float] = None
    delayTolerance: Optional[DelayTolerance] = None
    dLDeterministicComm: Optional[DeterministicComm] = None
    uLDeterministicComm: Optional[DeterministicComm] = None
    dLThptPerSlice: Optional[XLThpt] = None
    dLThptPerUE: Optional[XLThpt] = None
    uLThptPerSlice: Optional[XLThpt] = None
    uLThptPerUE: Optional[XLThpt] = None
    dLMaxPktSize: Optional[MaxPktSize] = None
    uLMaxPktSize: Optional[MaxPktSize] = None
    maxNumberofPDUSessions: Optional[MaxNumberofPDUSessions] = None
    kPIMonitoring: Optional[KPIMonitoring] = None
    nBIoT: Optional[NBIoT] = None
    radioSpectrum: Optional[RadioSpectrum] = None
    synchronicity: Optional[Synchronicity] = None
    positioning: Optional[Positioning] = None
    userMgmtOpen: Optional[UserMgmtOpen] = None
    v2XCommModels: Optional[V2XCommModels] = None
    coverageArea: Optional[List[GeoArea]] = None
    termDensity: Optional[TermDensity] = None
    activityFactor: Optional[float] = None
    uESpeed: Optional[int] = None
    survivalTime: Optional[float] = None
    dLReliability: Optional[float] = None
    uLReliability: Optional[float] = None
    maxDLDataVolume: Optional[float] = None
    maxULDataVolume: Optional[float] = None
    sliceSimultaneousUse: Optional[conint(ge=0, le=4)] = None
    energyEfficiency: Optional[EnergyEfficiency] = None
    nssaaSupport: Optional[NSSAASupport] = None
    n6Protection: Optional[N6Protection] = None
    nonIPSupport: Optional[NonIPSupport] = None
    supportedDataNetworks: Optional[DataNetwork] = None
    dataNetworkAccess: Optional[DataNetworkAccess] = None
    dLPktDelayVariation: Optional[float] = None
    uLPktDelayVariation: Optional[float] = None
    sliceAvailability: Optional[
        Union[
            SchedulingTime1,
            SchedulingTime2,
            SchedulingTime3,
            Union[TimeWindow1, TimeWindow2, TimeWindow3],
        ]
    ] = None


class LogicalInterfaceInfo(BaseModel):
    logicalInterfaceType: Optional[Literal['VLAN', 'MPLS', 'SEGMENT']] = None
    logicalInterfaceId: Optional[str] = None
    systemName: Optional[str] = None
    portName: Optional[str] = None
    routingProtocol: Optional[
        Literal['RIP', 'IGMP', 'OSPF', 'EGP', 'EIGRP', 'BGP', 'IS_IS', 'STATIC']
    ] = None


class ConnectionPointInfo(BaseModel):
    connectionPointId: Optional[str] = None
    connectionPointIdType: Optional[
        Literal['VLAN', 'MPLS', 'SEGMENT', 'IPV4', 'IPV6', 'ATTACHMENT_CIRCUIT']
    ] = None


class ResourceIsolationRule(BaseModel):
    resourceType: Optional[Literal['MANAGED_FUNCTION', 'NETWORK_SERVICE']] = None
    isolationRule: Optional[Literal['DEDICATED', 'SHARED']] = None


class Attributes188(BaseModel):
    networkSliceSubnetRef: Optional[str] = None
    operationalState: Optional[Literal['ENABLED', 'DISABLED']] = None
    administrativeState: Optional[Literal['LOCKED', 'UNLOCKED']] = None
    serviceProfileList: Optional[List[ServiceProfile]] = None
    networkSliceControllerRef: Optional[List[str]] = None
    isolationProfileRef: Optional[str] = None


class Attributes190(BaseModel):
    ipAddress: Optional[
        Union[
            Ipv6Addr,
            constr(
                regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
            ),
        ]
    ] = None
    localLogicalInterfaceInfo: Optional[LogicalInterfaceInfo] = None
    qosProfile: Optional[str] = None
    epApplicationRefs: Optional[List[str]] = None
    connectionPointRefList: Optional[List[ConnectionPointInfo]] = None


class Attributes193(BaseModel):
    inputServiceProfile: Optional[ServiceProfile] = None
    serviceProfileId: Optional[str] = None
    operationalState: Optional[Literal['ENABLED', 'DISABLED']] = None
    administrativeState: Optional[Literal['LOCKED', 'UNLOCKED']] = None
    availabilityStatus: Optional[
        Literal[
            'IN_TEST',
            'FAILED',
            'POWER_OFF',
            'OFF_LINE',
            'OFF_DUTY',
            'DEPENDENCY',
            'DEGRADED',
            'NOT_INSTALLED',
            'LOG_FULL',
        ]
    ] = None
    processMonitor: Optional[ProcessMonitor] = None
    networkSliceRef: Optional[str] = None


class Attributes195(BaseModel):
    networkSlicingApplicability: Optional[
        Literal['NETWORKSLICE', 'NETWORKSLICESUBNET']
    ] = None
    resourceIsolationRuleList: Optional[List[ResourceIsolationRule]] = None
    networkSliceRefList: Optional[List[str]] = None
    networkSliceSubnetRefList: Optional[List[str]] = None


class Scope3(BaseModel):
    scopeType: Optional[
        Literal['BASE_ONLY', 'BASE_NTH_LEVEL', 'BASE_SUBTREE', 'BASE_ALL']
    ] = None
    scopeLevel: Optional[int] = None


class CorrelatedNotification1(BaseModel):
    source: str
    notificationIds: List[int]


class MoiChange(BaseModel):
    notificationId: int
    correlatedNotifications: Optional[List[CorrelatedNotification1]] = None
    additionalText: Optional[str] = None
    sourceIndicator: Optional[
        Literal[
            'RESOURCE_OPERATION', 'MANAGEMENT_OPERATION', 'SON_OPERATION', 'UNKNOWN'
        ]
    ] = None
    op: Literal['add', 'remove', 'replace']
    path: str
    insert: Optional[Literal['before', 'after']] = None
    value: Optional[Any] = None
    oldValue: Optional[Any] = None


class PatchItem1(BaseModel):
    op: Literal['add', 'replace', 'remove', 'copy', 'move', 'test']
    from_: Optional[str] = Field(None, alias='from')
    path: str
    value: Optional[Any] = None


class UrlExpectationContext(BaseModel):
    contextAttribute: Optional[Literal['url']] = None
    contextCondition: Optional[
        Literal[
            'IS_EQUAL_TO',
            'IS_LESS_THAN',
            'IS_GREATER_THAN',
            'IS_WITHIN_RANGE',
            'IS_OUTSIDE_RANGE',
            'IS_ONE_OF',
            'IS_NOT_ONE_OF',
            'IS_EQUAL_TO_OR_LESS_THAN',
            'IS_EQUAL_TO_OR_GREATER_THAN',
            'IS_ALL_OF',
        ]
    ] = None
    contextValueRange: Optional[str] = None


class L2smObjectContext(BaseModel):
    contextAttribute: Optional[Literal['network', 'providerName', 'domain']] = None
    contextCondition: Optional[
        Literal[
            'IS_EQUAL_TO',
            'IS_LESS_THAN',
            'IS_GREATER_THAN',
            'IS_WITHIN_RANGE',
            'IS_OUTSIDE_RANGE',
            'IS_ONE_OF',
            'IS_NOT_ONE_OF',
            'IS_EQUAL_TO_OR_LESS_THAN',
            'IS_EQUAL_TO_OR_GREATER_THAN',
            'IS_ALL_OF',
        ]
    ] = None
    contextValueRange: Optional[str] = None


class L2smNetworkContext(BaseModel):
    contextAttribute: Optional[Literal['network']] = None
    contextCondition: Optional[
        Literal[
            'IS_EQUAL_TO',
            'IS_LESS_THAN',
            'IS_GREATER_THAN',
            'IS_WITHIN_RANGE',
            'IS_OUTSIDE_RANGE',
            'IS_ONE_OF',
            'IS_NOT_ONE_OF',
            'IS_EQUAL_TO_OR_LESS_THAN',
            'IS_EQUAL_TO_OR_GREATER_THAN',
            'IS_ALL_OF',
        ]
    ] = None
    contextValueRange: Optional[str] = None


class L2smProviderContext(BaseModel):
    contextAttribute: Optional[Literal['providerName']] = None
    contextCondition: Optional[
        Literal[
            'IS_EQUAL_TO',
            'IS_LESS_THAN',
            'IS_GREATER_THAN',
            'IS_WITHIN_RANGE',
            'IS_OUTSIDE_RANGE',
            'IS_ONE_OF',
            'IS_NOT_ONE_OF',
            'IS_EQUAL_TO_OR_LESS_THAN',
            'IS_EQUAL_TO_OR_GREATER_THAN',
            'IS_ALL_OF',
        ]
    ] = None
    contextValueRange: Optional[str] = None


class L2smDomainContext(BaseModel):
    contextAttribute: Optional[Literal['domain']] = None
    contextCondition: Optional[
        Literal[
            'IS_EQUAL_TO',
            'IS_LESS_THAN',
            'IS_GREATER_THAN',
            'IS_WITHIN_RANGE',
            'IS_OUTSIDE_RANGE',
            'IS_ONE_OF',
            'IS_NOT_ONE_OF',
            'IS_EQUAL_TO_OR_LESS_THAN',
            'IS_EQUAL_TO_OR_GREATER_THAN',
            'IS_ALL_OF',
        ]
    ] = None
    contextValueRange: Optional[str] = None


class SecuredKeyContext(BaseModel):
    contextAttribute: Optional[Literal['publicKey']] = None
    contextCondition: Optional[
        Literal[
            'IS_EQUAL_TO',
            'IS_LESS_THAN',
            'IS_GREATER_THAN',
            'IS_WITHIN_RANGE',
            'IS_OUTSIDE_RANGE',
            'IS_ONE_OF',
            'IS_NOT_ONE_OF',
            'IS_EQUAL_TO_OR_LESS_THAN',
            'IS_EQUAL_TO_OR_GREATER_THAN',
            'IS_ALL_OF',
        ]
    ] = None
    contextValueRange: Optional[str] = None


class SecureTarget(BaseModel):
    targetName: Optional[Literal['secure']] = None
    targetCondition: Optional[
        Literal[
            'IS_EQUAL_TO',
            'IS_LESS_THAN',
            'IS_GREATER_THAN',
            'IS_WITHIN_RANGE',
            'IS_OUTSIDE_RANGE',
            'IS_ONE_OF',
            'IS_NOT_ONE_OF',
            'IS_EQUAL_TO_OR_LESS_THAN',
            'IS_EQUAL_TO_OR_GREATER_THAN',
            'IS_ALL_OF',
        ]
    ] = None
    targetValueRange: Optional[str] = None
    targetContexts: Optional[List[SecuredKeyContext]] = None


class L2SMExpectationContext(BaseModel):
    contextAttribute: Optional[Literal['url']] = None
    contextCondition: Optional[Literal['IS_EQUAL_TO']] = None
    contextValueRange: Optional[str] = None


class ISEQUALTO(BaseModel):
    __root__: Literal['IS_EQUAL_TO']


class UrlExpectationContextModel(BaseModel):
    contextAttribute: Optional[Literal['url']] = None
    contextCondition: Optional[Literal['IS_EQUAL_TO']] = None
    contextValueRange: Optional[str] = None


class Field5gcmctimeContext(BaseModel):
    contextAttribute: Optional[Literal['starTime', 'stopTime']] = None
    contextCondition: Optional[Literal['IS_EQUAL_TO']] = None
    contextValueRange: Optional[datetime] = None


class Field5gcmcIPv4Context(BaseModel):
    contextAttribute: Optional[Literal['ip4Address']] = None
    contextCondition: Optional[Literal['IS_EQUAL_TO']] = None
    contextValueRange: Optional[str] = None


class Field5gcmcTypeContext(BaseModel):
    contextAttribute: Optional[Literal['type']] = None
    contextCondition: Optional[Literal['IS_EQUAL_TO']] = None
    contextValueRange: Optional[str] = None


class Field5gcmcPortNumberContext(BaseModel):
    contextAttribute: Optional[Literal['portNumber']] = None
    contextCondition: Optional[Literal['IS_EQUAL_TO']] = None
    contextValueRange: Optional[str] = None


class Field5gcmcPortTypeContext(BaseModel):
    contextAttribute: Optional[Literal['portType']] = None
    contextCondition: Optional[Literal['IS_EQUAL_TO']] = None
    contextValueRange: Optional[str] = None


class Field5gcmcProfileContext(BaseModel):
    contextAttribute: Optional[Literal['profile']] = None
    contextCondition: Optional[Literal['IS_EQUAL_TO']] = None
    contextValueRange: Optional[str] = None


class Field5gcmcmCapacityTarget(BaseModel):
    targetName: Optional[Literal['ulCapacity', 'dlCapacity']] = None
    targetCondition: Optional[Literal['IS_EQUAL_TO']] = None
    targetValueRange: Optional[str] = None
    targetContexts: Optional[List[Field5gcmcProfileContext]] = None


class L2vpnUrlContext(BaseModel):
    contextAttribute: Optional[Literal['url']] = None
    contextCondition: Optional[Literal['IS_EQUAL_TO']] = None
    contextValueRange: Optional[str] = None


class NodeSrcContext(BaseModel):
    contextAttribute: Optional[Literal['nodeSrc']] = None
    contextCondition: Optional[Literal['IS_EQUAL_TO']] = None
    contextValueRange: Optional[str] = None


class NodeDstContext(BaseModel):
    contextAttribute: Optional[Literal['nodeDst']] = None
    contextCondition: Optional[Literal['IS_EQUAL_TO']] = None
    contextValueRange: Optional[str] = None


class EndpointSrcContext(BaseModel):
    contextAttribute: Optional[Literal['endpointSrc']] = None
    contextCondition: Optional[Literal['IS_EQUAL_TO']] = None
    contextValueRange: Optional[str] = None


class EndpointDstContext(BaseModel):
    contextAttribute: Optional[Literal['endpointDst']] = None
    contextCondition: Optional[Literal['IS_EQUAL_TO']] = None
    contextValueRange: Optional[str] = None


class VlanIdContext(BaseModel):
    contextAttribute: Optional[Literal['vlanId']] = None
    contextCondition: Optional[Literal['IS_EQUAL_TO']] = None
    contextValueRange: Optional[str] = None


class NiNameContext(BaseModel):
    contextAttribute: Optional[Literal['niName']] = None
    contextCondition: Optional[Literal['IS_EQUAL_TO']] = None
    contextValueRange: Optional[str] = None


class L2vpnIPv4Context(BaseModel):
    contextAttribute: Optional[Literal['ipv4Address']] = None
    contextCondition: Optional[Literal['IS_EQUAL_TO']] = None
    contextValueRange: Optional[str] = None


class L2vpnBandwidthTarget(BaseModel):
    targetName: Optional[Literal['bandwidth']] = None
    targetCondition: Optional[
        Literal['IS_EQUAL_TO', 'IS_EQUAL_TO_OR_GREATER_THAN', 'IS_GREATER_THAN']
    ] = None
    targetValueRange: Optional[int] = None


class L2vpnLatencyTarget(BaseModel):
    targetName: Optional[Literal['latency']] = None
    targetCondition: Optional[
        Literal['IS_EQUAL_TO', 'IS_LESS_THAN', 'IS_EQUAL_TO_OR_LESS_THAN']
    ] = None
    targetValueRange: Optional[int] = None


class NEMOIntentContext(BaseModel):
    contextAttribute: Optional[Literal['NEMO_WORKLOAD']] = None
    contextCondition: Optional[Literal['IS_EQUAL_TO']] = None
    contextValueRange: Optional[str] = None


class NSMFExpectations(BaseModel):
    __root__: Any = Field(
        ..., description='Different expectations for NSMF core component'
    )


class NSMFNameContext(BaseModel):
    contextAttribute: Optional[Literal['name']] = None
    contextCondition: Optional[Literal['IS_EQUAL_TO']] = None
    contextValueRange: Optional[str] = None


class NSMFUserDensityContext(BaseModel):
    contextAttribute: Optional[Literal['userDensity']] = None
    contextCondition: Optional[Literal['IS_EQUAL_TO']] = None
    contextValueRange: Optional[str] = None


class NSMFSstObjectContext(BaseModel):
    contextAttribute: Optional[Literal['sst']] = None
    contextCondition: Optional[Literal['IS_EQUAL_TO']] = None
    contextValueRange: Optional[str] = None


class NSMFIsolationModelObjectContext(BaseModel):
    contextAttribute: Optional[Literal['isolation-model']] = None
    contextCondition: Optional[Literal['IS_EQUAL_TO']] = None
    contextValueRange: Optional[str] = None


class NSMFPlmnObjectContext(BaseModel):
    contextAttribute: Optional[Literal['plmn']] = None
    contextCondition: Optional[Literal['IS_EQUAL_TO']] = None
    contextValueRange: Optional[str] = None


class NSMFAmbrTarget(BaseModel):
    targetName: Optional[Literal['dLAmbr', 'uLAmbr']] = None
    targetCondition: Optional[Literal['IS_EQUAL_TO_OR_GREATER_THAN']] = None
    targetValueRange: Optional[str] = None


class NSMFGbrTarget(BaseModel):
    targetName: Optional[Literal['dLGbr', 'uLGbr']] = None
    targetCondition: Optional[Literal['IS_EQUAL_TO_OR_GREATER_THAN']] = None
    targetValueRange: Optional[str] = None


class NSMFMbrTarget(BaseModel):
    targetName: Optional[Literal['dLMbr', 'uLMbr']] = None
    targetCondition: Optional[Literal['IS_EQUAL_TO_OR_GREATER_THAN']] = None
    targetValueRange: Optional[str] = None


class NSMFPlrTarget(BaseModel):
    targetName: Optional[Literal['plr']] = None
    targetCondition: Optional[Literal['IS_EQUAL_TO']] = None
    targetValueRange: Optional[str] = None


class NSMFFlowContext(BaseModel):
    contextAttribute: Optional[Literal['flow']] = None
    contextCondition: Optional[Literal['IS_EQUAL_TO']] = None
    contextValueRange: Optional[str] = None


class GreenIntentContext(BaseModel):
    contextAttribute: Optional[Literal['6GREEN_ID']] = None
    contextCondition: Optional[Literal['IS_EQUAL_TO']] = None
    contextValueRange: Optional[str] = None


class NsmfNameIntentContext(BaseModel):
    contextAttribute: Optional[Literal['name']] = None
    contextCondition: Optional[Literal['IS_EQUAL_TO']] = None
    contextValueRange: Optional[str] = None


class NsmfNamespaceIntentContext(BaseModel):
    contextAttribute: Optional[Literal['namespace']] = None
    contextCondition: Optional[Literal['IS_EQUAL_TO']] = None
    contextValueRange: Optional[str] = None


class Tai(BaseModel):
    mcc: Optional[constr(regex=r'^[0-9]{3}$')] = None
    mnc: Optional[constr(regex=r'^[0-9]{2,3}$')] = None
    tac: Optional[constr(regex=r'(^[A-Fa-f0-9]{4}$)|(^[A-Fa-f0-9]{6}$)')] = None


class Operation(BaseModel):
    name: Optional[str] = None
    allowedNFTypes: Optional[
        Literal[
            'NRF',
            'UDM',
            'AMF',
            'SMF',
            'AUSF',
            'NEF',
            'PCF',
            'SMSF',
            'NSSF',
            'UDR',
            'LMF',
            'GMLC',
            '5G_EIR',
            'SEPP',
            'UPF',
            'N3IWF',
            'AF',
            'UDSF',
            'DN',
            'BSF',
            'CHF',
            'NWDAF',
            'PCSCF',
            'CBCF',
            'HSS',
            'UCMF',
            'SOR_AF',
            'SPAF',
            'MME',
            'SCSAS',
            'SCEF',
            'SCP',
            'NSSAAF',
            'ICSCF',
            'SCSCF',
            'DRA',
            'IMS_AS',
            'AANF',
            '5G_DDNMF',
            'NSACF',
            'MFAF',
            'EASDF',
            'DCCF',
            'MB_SMF',
            'TSCTSF',
            'ADRF',
            'GBA_BSF',
            'CEF',
            'MB_UPF',
            'NSWOF',
            'PKMF',
            'MNPF',
            'SMS_GMSC',
            'SMS_IWMSC',
            'MBSF',
            'MBSTF',
            'PANF',
            'TNGF',
            'W_AGF',
            'TWIF',
            'TSN_AF',
        ]
    ] = Field(None, description=' NF name defined in TS 23.501 or TS 29.510')
    operationSemantics: Optional[Literal['REQUEST_RESPONSE', 'SUBSCRIBE_NOTIFY']] = None


class NotificationHeader(BaseModel):
    href: str
    notificationId: int
    notificationType: Union[
        Literal[
            'notifyNewAlarm',
            'notifyChangedAlarm',
            'notifyChangedAlarmGeneral',
            'notifyAckStateChanged',
            'notifyCorrelatedNotificationChanged',
            'notifyComments',
            'notifyClearedAlarm',
            'notifyAlarmListRebuilt',
            'notifyPotentialFaultyAlarmList',
        ],
        Literal[
            'notifyMOICreation',
            'notifyMOIDeletion',
            'notifyMOIAttributeValueChanges',
            'notifyEvent',
            'notifyMOIChanges',
        ],
    ]
    eventTime: datetime
    systemDN: str


class NotifyNewSecAlarm(NotificationHeader):
    alarmId: str
    alarmType: Literal[
        'COMMUNICATIONS_ALARM',
        'QUALITY_OF_SERVICE_ALARM',
        'PROCESSING_ERROR_ALARM',
        'EQUIPMENT_ALARM',
        'ENVIRONMENTAL_ALARM',
        'INTEGRITY_VIOLATION',
        'OPERATIONAL_VIOLATION',
        'PHYSICAL_VIOLATION',
        'SECURITY_SERVICE_OR_MECHANISM_VIOLATION',
        'TIME_DOMAIN_VIOLATION',
    ]
    probableCause: Union[
        Union[
            Literal[
                'PROBABLE_CAUSE_001',
                'PROBABLE_CAUSE_002',
                'PROBABLE_CAUSE_003',
                'PROBABLE_CAUSE_004',
                'PROBABLE_CAUSE_005',
            ],
            str,
        ],
        int,
    ] = Field(
        ...,
        description='The value of the probable cause may be a specific standardized string, or any vendor provided string. Probable cause strings are not standardized in the present document. They may be added in a future version. Up to then the mapping of the generic probable cause strings "PROBABLE_CAUSE_001" to "PROBABLE_CAUSE_005" is vendor specific. The value of the probable cause may also be an integer. The mapping of integer values to probable causes is vendor specific.',
    )
    perceivedSeverity: Literal[
        'INDETERMINATE', 'CRITICAL', 'MAJOR', 'MINOR', 'WARNING', 'CLEARED'
    ]
    correlatedNotifications: Optional[List[CorrelatedNotification]] = None
    additionalText: Optional[str] = None
    additionalInformation: Optional[Dict[str, Any]] = None
    rootCauseIndicator: Optional[bool] = None
    serviceUser: str
    serviceProvider: str
    securityAlarmDetector: str


class NotifyClearedAlarm(NotificationHeader):
    alarmId: str
    alarmType: Literal[
        'COMMUNICATIONS_ALARM',
        'QUALITY_OF_SERVICE_ALARM',
        'PROCESSING_ERROR_ALARM',
        'EQUIPMENT_ALARM',
        'ENVIRONMENTAL_ALARM',
        'INTEGRITY_VIOLATION',
        'OPERATIONAL_VIOLATION',
        'PHYSICAL_VIOLATION',
        'SECURITY_SERVICE_OR_MECHANISM_VIOLATION',
        'TIME_DOMAIN_VIOLATION',
    ]
    probableCause: Union[
        Union[
            Literal[
                'PROBABLE_CAUSE_001',
                'PROBABLE_CAUSE_002',
                'PROBABLE_CAUSE_003',
                'PROBABLE_CAUSE_004',
                'PROBABLE_CAUSE_005',
            ],
            str,
        ],
        int,
    ] = Field(
        ...,
        description='The value of the probable cause may be a specific standardized string, or any vendor provided string. Probable cause strings are not standardized in the present document. They may be added in a future version. Up to then the mapping of the generic probable cause strings "PROBABLE_CAUSE_001" to "PROBABLE_CAUSE_005" is vendor specific. The value of the probable cause may also be an integer. The mapping of integer values to probable causes is vendor specific.',
    )
    perceivedSeverity: Literal[
        'INDETERMINATE', 'CRITICAL', 'MAJOR', 'MINOR', 'WARNING', 'CLEARED'
    ]
    correlatedNotifications: Optional[List[CorrelatedNotification]] = None
    clearUserId: Optional[str] = None
    clearSystemId: Optional[str] = None


class NotifyChangedAlarm(NotificationHeader):
    alarmId: str
    alarmType: Literal[
        'COMMUNICATIONS_ALARM',
        'QUALITY_OF_SERVICE_ALARM',
        'PROCESSING_ERROR_ALARM',
        'EQUIPMENT_ALARM',
        'ENVIRONMENTAL_ALARM',
        'INTEGRITY_VIOLATION',
        'OPERATIONAL_VIOLATION',
        'PHYSICAL_VIOLATION',
        'SECURITY_SERVICE_OR_MECHANISM_VIOLATION',
        'TIME_DOMAIN_VIOLATION',
    ]
    probableCause: Union[
        Union[
            Literal[
                'PROBABLE_CAUSE_001',
                'PROBABLE_CAUSE_002',
                'PROBABLE_CAUSE_003',
                'PROBABLE_CAUSE_004',
                'PROBABLE_CAUSE_005',
            ],
            str,
        ],
        int,
    ] = Field(
        ...,
        description='The value of the probable cause may be a specific standardized string, or any vendor provided string. Probable cause strings are not standardized in the present document. They may be added in a future version. Up to then the mapping of the generic probable cause strings "PROBABLE_CAUSE_001" to "PROBABLE_CAUSE_005" is vendor specific. The value of the probable cause may also be an integer. The mapping of integer values to probable causes is vendor specific.',
    )
    perceivedSeverity: Literal[
        'INDETERMINATE', 'CRITICAL', 'MAJOR', 'MINOR', 'WARNING', 'CLEARED'
    ]


class NotifyChangedAlarmGeneral(NotificationHeader):
    alarmId: str
    alarmType: Literal[
        'COMMUNICATIONS_ALARM',
        'QUALITY_OF_SERVICE_ALARM',
        'PROCESSING_ERROR_ALARM',
        'EQUIPMENT_ALARM',
        'ENVIRONMENTAL_ALARM',
        'INTEGRITY_VIOLATION',
        'OPERATIONAL_VIOLATION',
        'PHYSICAL_VIOLATION',
        'SECURITY_SERVICE_OR_MECHANISM_VIOLATION',
        'TIME_DOMAIN_VIOLATION',
    ]
    probableCause: Optional[
        Union[
            Union[
                Literal[
                    'PROBABLE_CAUSE_001',
                    'PROBABLE_CAUSE_002',
                    'PROBABLE_CAUSE_003',
                    'PROBABLE_CAUSE_004',
                    'PROBABLE_CAUSE_005',
                ],
                str,
            ],
            int,
        ]
    ] = Field(
        None,
        description='The value of the probable cause may be a specific standardized string, or any vendor provided string. Probable cause strings are not standardized in the present document. They may be added in a future version. Up to then the mapping of the generic probable cause strings "PROBABLE_CAUSE_001" to "PROBABLE_CAUSE_005" is vendor specific. The value of the probable cause may also be an integer. The mapping of integer values to probable causes is vendor specific.',
    )
    specificProblem: Optional[Union[str, int]] = None
    perceivedSeverity: Optional[
        Literal['INDETERMINATE', 'CRITICAL', 'MAJOR', 'MINOR', 'WARNING', 'CLEARED']
    ] = None
    correlatedNotifications: Optional[List[CorrelatedNotification]] = None
    backedUpStatus: Optional[bool] = None
    backUpObject: Optional[str] = None
    trendIndication: Optional[Literal['MORE_SEVERE', 'NO_CHANGE', 'LESS_SEVERE']] = None
    thresholdInfo: Optional[ThresholdInfo] = None
    stateChangeDefinition: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The first array item contains the attribute name value pairs with the new values, and the second array item the attribute name value pairs with the optional old values.',
    )
    monitoredAttributes: Optional[Dict[str, Any]] = None
    proposedRepairActions: Optional[str] = None
    additionalText: Optional[str] = None
    additionalInformation: Optional[Dict[str, Any]] = None
    rootCauseIndicator: Optional[bool] = None
    changedAlarmAttributes: Optional[Dict[str, Any]] = None


class NotifyChangedSecAlarmGeneral(NotificationHeader):
    alarmId: str
    alarmType: Literal[
        'COMMUNICATIONS_ALARM',
        'QUALITY_OF_SERVICE_ALARM',
        'PROCESSING_ERROR_ALARM',
        'EQUIPMENT_ALARM',
        'ENVIRONMENTAL_ALARM',
        'INTEGRITY_VIOLATION',
        'OPERATIONAL_VIOLATION',
        'PHYSICAL_VIOLATION',
        'SECURITY_SERVICE_OR_MECHANISM_VIOLATION',
        'TIME_DOMAIN_VIOLATION',
    ]
    probableCause: Optional[
        Union[
            Union[
                Literal[
                    'PROBABLE_CAUSE_001',
                    'PROBABLE_CAUSE_002',
                    'PROBABLE_CAUSE_003',
                    'PROBABLE_CAUSE_004',
                    'PROBABLE_CAUSE_005',
                ],
                str,
            ],
            int,
        ]
    ] = Field(
        None,
        description='The value of the probable cause may be a specific standardized string, or any vendor provided string. Probable cause strings are not standardized in the present document. They may be added in a future version. Up to then the mapping of the generic probable cause strings "PROBABLE_CAUSE_001" to "PROBABLE_CAUSE_005" is vendor specific. The value of the probable cause may also be an integer. The mapping of integer values to probable causes is vendor specific.',
    )
    perceivedSeverity: Optional[
        Literal['INDETERMINATE', 'CRITICAL', 'MAJOR', 'MINOR', 'WARNING', 'CLEARED']
    ] = None
    correlatedNotifications: Optional[List[CorrelatedNotification]] = None
    additionalText: Optional[str] = None
    additionalInformation: Optional[Dict[str, Any]] = None
    rootCauseIndicator: Optional[bool] = None
    serviceUser: str
    serviceProvider: str
    securityAlarmDetector: str
    changedAlarmAttributes: Optional[Dict[str, Any]] = None


class NotifyCorrelatedNotificationChanged(NotificationHeader):
    alarmId: str
    correlatedNotifications: List[CorrelatedNotification]
    rootCauseIndicator: Optional[bool] = None


class NotifyAckStateChanged(NotificationHeader):
    alarmId: str
    alarmType: Literal[
        'COMMUNICATIONS_ALARM',
        'QUALITY_OF_SERVICE_ALARM',
        'PROCESSING_ERROR_ALARM',
        'EQUIPMENT_ALARM',
        'ENVIRONMENTAL_ALARM',
        'INTEGRITY_VIOLATION',
        'OPERATIONAL_VIOLATION',
        'PHYSICAL_VIOLATION',
        'SECURITY_SERVICE_OR_MECHANISM_VIOLATION',
        'TIME_DOMAIN_VIOLATION',
    ]
    probableCause: Union[
        Union[
            Literal[
                'PROBABLE_CAUSE_001',
                'PROBABLE_CAUSE_002',
                'PROBABLE_CAUSE_003',
                'PROBABLE_CAUSE_004',
                'PROBABLE_CAUSE_005',
            ],
            str,
        ],
        int,
    ] = Field(
        ...,
        description='The value of the probable cause may be a specific standardized string, or any vendor provided string. Probable cause strings are not standardized in the present document. They may be added in a future version. Up to then the mapping of the generic probable cause strings "PROBABLE_CAUSE_001" to "PROBABLE_CAUSE_005" is vendor specific. The value of the probable cause may also be an integer. The mapping of integer values to probable causes is vendor specific.',
    )
    perceivedSeverity: Literal[
        'INDETERMINATE', 'CRITICAL', 'MAJOR', 'MINOR', 'WARNING', 'CLEARED'
    ]
    ackState: Literal['ACKNOWLEDGED', 'UNACKNOWLEDGED']
    ackUserId: str
    ackSystemId: Optional[str] = None


class NotifyComments(NotificationHeader):
    alarmId: str
    alarmType: Literal[
        'COMMUNICATIONS_ALARM',
        'QUALITY_OF_SERVICE_ALARM',
        'PROCESSING_ERROR_ALARM',
        'EQUIPMENT_ALARM',
        'ENVIRONMENTAL_ALARM',
        'INTEGRITY_VIOLATION',
        'OPERATIONAL_VIOLATION',
        'PHYSICAL_VIOLATION',
        'SECURITY_SERVICE_OR_MECHANISM_VIOLATION',
        'TIME_DOMAIN_VIOLATION',
    ]
    probableCause: Union[
        Union[
            Literal[
                'PROBABLE_CAUSE_001',
                'PROBABLE_CAUSE_002',
                'PROBABLE_CAUSE_003',
                'PROBABLE_CAUSE_004',
                'PROBABLE_CAUSE_005',
            ],
            str,
        ],
        int,
    ] = Field(
        ...,
        description='The value of the probable cause may be a specific standardized string, or any vendor provided string. Probable cause strings are not standardized in the present document. They may be added in a future version. Up to then the mapping of the generic probable cause strings "PROBABLE_CAUSE_001" to "PROBABLE_CAUSE_005" is vendor specific. The value of the probable cause may also be an integer. The mapping of integer values to probable causes is vendor specific.',
    )
    perceivedSeverity: Literal[
        'INDETERMINATE', 'CRITICAL', 'MAJOR', 'MINOR', 'WARNING', 'CLEARED'
    ]
    comments: Dict[str, Comment]


class NotifyPotentialFaultyAlarmList(NotificationHeader):
    reason: str


class NotifyAlarmListRebuilt(NotificationHeader):
    reason: str
    alarmListAlignmentRequirement: Optional[
        Literal['ALIGNMENT_REQUIRED', 'ALIGNMENT_NOT_REQUIRED']
    ] = None


class AreaScope(BaseModel):
    __root__: Union[
        List[constr(regex=r'^[A-Fa-f0-9]{7}$')],
        List[constr(regex=r'^[A-Fa-f0-9]{9}$')],
        List[constr(regex=r'(^[A-Fa-f0-9]{4}$)|(^[A-Fa-f0-9]{6}$)')],
        List[Tai],
        List[NpnIdType],
    ]


class Attributes8(BaseModel):
    notificationTypes: Optional[
        List[
            Union[
                Literal[
                    'notifyNewAlarm',
                    'notifyChangedAlarm',
                    'notifyChangedAlarmGeneral',
                    'notifyAckStateChanged',
                    'notifyCorrelatedNotificationChanged',
                    'notifyComments',
                    'notifyClearedAlarm',
                    'notifyAlarmListRebuilt',
                    'notifyPotentialFaultyAlarmList',
                ],
                Literal[
                    'notifyMOICreation',
                    'notifyMOIDeletion',
                    'notifyMOIAttributeValueChanges',
                    'notifyEvent',
                    'notifyMOIChanges',
                ],
            ]
        ]
    ] = None
    notificationProtocols: Optional[List[Literal['HTTP', 'HTTP_VES_ENCAPS']]] = None


class Context(BaseModel):
    contextAttribute: Optional[str] = None
    contextCondition: Optional[
        Literal[
            'IS_EQUAL_TO',
            'IS_LESS_THAN',
            'IS_GREATER_THAN',
            'IS_WITHIN_RANGE',
            'IS_OUTSIDE_RANGE',
            'IS_ONE_OF',
            'IS_NOT_ONE_OF',
            'IS_EQUAL_TO_OR_LESS_THAN',
            'IS_EQUAL_TO_OR_GREATER_THAN',
            'IS_ALL_OF',
        ]
    ] = None
    contextValueRange: Optional[
        Union[
            List[
                Union[
                    float,
                    str,
                    bool,
                    int,
                    GeoArea,
                    PlmnId,
                    GeoCoordinate,
                    UEGroup,
                    Frequency,
                    Union[TimeWindow1, TimeWindow2, TimeWindow3],
                    datetime,
                ]
            ],
            Union[
                float,
                str,
                bool,
                int,
                GeoArea,
                PlmnId,
                GeoCoordinate,
                UEGroup,
                Frequency,
                Union[TimeWindow1, TimeWindow2, TimeWindow3],
                datetime,
            ],
        ]
    ] = None


class ExpectationFulfilmentResult(BaseModel):
    expectaitonId: Optional[str] = None
    expectationFulfilmentInfo: Optional[FulfilmentInfo] = None
    targetFulfilmentResult: Optional[List[TargetFulfilmentResult]] = None


class BackhaulAddress(BaseModel):
    gnbId: Optional[conint(ge=0, le=4294967295)] = None
    tai: Optional[Tai] = None


class MappingSetIDBackhaulAddress(BaseModel):
    setID: Optional[int] = None
    backhaulAddress: Optional[BackhaulAddress] = None


class Ephemeris1(BaseModel):
    satelliteId: constr(regex=r'^[0-9]{5}$')
    epochTime: datetime
    positionVelocity: PositionVelocity
    orbital: Optional[Orbital] = None


class Ephemeris2(BaseModel):
    satelliteId: constr(regex=r'^[0-9]{5}$')
    epochTime: datetime
    positionVelocity: Optional[PositionVelocity] = None
    orbital: Orbital


class AmfIdentifier(BaseModel):
    amfRegionId: Optional[conint(le=255)] = Field(
        None, description='AmfRegionId is defined in TS 23.003'
    )
    amfSetId: Optional[str] = Field(
        None, description='AmfSetId is defined in TS 23.003'
    )
    amfPointer: Optional[conint(le=63)] = Field(
        None, description='AmfPointer is defined in TS 23.003'
    )


class NFProfile(BaseModel):
    nFInstanceId: Optional[str] = Field(None, description='uuid of NF instance')
    nFType: Optional[
        Literal[
            'NRF',
            'UDM',
            'AMF',
            'SMF',
            'AUSF',
            'NEF',
            'PCF',
            'SMSF',
            'NSSF',
            'UDR',
            'LMF',
            'GMLC',
            '5G_EIR',
            'SEPP',
            'UPF',
            'N3IWF',
            'AF',
            'UDSF',
            'DN',
            'BSF',
            'CHF',
            'NWDAF',
            'PCSCF',
            'CBCF',
            'HSS',
            'UCMF',
            'SOR_AF',
            'SPAF',
            'MME',
            'SCSAS',
            'SCEF',
            'SCP',
            'NSSAAF',
            'ICSCF',
            'SCSCF',
            'DRA',
            'IMS_AS',
            'AANF',
            '5G_DDNMF',
            'NSACF',
            'MFAF',
            'EASDF',
            'DCCF',
            'MB_SMF',
            'TSCTSF',
            'ADRF',
            'GBA_BSF',
            'CEF',
            'MB_UPF',
            'NSWOF',
            'PKMF',
            'MNPF',
            'SMS_GMSC',
            'SMS_IWMSC',
            'MBSF',
            'MBSTF',
            'PANF',
            'TNGF',
            'W_AGF',
            'TWIF',
            'TSN_AF',
        ]
    ] = Field(None, description=' NF name defined in TS 23.501 or TS 29.510')
    nFStatus: Optional[Literal['REGISTERED', 'SUSPENDED']] = Field(
        None, description='any of enumerated value'
    )
    plmn: Optional[PlmnId] = None
    sNssais: Optional[Snssai] = None
    fqdn: Optional[str] = None
    interPlmnFqdn: Optional[str] = None
    nfServices: Optional[List[NFService]] = None


class AusfInfo(BaseModel):
    nFSrvGroupId: Optional[str] = None
    supiRanges: Optional[List[SupiRange]] = Field(None, min_items=1)
    routingIndicators: Optional[List[constr(regex=r'^[0-9]{1,4}$')]] = Field(
        None, min_items=1
    )
    suciInfos: Optional[List[SuciInfo]] = Field(None, min_items=1)


class ManagedNFProfile(BaseModel):
    nfInstanceID: Optional[str] = None
    nfType: Optional[
        Literal[
            'NRF',
            'UDM',
            'AMF',
            'SMF',
            'AUSF',
            'NEF',
            'PCF',
            'SMSF',
            'NSSF',
            'UDR',
            'LMF',
            'GMLC',
            '5G_EIR',
            'SEPP',
            'UPF',
            'N3IWF',
            'AF',
            'UDSF',
            'DN',
            'BSF',
            'CHF',
            'NWDAF',
            'PCSCF',
            'CBCF',
            'HSS',
            'UCMF',
            'SOR_AF',
            'SPAF',
            'MME',
            'SCSAS',
            'SCEF',
            'SCP',
            'NSSAAF',
            'ICSCF',
            'SCSCF',
            'DRA',
            'IMS_AS',
            'AANF',
            '5G_DDNMF',
            'NSACF',
            'MFAF',
            'EASDF',
            'DCCF',
            'MB_SMF',
            'TSCTSF',
            'ADRF',
            'GBA_BSF',
            'CEF',
            'MB_UPF',
            'NSWOF',
            'PKMF',
            'MNPF',
            'SMS_GMSC',
            'SMS_IWMSC',
            'MBSF',
            'MBSTF',
            'PANF',
            'TNGF',
            'W_AGF',
            'TWIF',
            'TSN_AF',
        ]
    ] = Field(None, description=' NF name defined in TS 23.501 or TS 29.510')
    heartbeatTimer: Optional[int] = None
    authzInfo: Optional[str] = None
    hostAddr: Optional[
        Union[
            Ipv6Addr,
            constr(
                regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
            ),
            str,
        ]
    ] = None
    allowedPLMNs: Optional[List[PlmnId]] = None
    allowedSNPNs: Optional[List[SnpnInfo]] = None
    allowedNfTypes: Optional[
        List[
            Literal[
                'NRF',
                'UDM',
                'AMF',
                'SMF',
                'AUSF',
                'NEF',
                'PCF',
                'SMSF',
                'NSSF',
                'UDR',
                'LMF',
                'GMLC',
                '5G_EIR',
                'SEPP',
                'UPF',
                'N3IWF',
                'AF',
                'UDSF',
                'DN',
                'BSF',
                'CHF',
                'NWDAF',
                'PCSCF',
                'CBCF',
                'HSS',
                'UCMF',
                'SOR_AF',
                'SPAF',
                'MME',
                'SCSAS',
                'SCEF',
                'SCP',
                'NSSAAF',
                'ICSCF',
                'SCSCF',
                'DRA',
                'IMS_AS',
                'AANF',
                '5G_DDNMF',
                'NSACF',
                'MFAF',
                'EASDF',
                'DCCF',
                'MB_SMF',
                'TSCTSF',
                'ADRF',
                'GBA_BSF',
                'CEF',
                'MB_UPF',
                'NSWOF',
                'PKMF',
                'MNPF',
                'SMS_GMSC',
                'SMS_IWMSC',
                'MBSF',
                'MBSTF',
                'PANF',
                'TNGF',
                'W_AGF',
                'TWIF',
                'TSN_AF',
            ]
        ]
    ] = None
    allowedNfDomains: Optional[List[str]] = None
    allowedNSSAIs: Optional[List[Snssai]] = None
    locality: Optional[str] = None
    capacity: Optional[int] = None
    nfSetIdList: Optional[List[str]] = None
    servingScope: Optional[List[str]] = None
    lcHSupportInd: Optional[bool] = None
    olcHSupportInd: Optional[bool] = None
    nfSetRecoveryTimeList: Optional[List[datetime]] = None
    scpDomains: Optional[List[str]] = None
    recoveryTime: Optional[datetime] = None
    nfServicePersistence: Optional[bool] = None
    nfProfileChangesSupportInd: Optional[bool] = None
    defaultNotificationSubscriptions: Optional[
        List[DefaultNotificationSubscription]
    ] = Field(None, min_items=1)
    serviceSetRecoveryTimeList: Optional[List[datetime]] = Field(None, min_items=1)
    vendorId: Optional[constr(regex=r'^[0-9]{6}$')] = Field(
        None,
        description='Vendor ID of the NF Service instance (Private Enterprise Number assigned by IANA)',
    )


class QosData(BaseModel):
    qosId: Optional[str] = None
    fiveQIValue: Optional[int] = None
    maxbrUl: Optional[constr(regex=r'^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$')] = Field(
        None,
        description="This data type is defined in the same way as the 'BitRate' data type, but with the OpenAPI 'nullable: true' property.\n",
    )
    maxbrDl: Optional[constr(regex=r'^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$')] = Field(
        None,
        description="This data type is defined in the same way as the 'BitRate' data type, but with the OpenAPI 'nullable: true' property.\n",
    )
    gbrUl: Optional[constr(regex=r'^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$')] = Field(
        None,
        description="This data type is defined in the same way as the 'BitRate' data type, but with the OpenAPI 'nullable: true' property.\n",
    )
    gbrDl: Optional[constr(regex=r'^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$')] = Field(
        None,
        description="This data type is defined in the same way as the 'BitRate' data type, but with the OpenAPI 'nullable: true' property.\n",
    )
    arp: Optional[Arp] = None
    qosNotificationControl: Optional[bool] = None
    reflectiveQos: Optional[bool] = None
    sharingKeyDl: Optional[str] = None
    sharingKeyUl: Optional[str] = None
    maxPacketLossRateDl: Optional[conint(ge=0, le=1000)] = Field(
        None,
        description="This data type is defined in the same way as the 'PacketLossRate' data type, but with the OpenAPI 'nullable: true' property.\n",
    )
    maxPacketLossRateUl: Optional[conint(ge=0, le=1000)] = Field(
        None,
        description="This data type is defined in the same way as the 'PacketLossRate' data type, but with the OpenAPI 'nullable: true' property.\n",
    )
    extMaxDataBurstVol: Optional[conint(ge=4096, le=2000000)] = Field(
        None,
        description="This data type is defined in the same way as the 'ExtMaxDataBurstVol' data type, but with the OpenAPI 'nullable: true' property.\n",
    )


class ProblemDetails(BaseModel):
    type: Optional[str] = Field(
        None, description='String providing an URI formatted according to RFC 3986.'
    )
    title: Optional[str] = None
    status: Optional[int] = None
    detail: Optional[str] = Field(
        None,
        description='A human-readable explanation specific to this occurrence of the problem.',
    )
    instance: Optional[str] = Field(
        None, description='String providing an URI formatted according to RFC 3986.'
    )
    cause: Optional[str] = Field(
        None,
        description='A machine-readable application error cause specific to this occurrence of the problem.  This IE should be present and provide application-related error information, if available.\n',
    )
    invalidParams: Optional[List[InvalidParam]] = Field(None, min_items=1)
    supportedFeatures: Optional[constr(regex=r'^[A-Fa-f0-9]*$')] = Field(
        None,
        description='A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of "0" to "9",  "a" to "f" or "A" to "F" and shall represent the support of 4 features as described in  table\xa05.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.\n',
    )
    accessTokenError: Optional[str] = None
    accessTokenRequest: Optional[str] = None
    nrfId: Optional[
        constr(
            regex=r'^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$',
            min_length=4,
            max_length=253,
        )
    ] = Field(None, description='Fully Qualified Domain Name')
    supportedApiVersions: Optional[List[str]] = Field(None, min_items=1)
    noProfileMatchInfo: Optional[str] = None


class CnfUnit(BaseModel):
    cnfUnit: List[Atom] = Field(..., min_items=1)


class DnfUnit(BaseModel):
    dnfUnit: List[Atom] = Field(..., min_items=1)


class PatchResult(BaseModel):
    report: List[ReportItem] = Field(
        ...,
        description='The execution report contains an array of report items. Each report item indicates one  failed modification.\n',
        min_items=1,
    )


class HalTemplate(BaseModel):
    title: Optional[str] = Field(
        None,
        description='A human-readable string that can be used to identify this template',
    )
    method: Union[
        Literal[
            'GET',
            'POST',
            'PUT',
            'DELETE',
            'PATCH',
            'OPTIONS',
            'HEAD',
            'CONNECT',
            'TRACE',
        ],
        str,
    ] = Field(..., description='HTTP methodes.')
    contentType: Optional[str] = Field(
        None,
        description='The media type that should be used for the corresponding request. If the attribute is missing, or contains an unrecognized value, the client should act as if the  contentType is set to "application/json".\n',
    )
    properties: Optional[List[Property]] = Field(
        None,
        description='The properties that should be included in the body of the corresponding request.  If the contentType attribute is set to "application/json", then this attribute  describes the attributes of the JSON object of the body.\n',
        min_items=1,
    )


class StringMatchingRule(BaseModel):
    stringMatchingConditions: Optional[List[StringMatchingCondition]] = Field(
        None, min_items=1
    )


class Guami(BaseModel):
    plmnId: PlmnIdNid
    amfId: constr(regex=r'^[A-Fa-f0-9]{6}$') = Field(
        ...,
        description='String identifying the AMF ID composed of AMF Region ID (8 bits), AMF Set ID (10 bits) and AMF  Pointer (6 bits) as specified in clause 2.10.1 of 3GPP TS 23.003. It is encoded as a string of  6 hexadecimal characters (i.e., 24 bits). \n',
    )


class GuamiRm(BaseModel):
    __root__: Union[Guami,] = Field(
        ...,
        description="This data type is defined in the same way as the 'Guami' data type, but with the OpenAPI 'nullable: true' property.\n",
    )


class NetworkId(BaseModel):
    mnc: Optional[constr(regex=r'^\d{2,3}$')] = Field(
        None,
        description='Mobile Network Code part of the PLMN, comprising 2 or 3 digits, as defined in  clause 9.3.3.5 of 3GPP TS 38.413. \n',
    )
    mcc: Optional[constr(regex=r'^\d{3}$')] = Field(
        None,
        description='Mobile Country Code part of the PLMN, comprising 3 digits, as defined in clause 9.3.3.5 of 3GPP TS 38.413. \n',
    )


class SubscribedDefaultQos(BaseModel):
    field_5qi: conint(ge=0, le=255) = Field(
        ...,
        alias='5qi',
        description='Unsigned integer representing a 5G QoS Identifier (see clause 5.7.2.1 of 3GPP TS 23.501, within the range 0 to 255.\n',
    )
    arp: Arp
    priorityLevel: Optional[conint(ge=1, le=127)] = Field(
        None,
        description='Unsigned integer indicating the 5QI Priority Level (see clauses 5.7.3.3 and 5.7.4 of 3GPP TS 23.501, within the range 1 to 127.Values are ordered in decreasing order of priority,  i.e. with 1 as the highest priority and 127 as the lowest priority. \n',
    )


class N3gaLocation(BaseModel):
    n3gppTai: Optional[Tai1] = None
    n3IwfId: Optional[constr(regex=r'^[A-Fa-f0-9]+$')] = Field(
        None,
        description='This IE shall contain the N3IWF identifier received over NGAP and shall be encoded as a  string of hexadecimal characters. Each character in the string shall take a value of "0"  to "9", "a" to "f" or "A" to "F" and shall represent 4 bits. The most significant  character representing the 4 most significant bits of the N3IWF ID shall appear first in  the string, and the character representing the 4 least significant bit of the N3IWF ID  shall appear last in the string. \n',
    )
    ueIpv4Addr: Optional[
        constr(
            regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
        )
    ] = Field(
        None,
        description="String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.\n",
        example='198.51.100.1',
    )
    ueIpv6Addr: Optional[Ipv6Addr] = None
    portNumber: Optional[conint(ge=0)] = Field(
        None,
        description='Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.',
    )
    protocol: Optional[Union[Literal['UDP', 'TCP'], str]] = Field(
        None,
        description='Possible values are:\n- UDP: User Datagram Protocol.\n- TCP: Transmission Control Protocol. \n',
    )
    tnapId: Optional[TnapId] = None
    twapId: Optional[TwapId] = None
    hfcNodeId: Optional[HfcNodeId] = None
    gli: Optional[str] = Field(
        None, description="string with format 'bytes' as defined in OpenAPI"
    )
    w5gbanLineType: Optional[Union[Literal['DSL', 'PON'], str]] = Field(
        None,
        description='Possible values are:\n- DSL: Identifies a DSL line\n- PON: Identifies a PON line\n',
    )
    gci: Optional[str] = Field(
        None,
        description='Global Cable Identifier uniquely identifying the connection between the 5G-CRG or FN-CRG to the 5GS. See clause 28.15.4 of 3GPP TS 23.003. This shall be encoded as a string per clause 28.15.4 of 3GPP TS 23.003, and compliant with the syntax specified  in clause 2.2  of IETF RFC 7542 for the username part of a NAI. The GCI value is specified in CableLabs WR-TR-5WWC-ARCH.\n',
    )


class BackupAmfInfo(BaseModel):
    backupAmf: constr(
        regex=r'^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$',
        min_length=4,
        max_length=253,
    ) = Field(..., description='Fully Qualified Domain Name')
    guamiList: Optional[List[Guami]] = Field(
        None,
        description='If present, this IE shall contain the list of GUAMI(s) (supported by the AMF) for which the backupAmf IE applies.\n',
        min_items=1,
    )


class RouteToLocation1(BaseModel):
    dnai: str = Field(
        ...,
        description='DNAI (Data network access identifier), see clause 5.6.7 of 3GPP TS 23.501.',
    )
    routeInfo: RouteInformation
    routeProfId: Optional[str] = Field(
        None, description='Identifies the routing profile Id.'
    )


class RouteToLocation2(BaseModel):
    dnai: str = Field(
        ...,
        description='DNAI (Data network access identifier), see clause 5.6.7 of 3GPP TS 23.501.',
    )
    routeInfo: Optional[RouteInformation] = None
    routeProfId: str = Field(..., description='Identifies the routing profile Id.')


class GlobalRanNodeId1(BaseModel):
    plmnId: PlmnId1
    n3IwfId: constr(regex=r'^[A-Fa-f0-9]+$') = Field(
        ...,
        description='This represents the identifier of the N3IWF ID as specified in clause 9.3.1.57 of  3GPP TS 38.413 in hexadecimal representation. Each character in the string shall take a value  of "0" to "9", "a" to "f" or "A" to "F" and shall represent 4 bits. The most significant  character representing the 4 most significant bits of the N3IWF ID shall appear first in the  string, and the character representing the 4 least significant bit of the N3IWF ID shall  appear last in the string. \n',
    )
    gNbId: Optional[GNbId] = None
    ngeNbId: Optional[
        constr(
            regex=r'^(MacroNGeNB-[A-Fa-f0-9]{5}|LMacroNGeNB-[A-Fa-f0-9]{6}|SMacroNGeNB-[A-Fa-f0-9]{5})$'
        )
    ] = Field(
        None,
        description='This represents the identifier of the ng-eNB ID as specified in clause 9.3.1.8 of  3GPP TS 38.413. The value of the ng-eNB ID shall be encoded in hexadecimal representation.  Each character in the string shall take a value of "0" to "9", "a" to "f" or "A" to "F" and  shall represent 4 bits. The padding 0 shall be added to make multiple nibbles, so the most  significant character representing the padding 0 if required together with the 4 most  significant bits of the ng-eNB ID shall appear first in the string, and the character  representing the 4 least significant bit of the ng-eNB ID (to form a nibble) shall appear last  in the string. \n',
        example='SMacroNGeNB-34B89',
    )
    wagfId: Optional[constr(regex=r'^[A-Fa-f0-9]+$')] = Field(
        None,
        description='This represents the identifier of the W-AGF ID as specified in clause 9.3.1.162 of  3GPP TS 38.413 in hexadecimal representation. Each character in the string shall take a value  of "0" to "9", "a" to "f" or "A" to "F" and shall represent 4 bits. The most significant  character representing the 4 most significant bits of the W-AGF ID shall appear first in the  string, and the character representing the 4 least significant bit of the W-AGF ID shall  appear last in the string. \n',
    )
    tngfId: Optional[constr(regex=r'^[A-Fa-f0-9]+$')] = Field(
        None,
        description='This represents the identifier of the TNGF ID as specified in clause 9.3.1.161 of  3GPP TS 38.413  in hexadecimal representation. Each character in the string shall take a value of "0" to "9", "a"  to "f" or "A" to "F" and shall represent 4 bits. The most significant character representing the  4 most significant bits of the TNGF ID shall appear first in the string, and the character  representing the 4 least significant bit of the TNGF ID shall appear last in the string. \n',
    )
    nid: Optional[constr(regex=r'^[A-Fa-f0-9]{11}$')] = Field(
        None,
        description='This represents the Network Identifier, which together with a PLMN ID is used to identify an SNPN (see 3GPP TS 23.003 and 3GPP TS 23.501 clause 5.30.2.1). \n',
    )
    eNbId: Optional[
        constr(
            regex=r'^(MacroeNB-[A-Fa-f0-9]{5}|LMacroeNB-[A-Fa-f0-9]{6}|SMacroeNB-[A-Fa-f0-9]{5}|HomeeNB-[A-Fa-f0-9]{7})$'
        )
    ] = Field(
        None,
        description='This represents the identifier of the eNB ID as specified in clause 9.2.1.37 of  3GPP TS 36.413. The string shall be formatted with the following pattern  \'^(\'MacroeNB-[A-Fa-f0-9]{5}|LMacroeNB-[A-Fa-f0-9]{6}|SMacroeNB-[A-Fa-f0-9]{5} |HomeeNB-[A-Fa-f0-9]{7})$\'. The value of the eNB ID shall be encoded in hexadecimal representation. Each character in the  string shall take a value of "0" to "9", "a" to "f" or "A" to "F" and shall represent 4 bits.  The padding 0 shall be added to make multiple nibbles, so the most significant character  representing the padding 0 if required together with the 4 most significant bits of the eNB ID  shall appear first in the string, and the character representing the 4 least significant bit  of the eNB ID (to form a nibble) shall appear last in the string.\n',
    )


class GlobalRanNodeId2(BaseModel):
    plmnId: PlmnId1
    n3IwfId: Optional[constr(regex=r'^[A-Fa-f0-9]+$')] = Field(
        None,
        description='This represents the identifier of the N3IWF ID as specified in clause 9.3.1.57 of  3GPP TS 38.413 in hexadecimal representation. Each character in the string shall take a value  of "0" to "9", "a" to "f" or "A" to "F" and shall represent 4 bits. The most significant  character representing the 4 most significant bits of the N3IWF ID shall appear first in the  string, and the character representing the 4 least significant bit of the N3IWF ID shall  appear last in the string. \n',
    )
    gNbId: GNbId
    ngeNbId: Optional[
        constr(
            regex=r'^(MacroNGeNB-[A-Fa-f0-9]{5}|LMacroNGeNB-[A-Fa-f0-9]{6}|SMacroNGeNB-[A-Fa-f0-9]{5})$'
        )
    ] = Field(
        None,
        description='This represents the identifier of the ng-eNB ID as specified in clause 9.3.1.8 of  3GPP TS 38.413. The value of the ng-eNB ID shall be encoded in hexadecimal representation.  Each character in the string shall take a value of "0" to "9", "a" to "f" or "A" to "F" and  shall represent 4 bits. The padding 0 shall be added to make multiple nibbles, so the most  significant character representing the padding 0 if required together with the 4 most  significant bits of the ng-eNB ID shall appear first in the string, and the character  representing the 4 least significant bit of the ng-eNB ID (to form a nibble) shall appear last  in the string. \n',
        example='SMacroNGeNB-34B89',
    )
    wagfId: Optional[constr(regex=r'^[A-Fa-f0-9]+$')] = Field(
        None,
        description='This represents the identifier of the W-AGF ID as specified in clause 9.3.1.162 of  3GPP TS 38.413 in hexadecimal representation. Each character in the string shall take a value  of "0" to "9", "a" to "f" or "A" to "F" and shall represent 4 bits. The most significant  character representing the 4 most significant bits of the W-AGF ID shall appear first in the  string, and the character representing the 4 least significant bit of the W-AGF ID shall  appear last in the string. \n',
    )
    tngfId: Optional[constr(regex=r'^[A-Fa-f0-9]+$')] = Field(
        None,
        description='This represents the identifier of the TNGF ID as specified in clause 9.3.1.161 of  3GPP TS 38.413  in hexadecimal representation. Each character in the string shall take a value of "0" to "9", "a"  to "f" or "A" to "F" and shall represent 4 bits. The most significant character representing the  4 most significant bits of the TNGF ID shall appear first in the string, and the character  representing the 4 least significant bit of the TNGF ID shall appear last in the string. \n',
    )
    nid: Optional[constr(regex=r'^[A-Fa-f0-9]{11}$')] = Field(
        None,
        description='This represents the Network Identifier, which together with a PLMN ID is used to identify an SNPN (see 3GPP TS 23.003 and 3GPP TS 23.501 clause 5.30.2.1). \n',
    )
    eNbId: Optional[
        constr(
            regex=r'^(MacroeNB-[A-Fa-f0-9]{5}|LMacroeNB-[A-Fa-f0-9]{6}|SMacroeNB-[A-Fa-f0-9]{5}|HomeeNB-[A-Fa-f0-9]{7})$'
        )
    ] = Field(
        None,
        description='This represents the identifier of the eNB ID as specified in clause 9.2.1.37 of  3GPP TS 36.413. The string shall be formatted with the following pattern  \'^(\'MacroeNB-[A-Fa-f0-9]{5}|LMacroeNB-[A-Fa-f0-9]{6}|SMacroeNB-[A-Fa-f0-9]{5} |HomeeNB-[A-Fa-f0-9]{7})$\'. The value of the eNB ID shall be encoded in hexadecimal representation. Each character in the  string shall take a value of "0" to "9", "a" to "f" or "A" to "F" and shall represent 4 bits.  The padding 0 shall be added to make multiple nibbles, so the most significant character  representing the padding 0 if required together with the 4 most significant bits of the eNB ID  shall appear first in the string, and the character representing the 4 least significant bit  of the eNB ID (to form a nibble) shall appear last in the string.\n',
    )


class GlobalRanNodeId3(BaseModel):
    plmnId: PlmnId1
    n3IwfId: Optional[constr(regex=r'^[A-Fa-f0-9]+$')] = Field(
        None,
        description='This represents the identifier of the N3IWF ID as specified in clause 9.3.1.57 of  3GPP TS 38.413 in hexadecimal representation. Each character in the string shall take a value  of "0" to "9", "a" to "f" or "A" to "F" and shall represent 4 bits. The most significant  character representing the 4 most significant bits of the N3IWF ID shall appear first in the  string, and the character representing the 4 least significant bit of the N3IWF ID shall  appear last in the string. \n',
    )
    gNbId: Optional[GNbId] = None
    ngeNbId: constr(
        regex=r'^(MacroNGeNB-[A-Fa-f0-9]{5}|LMacroNGeNB-[A-Fa-f0-9]{6}|SMacroNGeNB-[A-Fa-f0-9]{5})$'
    ) = Field(
        ...,
        description='This represents the identifier of the ng-eNB ID as specified in clause 9.3.1.8 of  3GPP TS 38.413. The value of the ng-eNB ID shall be encoded in hexadecimal representation.  Each character in the string shall take a value of "0" to "9", "a" to "f" or "A" to "F" and  shall represent 4 bits. The padding 0 shall be added to make multiple nibbles, so the most  significant character representing the padding 0 if required together with the 4 most  significant bits of the ng-eNB ID shall appear first in the string, and the character  representing the 4 least significant bit of the ng-eNB ID (to form a nibble) shall appear last  in the string. \n',
        example='SMacroNGeNB-34B89',
    )
    wagfId: Optional[constr(regex=r'^[A-Fa-f0-9]+$')] = Field(
        None,
        description='This represents the identifier of the W-AGF ID as specified in clause 9.3.1.162 of  3GPP TS 38.413 in hexadecimal representation. Each character in the string shall take a value  of "0" to "9", "a" to "f" or "A" to "F" and shall represent 4 bits. The most significant  character representing the 4 most significant bits of the W-AGF ID shall appear first in the  string, and the character representing the 4 least significant bit of the W-AGF ID shall  appear last in the string. \n',
    )
    tngfId: Optional[constr(regex=r'^[A-Fa-f0-9]+$')] = Field(
        None,
        description='This represents the identifier of the TNGF ID as specified in clause 9.3.1.161 of  3GPP TS 38.413  in hexadecimal representation. Each character in the string shall take a value of "0" to "9", "a"  to "f" or "A" to "F" and shall represent 4 bits. The most significant character representing the  4 most significant bits of the TNGF ID shall appear first in the string, and the character  representing the 4 least significant bit of the TNGF ID shall appear last in the string. \n',
    )
    nid: Optional[constr(regex=r'^[A-Fa-f0-9]{11}$')] = Field(
        None,
        description='This represents the Network Identifier, which together with a PLMN ID is used to identify an SNPN (see 3GPP TS 23.003 and 3GPP TS 23.501 clause 5.30.2.1). \n',
    )
    eNbId: Optional[
        constr(
            regex=r'^(MacroeNB-[A-Fa-f0-9]{5}|LMacroeNB-[A-Fa-f0-9]{6}|SMacroeNB-[A-Fa-f0-9]{5}|HomeeNB-[A-Fa-f0-9]{7})$'
        )
    ] = Field(
        None,
        description='This represents the identifier of the eNB ID as specified in clause 9.2.1.37 of  3GPP TS 36.413. The string shall be formatted with the following pattern  \'^(\'MacroeNB-[A-Fa-f0-9]{5}|LMacroeNB-[A-Fa-f0-9]{6}|SMacroeNB-[A-Fa-f0-9]{5} |HomeeNB-[A-Fa-f0-9]{7})$\'. The value of the eNB ID shall be encoded in hexadecimal representation. Each character in the  string shall take a value of "0" to "9", "a" to "f" or "A" to "F" and shall represent 4 bits.  The padding 0 shall be added to make multiple nibbles, so the most significant character  representing the padding 0 if required together with the 4 most significant bits of the eNB ID  shall appear first in the string, and the character representing the 4 least significant bit  of the eNB ID (to form a nibble) shall appear last in the string.\n',
    )


class GlobalRanNodeId4(BaseModel):
    plmnId: PlmnId1
    n3IwfId: Optional[constr(regex=r'^[A-Fa-f0-9]+$')] = Field(
        None,
        description='This represents the identifier of the N3IWF ID as specified in clause 9.3.1.57 of  3GPP TS 38.413 in hexadecimal representation. Each character in the string shall take a value  of "0" to "9", "a" to "f" or "A" to "F" and shall represent 4 bits. The most significant  character representing the 4 most significant bits of the N3IWF ID shall appear first in the  string, and the character representing the 4 least significant bit of the N3IWF ID shall  appear last in the string. \n',
    )
    gNbId: Optional[GNbId] = None
    ngeNbId: Optional[
        constr(
            regex=r'^(MacroNGeNB-[A-Fa-f0-9]{5}|LMacroNGeNB-[A-Fa-f0-9]{6}|SMacroNGeNB-[A-Fa-f0-9]{5})$'
        )
    ] = Field(
        None,
        description='This represents the identifier of the ng-eNB ID as specified in clause 9.3.1.8 of  3GPP TS 38.413. The value of the ng-eNB ID shall be encoded in hexadecimal representation.  Each character in the string shall take a value of "0" to "9", "a" to "f" or "A" to "F" and  shall represent 4 bits. The padding 0 shall be added to make multiple nibbles, so the most  significant character representing the padding 0 if required together with the 4 most  significant bits of the ng-eNB ID shall appear first in the string, and the character  representing the 4 least significant bit of the ng-eNB ID (to form a nibble) shall appear last  in the string. \n',
        example='SMacroNGeNB-34B89',
    )
    wagfId: constr(regex=r'^[A-Fa-f0-9]+$') = Field(
        ...,
        description='This represents the identifier of the W-AGF ID as specified in clause 9.3.1.162 of  3GPP TS 38.413 in hexadecimal representation. Each character in the string shall take a value  of "0" to "9", "a" to "f" or "A" to "F" and shall represent 4 bits. The most significant  character representing the 4 most significant bits of the W-AGF ID shall appear first in the  string, and the character representing the 4 least significant bit of the W-AGF ID shall  appear last in the string. \n',
    )
    tngfId: Optional[constr(regex=r'^[A-Fa-f0-9]+$')] = Field(
        None,
        description='This represents the identifier of the TNGF ID as specified in clause 9.3.1.161 of  3GPP TS 38.413  in hexadecimal representation. Each character in the string shall take a value of "0" to "9", "a"  to "f" or "A" to "F" and shall represent 4 bits. The most significant character representing the  4 most significant bits of the TNGF ID shall appear first in the string, and the character  representing the 4 least significant bit of the TNGF ID shall appear last in the string. \n',
    )
    nid: Optional[constr(regex=r'^[A-Fa-f0-9]{11}$')] = Field(
        None,
        description='This represents the Network Identifier, which together with a PLMN ID is used to identify an SNPN (see 3GPP TS 23.003 and 3GPP TS 23.501 clause 5.30.2.1). \n',
    )
    eNbId: Optional[
        constr(
            regex=r'^(MacroeNB-[A-Fa-f0-9]{5}|LMacroeNB-[A-Fa-f0-9]{6}|SMacroeNB-[A-Fa-f0-9]{5}|HomeeNB-[A-Fa-f0-9]{7})$'
        )
    ] = Field(
        None,
        description='This represents the identifier of the eNB ID as specified in clause 9.2.1.37 of  3GPP TS 36.413. The string shall be formatted with the following pattern  \'^(\'MacroeNB-[A-Fa-f0-9]{5}|LMacroeNB-[A-Fa-f0-9]{6}|SMacroeNB-[A-Fa-f0-9]{5} |HomeeNB-[A-Fa-f0-9]{7})$\'. The value of the eNB ID shall be encoded in hexadecimal representation. Each character in the  string shall take a value of "0" to "9", "a" to "f" or "A" to "F" and shall represent 4 bits.  The padding 0 shall be added to make multiple nibbles, so the most significant character  representing the padding 0 if required together with the 4 most significant bits of the eNB ID  shall appear first in the string, and the character representing the 4 least significant bit  of the eNB ID (to form a nibble) shall appear last in the string.\n',
    )


class GlobalRanNodeId5(BaseModel):
    plmnId: PlmnId1
    n3IwfId: Optional[constr(regex=r'^[A-Fa-f0-9]+$')] = Field(
        None,
        description='This represents the identifier of the N3IWF ID as specified in clause 9.3.1.57 of  3GPP TS 38.413 in hexadecimal representation. Each character in the string shall take a value  of "0" to "9", "a" to "f" or "A" to "F" and shall represent 4 bits. The most significant  character representing the 4 most significant bits of the N3IWF ID shall appear first in the  string, and the character representing the 4 least significant bit of the N3IWF ID shall  appear last in the string. \n',
    )
    gNbId: Optional[GNbId] = None
    ngeNbId: Optional[
        constr(
            regex=r'^(MacroNGeNB-[A-Fa-f0-9]{5}|LMacroNGeNB-[A-Fa-f0-9]{6}|SMacroNGeNB-[A-Fa-f0-9]{5})$'
        )
    ] = Field(
        None,
        description='This represents the identifier of the ng-eNB ID as specified in clause 9.3.1.8 of  3GPP TS 38.413. The value of the ng-eNB ID shall be encoded in hexadecimal representation.  Each character in the string shall take a value of "0" to "9", "a" to "f" or "A" to "F" and  shall represent 4 bits. The padding 0 shall be added to make multiple nibbles, so the most  significant character representing the padding 0 if required together with the 4 most  significant bits of the ng-eNB ID shall appear first in the string, and the character  representing the 4 least significant bit of the ng-eNB ID (to form a nibble) shall appear last  in the string. \n',
        example='SMacroNGeNB-34B89',
    )
    wagfId: Optional[constr(regex=r'^[A-Fa-f0-9]+$')] = Field(
        None,
        description='This represents the identifier of the W-AGF ID as specified in clause 9.3.1.162 of  3GPP TS 38.413 in hexadecimal representation. Each character in the string shall take a value  of "0" to "9", "a" to "f" or "A" to "F" and shall represent 4 bits. The most significant  character representing the 4 most significant bits of the W-AGF ID shall appear first in the  string, and the character representing the 4 least significant bit of the W-AGF ID shall  appear last in the string. \n',
    )
    tngfId: constr(regex=r'^[A-Fa-f0-9]+$') = Field(
        ...,
        description='This represents the identifier of the TNGF ID as specified in clause 9.3.1.161 of  3GPP TS 38.413  in hexadecimal representation. Each character in the string shall take a value of "0" to "9", "a"  to "f" or "A" to "F" and shall represent 4 bits. The most significant character representing the  4 most significant bits of the TNGF ID shall appear first in the string, and the character  representing the 4 least significant bit of the TNGF ID shall appear last in the string. \n',
    )
    nid: Optional[constr(regex=r'^[A-Fa-f0-9]{11}$')] = Field(
        None,
        description='This represents the Network Identifier, which together with a PLMN ID is used to identify an SNPN (see 3GPP TS 23.003 and 3GPP TS 23.501 clause 5.30.2.1). \n',
    )
    eNbId: Optional[
        constr(
            regex=r'^(MacroeNB-[A-Fa-f0-9]{5}|LMacroeNB-[A-Fa-f0-9]{6}|SMacroeNB-[A-Fa-f0-9]{5}|HomeeNB-[A-Fa-f0-9]{7})$'
        )
    ] = Field(
        None,
        description='This represents the identifier of the eNB ID as specified in clause 9.2.1.37 of  3GPP TS 36.413. The string shall be formatted with the following pattern  \'^(\'MacroeNB-[A-Fa-f0-9]{5}|LMacroeNB-[A-Fa-f0-9]{6}|SMacroeNB-[A-Fa-f0-9]{5} |HomeeNB-[A-Fa-f0-9]{7})$\'. The value of the eNB ID shall be encoded in hexadecimal representation. Each character in the  string shall take a value of "0" to "9", "a" to "f" or "A" to "F" and shall represent 4 bits.  The padding 0 shall be added to make multiple nibbles, so the most significant character  representing the padding 0 if required together with the 4 most significant bits of the eNB ID  shall appear first in the string, and the character representing the 4 least significant bit  of the eNB ID (to form a nibble) shall appear last in the string.\n',
    )


class GlobalRanNodeId6(BaseModel):
    plmnId: PlmnId1
    n3IwfId: Optional[constr(regex=r'^[A-Fa-f0-9]+$')] = Field(
        None,
        description='This represents the identifier of the N3IWF ID as specified in clause 9.3.1.57 of  3GPP TS 38.413 in hexadecimal representation. Each character in the string shall take a value  of "0" to "9", "a" to "f" or "A" to "F" and shall represent 4 bits. The most significant  character representing the 4 most significant bits of the N3IWF ID shall appear first in the  string, and the character representing the 4 least significant bit of the N3IWF ID shall  appear last in the string. \n',
    )
    gNbId: Optional[GNbId] = None
    ngeNbId: Optional[
        constr(
            regex=r'^(MacroNGeNB-[A-Fa-f0-9]{5}|LMacroNGeNB-[A-Fa-f0-9]{6}|SMacroNGeNB-[A-Fa-f0-9]{5})$'
        )
    ] = Field(
        None,
        description='This represents the identifier of the ng-eNB ID as specified in clause 9.3.1.8 of  3GPP TS 38.413. The value of the ng-eNB ID shall be encoded in hexadecimal representation.  Each character in the string shall take a value of "0" to "9", "a" to "f" or "A" to "F" and  shall represent 4 bits. The padding 0 shall be added to make multiple nibbles, so the most  significant character representing the padding 0 if required together with the 4 most  significant bits of the ng-eNB ID shall appear first in the string, and the character  representing the 4 least significant bit of the ng-eNB ID (to form a nibble) shall appear last  in the string. \n',
        example='SMacroNGeNB-34B89',
    )
    wagfId: Optional[constr(regex=r'^[A-Fa-f0-9]+$')] = Field(
        None,
        description='This represents the identifier of the W-AGF ID as specified in clause 9.3.1.162 of  3GPP TS 38.413 in hexadecimal representation. Each character in the string shall take a value  of "0" to "9", "a" to "f" or "A" to "F" and shall represent 4 bits. The most significant  character representing the 4 most significant bits of the W-AGF ID shall appear first in the  string, and the character representing the 4 least significant bit of the W-AGF ID shall  appear last in the string. \n',
    )
    tngfId: Optional[constr(regex=r'^[A-Fa-f0-9]+$')] = Field(
        None,
        description='This represents the identifier of the TNGF ID as specified in clause 9.3.1.161 of  3GPP TS 38.413  in hexadecimal representation. Each character in the string shall take a value of "0" to "9", "a"  to "f" or "A" to "F" and shall represent 4 bits. The most significant character representing the  4 most significant bits of the TNGF ID shall appear first in the string, and the character  representing the 4 least significant bit of the TNGF ID shall appear last in the string. \n',
    )
    nid: Optional[constr(regex=r'^[A-Fa-f0-9]{11}$')] = Field(
        None,
        description='This represents the Network Identifier, which together with a PLMN ID is used to identify an SNPN (see 3GPP TS 23.003 and 3GPP TS 23.501 clause 5.30.2.1). \n',
    )
    eNbId: constr(
        regex=r'^(MacroeNB-[A-Fa-f0-9]{5}|LMacroeNB-[A-Fa-f0-9]{6}|SMacroeNB-[A-Fa-f0-9]{5}|HomeeNB-[A-Fa-f0-9]{7})$'
    ) = Field(
        ...,
        description='This represents the identifier of the eNB ID as specified in clause 9.2.1.37 of  3GPP TS 36.413. The string shall be formatted with the following pattern  \'^(\'MacroeNB-[A-Fa-f0-9]{5}|LMacroeNB-[A-Fa-f0-9]{6}|SMacroeNB-[A-Fa-f0-9]{5} |HomeeNB-[A-Fa-f0-9]{7})$\'. The value of the eNB ID shall be encoded in hexadecimal representation. Each character in the  string shall take a value of "0" to "9", "a" to "f" or "A" to "F" and shall represent 4 bits.  The padding 0 shall be added to make multiple nibbles, so the most significant character  representing the padding 0 if required together with the 4 most significant bits of the eNB ID  shall appear first in the string, and the character representing the 4 least significant bit  of the eNB ID (to form a nibble) shall appear last in the string.\n',
    )


class WirelineArea(BaseModel):
    globalLineIds: Optional[List[str]] = Field(None, min_items=1)
    hfcNIds: Optional[List[constr(max_length=6)]] = Field(None, min_items=1)
    areaCodeB: Optional[str] = Field(None, description='Values are operator specific.')
    areaCodeC: Optional[str] = Field(None, description='Values are operator specific.')
    combGciAndHfcNIds: Optional[List[CombGciAndHfcNIds]] = Field(None, min_items=1)


class WirelineServiceAreaRestriction(BaseModel):
    restrictionType: Optional[
        Union[Literal['ALLOWED_AREAS', 'NOT_ALLOWED_AREAS'], str]
    ] = Field(
        None,
        description='It contains the restriction type ALLOWED_AREAS or NOT_ALLOWED_AREAS.',
    )
    areas: Optional[List[WirelineArea]] = None


class Pc5FlowBitRates(BaseModel):
    guaFbr: Optional[constr(regex=r'^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$')] = Field(
        None,
        description='String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix "K" is used to represent the standard symbol "k".\n',
    )
    maxFbr: Optional[constr(regex=r'^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$')] = Field(
        None,
        description='String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix "K" is used to represent the standard symbol "k".\n',
    )


class UtraLocation1(BaseModel):
    cgi: CellGlobalId
    sai: Optional[ServiceAreaId] = None
    lai: Optional[LocationAreaId] = None
    rai: Optional[RoutingAreaId] = None
    ageOfLocationInformation: Optional[conint(ge=0, le=32767)] = Field(
        None,
        description='The value represents the elapsed time in minutes since the last network contact of the mobile station.  Value "0" indicates that the location information was obtained after a successful paging procedure for  Active Location Retrieval when the UE is in idle mode\n or after a successful location reporting procedure  the UE is in connected mode. Any\nother value than "0" indicates that the location information is the last known one.  See 3GPP TS 29.002 clause 17.7.8.\n',
    )
    ueLocationTimestamp: Optional[datetime] = Field(
        None, description="string with format 'date-time' as defined in OpenAPI."
    )
    geographicalInformation: Optional[constr(regex=r'^[0-9A-F]{16}$')] = Field(
        None,
        description='Refer to geographical Information.See 3GPP TS 23.032 clause 7.3.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used.\n',
    )
    geodeticInformation: Optional[constr(regex=r'^[0-9A-F]{20}$')] = Field(
        None,
        description='Refers to Calling Geodetic Location. See ITU-T\xa0Recommendation Q.763 (1999) clause 3.88.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used.\n',
    )


class UtraLocation2(BaseModel):
    cgi: Optional[CellGlobalId] = None
    sai: ServiceAreaId
    lai: Optional[LocationAreaId] = None
    rai: Optional[RoutingAreaId] = None
    ageOfLocationInformation: Optional[conint(ge=0, le=32767)] = Field(
        None,
        description='The value represents the elapsed time in minutes since the last network contact of the mobile station.  Value "0" indicates that the location information was obtained after a successful paging procedure for  Active Location Retrieval when the UE is in idle mode\n or after a successful location reporting procedure  the UE is in connected mode. Any\nother value than "0" indicates that the location information is the last known one.  See 3GPP TS 29.002 clause 17.7.8.\n',
    )
    ueLocationTimestamp: Optional[datetime] = Field(
        None, description="string with format 'date-time' as defined in OpenAPI."
    )
    geographicalInformation: Optional[constr(regex=r'^[0-9A-F]{16}$')] = Field(
        None,
        description='Refer to geographical Information.See 3GPP TS 23.032 clause 7.3.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used.\n',
    )
    geodeticInformation: Optional[constr(regex=r'^[0-9A-F]{20}$')] = Field(
        None,
        description='Refers to Calling Geodetic Location. See ITU-T\xa0Recommendation Q.763 (1999) clause 3.88.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used.\n',
    )


class UtraLocation3(BaseModel):
    cgi: Optional[CellGlobalId] = None
    sai: Optional[ServiceAreaId] = None
    lai: Optional[LocationAreaId] = None
    rai: RoutingAreaId
    ageOfLocationInformation: Optional[conint(ge=0, le=32767)] = Field(
        None,
        description='The value represents the elapsed time in minutes since the last network contact of the mobile station.  Value "0" indicates that the location information was obtained after a successful paging procedure for  Active Location Retrieval when the UE is in idle mode\n or after a successful location reporting procedure  the UE is in connected mode. Any\nother value than "0" indicates that the location information is the last known one.  See 3GPP TS 29.002 clause 17.7.8.\n',
    )
    ueLocationTimestamp: Optional[datetime] = Field(
        None, description="string with format 'date-time' as defined in OpenAPI."
    )
    geographicalInformation: Optional[constr(regex=r'^[0-9A-F]{16}$')] = Field(
        None,
        description='Refer to geographical Information.See 3GPP TS 23.032 clause 7.3.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used.\n',
    )
    geodeticInformation: Optional[constr(regex=r'^[0-9A-F]{20}$')] = Field(
        None,
        description='Refers to Calling Geodetic Location. See ITU-T\xa0Recommendation Q.763 (1999) clause 3.88.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used.\n',
    )


class GeraLocation1(BaseModel):
    locationNumber: Optional[str] = Field(
        None,
        description='Location number within the PLMN. See 3GPP TS 23.003, clause 4.5.',
    )
    cgi: CellGlobalId
    sai: Optional[ServiceAreaId] = None
    lai: Optional[LocationAreaId] = None
    rai: Optional[RoutingAreaId] = None
    vlrNumber: Optional[str] = Field(
        None, description='VLR number. See 3GPP TS 23.003 clause 5.1.'
    )
    mscNumber: Optional[str] = Field(
        None, description='MSC number. See 3GPP TS 23.003 clause 5.1.'
    )
    ageOfLocationInformation: Optional[conint(ge=0, le=32767)] = Field(
        None,
        description='The value represents the elapsed time in minutes since the last network contact of the mobile station. Value "0" indicates that the location information was obtained after a successful paging procedure for  Active Location Retrieval when the UE is in idle mode or after a successful location reporting procedure the UE is in connected mode. Any other value than "0" indicates that the location information is the last known one. See 3GPP TS 29.002 clause 17.7.8.\n',
    )
    ueLocationTimestamp: Optional[datetime] = Field(
        None, description="string with format 'date-time' as defined in OpenAPI."
    )
    geographicalInformation: Optional[constr(regex=r'^[0-9A-F]{16}$')] = Field(
        None,
        description='Refer to geographical Information.See 3GPP TS 23.032 clause 7.3.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used.\n',
    )
    geodeticInformation: Optional[constr(regex=r'^[0-9A-F]{20}$')] = Field(
        None,
        description='Refers to Calling Geodetic Location.See ITU-T Recommendation Q.763 (1999) clause 3.88.2.  Only the description of an ellipsoid point with uncertainty circle is allowed to be used.\n',
    )


class GeraLocation2(BaseModel):
    locationNumber: Optional[str] = Field(
        None,
        description='Location number within the PLMN. See 3GPP TS 23.003, clause 4.5.',
    )
    cgi: Optional[CellGlobalId] = None
    sai: ServiceAreaId
    lai: Optional[LocationAreaId] = None
    rai: Optional[RoutingAreaId] = None
    vlrNumber: Optional[str] = Field(
        None, description='VLR number. See 3GPP TS 23.003 clause 5.1.'
    )
    mscNumber: Optional[str] = Field(
        None, description='MSC number. See 3GPP TS 23.003 clause 5.1.'
    )
    ageOfLocationInformation: Optional[conint(ge=0, le=32767)] = Field(
        None,
        description='The value represents the elapsed time in minutes since the last network contact of the mobile station. Value "0" indicates that the location information was obtained after a successful paging procedure for  Active Location Retrieval when the UE is in idle mode or after a successful location reporting procedure the UE is in connected mode. Any other value than "0" indicates that the location information is the last known one. See 3GPP TS 29.002 clause 17.7.8.\n',
    )
    ueLocationTimestamp: Optional[datetime] = Field(
        None, description="string with format 'date-time' as defined in OpenAPI."
    )
    geographicalInformation: Optional[constr(regex=r'^[0-9A-F]{16}$')] = Field(
        None,
        description='Refer to geographical Information.See 3GPP TS 23.032 clause 7.3.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used.\n',
    )
    geodeticInformation: Optional[constr(regex=r'^[0-9A-F]{20}$')] = Field(
        None,
        description='Refers to Calling Geodetic Location.See ITU-T Recommendation Q.763 (1999) clause 3.88.2.  Only the description of an ellipsoid point with uncertainty circle is allowed to be used.\n',
    )


class GeraLocation3(BaseModel):
    locationNumber: Optional[str] = Field(
        None,
        description='Location number within the PLMN. See 3GPP TS 23.003, clause 4.5.',
    )
    cgi: Optional[CellGlobalId] = None
    sai: Optional[ServiceAreaId] = None
    lai: LocationAreaId
    rai: Optional[RoutingAreaId] = None
    vlrNumber: Optional[str] = Field(
        None, description='VLR number. See 3GPP TS 23.003 clause 5.1.'
    )
    mscNumber: Optional[str] = Field(
        None, description='MSC number. See 3GPP TS 23.003 clause 5.1.'
    )
    ageOfLocationInformation: Optional[conint(ge=0, le=32767)] = Field(
        None,
        description='The value represents the elapsed time in minutes since the last network contact of the mobile station. Value "0" indicates that the location information was obtained after a successful paging procedure for  Active Location Retrieval when the UE is in idle mode or after a successful location reporting procedure the UE is in connected mode. Any other value than "0" indicates that the location information is the last known one. See 3GPP TS 29.002 clause 17.7.8.\n',
    )
    ueLocationTimestamp: Optional[datetime] = Field(
        None, description="string with format 'date-time' as defined in OpenAPI."
    )
    geographicalInformation: Optional[constr(regex=r'^[0-9A-F]{16}$')] = Field(
        None,
        description='Refer to geographical Information.See 3GPP TS 23.032 clause 7.3.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used.\n',
    )
    geodeticInformation: Optional[constr(regex=r'^[0-9A-F]{20}$')] = Field(
        None,
        description='Refers to Calling Geodetic Location.See ITU-T Recommendation Q.763 (1999) clause 3.88.2.  Only the description of an ellipsoid point with uncertainty circle is allowed to be used.\n',
    )


class SnssaiExtension(BaseModel):
    sdRanges: Optional[List[SdRange]] = Field(
        None,
        description='When present, it shall contain the range(s) of Slice Differentiator values supported for the Slice/Service Type value indicated in the sst attribute of the Snssai data type\n',
        min_items=1,
    )
    wildcardSd: Optional[Literal[True]] = Field(
        None,
        description='When present, it shall be set to true, to indicate that all SD values are supported for the Slice/Service Type value indicated in the sst attribute of the Snssai data type.\n',
    )


class EcsServerAddr(BaseModel):
    ecsFqdnList: Optional[
        List[
            constr(
                regex=r'^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$',
                min_length=4,
                max_length=253,
            )
        ]
    ] = Field(None, min_items=1)
    ecsIpAddressList: Optional[List[Union[IpAddr2, IpAddr3, IpAddr4]]] = Field(
        None, min_items=1
    )
    ecsUriList: Optional[List[str]] = Field(None, min_items=1)
    ecsProviderId: Optional[str] = None


class EcsServerAddrRm(BaseModel):
    __root__: Union[EcsServerAddr,] = Field(
        ...,
        description="This data type is defined in the same way as the ' EcsServerAddr ' data type, but with the OpenAPI 'nullable: true' property.\n",
    )


class SpatialValidityCond(BaseModel):
    trackingAreaList: Optional[List[Tai1]] = Field(None, min_items=1)
    countries: Optional[List[constr(regex=r'^\d{3}$')]] = Field(None, min_items=1)
    geographicalServiceArea: Optional[GeoServiceArea] = None


class SpatialValidityCondRm(BaseModel):
    __root__: Union[SpatialValidityCond,] = Field(
        ..., description='Contains the Spatial Validity Condition or the null value.'
    )


class EasIpReplacementInfo(BaseModel):
    source: EasServerAddress
    target: EasServerAddress


class ExtSnssai(Snssai1, SnssaiExtension):
    pass


class ProtocolDescription(BaseModel):
    transportProto: Optional[Union[Literal['RTP', 'SRTP'], str]] = Field(
        None,
        description='The enumeration MediaTransportProto indicates the transport protocol used for a media flow.\n',
    )
    rtpHeaderExtInfo: Optional[RtpHeaderExtInfo] = None
    rtpPayloadInfoList: Optional[List[RtpPayloadInfo]] = Field(None, min_items=1)


class AreaScopeModel(BaseModel):
    eutraCellIdList: Optional[List[constr(regex=r'^[A-Fa-f0-9]{7}$')]] = Field(
        None, min_items=1
    )
    nrCellIdList: Optional[List[constr(regex=r'^[A-Fa-f0-9]{9}$')]] = Field(
        None, min_items=1
    )
    tacList: Optional[List[constr(regex=r'(^[A-Fa-f0-9]{4}$)|(^[A-Fa-f0-9]{6}$)')]] = (
        Field(None, min_items=1)
    )
    tacInfoPerPlmn: Optional[Dict[str, TacInfo]] = Field(
        None,
        description='A map (list of key-value pairs) where PlmnId converted to a string serves as key\n',
    )
    cagInfoPerPlmn: Optional[Dict[str, CagInfo]] = Field(
        None,
        description='A map (list of key-value pairs) where PlmnId converted to a string serves as key\n',
    )
    nidInfoPerPlmn: Optional[Dict[str, NidInfo]] = Field(
        None,
        description='A map (list of key-value pairs) where PlmnId converted to a string serves as key\n',
    )


class QmcConfigInfo(BaseModel):
    qoeReference: constr(regex=r'^[0-9]{3}-[0-9]{2,3}-[A-Fa-f0-9]{6}$') = Field(
        ...,
        description='String containing MCC (3 digits), MNC (2 or 3 digits)  and QMC ID (3 octets, encoded as 6 hexadecimal digits).\n',
    )
    serviceType: Optional[Union[Literal['DASH', 'MTSI', 'VR'], str]] = Field(
        None,
        description='The enumeration QoeServiceType indicates the kind of service that shall be recorded for QMC. It shall comply with the provisions defined in TS 29.571, table 5.6.3.21-1.\n',
    )
    sliceScope: Optional[List[Snssai1]] = Field(None, min_items=1)
    areaScope: Optional[QmcAreaScope] = None
    qoeCollectionEntityAddress: Optional[Union[IpAddr2, IpAddr3, IpAddr4]] = Field(
        None, description='Contains an IP adresse.'
    )
    qoeTarget: Optional[QoeTarget] = None
    mdtAlignmentInfo: Optional[Any] = Field(
        None,
        description='String containing:\n- Trace Reference: MCC (3 digits), MNC (2 or 3 digits), \n  Trace ID (3 octets, encoded as 6 hexadecimal digits)\n- Trace Recording Session Reference (2 octets, encoded as 4 hexadecimal digits)\n',
    )
    availableRanVisibleQoeMetrics: Optional[
        List[
            Union[
                Literal[
                    'APPLICATION_LAYER_BUFFER_LEVEL_LIST',
                    'PLAYOUT_DELAY_FOR_MEDIA_STARTUP',
                ],
                str,
            ]
        ]
    ] = Field(None, min_items=1)
    containerForAppLayerMeasConfig: Optional[str] = Field(
        None, description="string with format 'bytes' as defined in OpenAPI"
    )
    mbsCommunicationServiceType: Optional[
        Union[Literal['MULTICAST', 'BROADCAST'], str]
    ] = Field(None, description='Indicates the MBS service type of an MBS session')


class SecondaryRatUsageReport(BaseModel):
    secondaryRatType: Union[
        Literal[
            'NR',
            'EUTRA',
            'WLAN',
            'VIRTUAL',
            'NBIOT',
            'WIRELINE',
            'WIRELINE_CABLE',
            'WIRELINE_BBF',
            'LTE-M',
            'NR_U',
            'EUTRA_U',
            'TRUSTED_N3GA',
            'TRUSTED_WLAN',
            'UTRA',
            'GERA',
            'NR_LEO',
            'NR_MEO',
            'NR_GEO',
            'NR_OTHER_SAT',
            'NR_REDCAP',
            'WB_E_UTRAN_LEO',
            'WB_E_UTRAN_MEO',
            'WB_E_UTRAN_GEO',
            'WB_E_UTRAN_OTHERSAT',
            'NB_IOT_LEO',
            'NB_IOT_MEO',
            'NB_IOT_GEO',
            'NB_IOT_OTHERSAT',
            'LTE_M_LEO',
            'LTE_M_MEO',
            'LTE_M_GEO',
            'LTE_M_OTHERSAT',
            'NR_EREDCAP',
        ],
        str,
    ] = Field(..., description='Indicates the radio access used.')
    qosFlowsUsageData: List[QosFlowUsageReport] = Field(..., min_items=1)


class SecondaryRatUsageInfo(BaseModel):
    secondaryRatType: Union[
        Literal[
            'NR',
            'EUTRA',
            'WLAN',
            'VIRTUAL',
            'NBIOT',
            'WIRELINE',
            'WIRELINE_CABLE',
            'WIRELINE_BBF',
            'LTE-M',
            'NR_U',
            'EUTRA_U',
            'TRUSTED_N3GA',
            'TRUSTED_WLAN',
            'UTRA',
            'GERA',
            'NR_LEO',
            'NR_MEO',
            'NR_GEO',
            'NR_OTHER_SAT',
            'NR_REDCAP',
            'WB_E_UTRAN_LEO',
            'WB_E_UTRAN_MEO',
            'WB_E_UTRAN_GEO',
            'WB_E_UTRAN_OTHERSAT',
            'NB_IOT_LEO',
            'NB_IOT_MEO',
            'NB_IOT_GEO',
            'NB_IOT_OTHERSAT',
            'LTE_M_LEO',
            'LTE_M_MEO',
            'LTE_M_GEO',
            'LTE_M_OTHERSAT',
            'NR_EREDCAP',
        ],
        str,
    ] = Field(..., description='Indicates the radio access used.')
    qosFlowsUsageData: Optional[List[QosFlowUsageReport]] = Field(None, min_items=1)
    pduSessionUsageData: Optional[List[VolumeTimedReport]] = Field(None, min_items=1)


class MbsSessionId1(BaseModel):
    tmgi: Tmgi
    ssm: Optional[Ssm] = None
    nid: Optional[constr(regex=r'^[A-Fa-f0-9]{11}$')] = Field(
        None,
        description='This represents the Network Identifier, which together with a PLMN ID is used to identify an SNPN (see 3GPP TS 23.003 and 3GPP TS 23.501 clause 5.30.2.1). \n',
    )


class MbsSessionId2(BaseModel):
    tmgi: Optional[Tmgi] = None
    ssm: Ssm
    nid: Optional[constr(regex=r'^[A-Fa-f0-9]{11}$')] = Field(
        None,
        description='This represents the Network Identifier, which together with a PLMN ID is used to identify an SNPN (see 3GPP TS 23.003 and 3GPP TS 23.501 clause 5.30.2.1). \n',
    )


class MbsServiceArea1(BaseModel):
    ncgiList: List[NcgiTai] = Field(..., description='List of NR cell Ids', min_items=1)
    taiList: Optional[List[Tai1]] = Field(
        None, description='List of tracking area Ids', min_items=1
    )


class MbsServiceArea2(BaseModel):
    ncgiList: Optional[List[NcgiTai]] = Field(
        None, description='List of NR cell Ids', min_items=1
    )
    taiList: List[Tai1] = Field(
        ..., description='List of tracking area Ids', min_items=1
    )


class MbsSessionSubscription(BaseModel):
    mbsSessionId: Optional[Union[MbsSessionId1, MbsSessionId2]] = Field(
        None, description='MBS Session Identifier'
    )
    areaSessionId: Optional[conint(ge=0, le=65535)] = Field(
        None,
        description='Integer where the allowed values correspond to the value range of an unsigned 16-bit integer.\n',
    )
    eventList: List[MbsSessionEvent] = Field(..., min_items=1)
    notifyUri: str = Field(
        ..., description='String providing an URI formatted according to RFC 3986.'
    )
    notifyCorrelationId: Optional[str] = None
    expiryTime: Optional[datetime] = Field(
        None, description="string with format 'date-time' as defined in OpenAPI."
    )
    nfcInstanceId: Optional[UUID] = Field(
        None,
        description='String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122. \n',
    )
    mbsSessionSubscUri: Optional[str] = Field(
        None, description='String providing an URI formatted according to RFC 3986.'
    )


class MbsSessionEventReport(BaseModel):
    eventType: Union[
        Literal[
            'MBS_REL_TMGI_EXPIRY',
            'BROADCAST_DELIVERY_STATUS',
            'INGRESS_TUNNEL_ADD_CHANGE',
        ],
        str,
    ] = Field(..., description='MBS Session Event Type')
    timeStamp: Optional[datetime] = Field(
        None, description="string with format 'date-time' as defined in OpenAPI."
    )
    ingressTunAddrInfo: Optional[IngressTunAddrInfo] = None
    broadcastDelStatus: Optional[Union[Literal['STARTED', 'TERMINATED'], str]] = Field(
        None, description="Broadcast MBS Session's Delivery Status"
    )


class MbsSecurityContext(BaseModel):
    keyList: Dict[str, MbsKeyInfo] = Field(
        ...,
        description='A map (list of key-value pairs) where a (unique) valid JSON string serves as key of MbsSecurityContext\n',
    )


class MbsServiceAreaInfo(BaseModel):
    areaSessionId: conint(ge=0, le=65535) = Field(
        ...,
        description='Integer where the allowed values correspond to the value range of an unsigned 16-bit integer.\n',
    )
    mbsServiceArea: Union[MbsServiceArea1, MbsServiceArea2] = Field(
        ..., description='MBS Service Area'
    )


class MbsMediaComp(BaseModel):
    mbsMedCompNum: int
    mbsFlowDescs: Optional[List[str]] = Field(None, min_items=1)
    mbsSdfResPrio: Optional[str] = None
    mbsMediaInfo: Optional[MbsMediaInfo] = None
    qosRef: Optional[str] = None
    mbsQoSReq: Optional[MbsQoSReq] = None


class ClockQualityAcceptanceCriterion(BaseModel):
    synchronizationState: Optional[
        List[Union[Literal['LOCKED', 'HOLDOVER', 'FREERUN'], str]]
    ] = Field(None, min_items=1)
    clockQuality: Optional[ClockQuality] = None
    parentTimeSource: Optional[
        List[
            Union[
                Literal[
                    'SYNC_E',
                    'PTP',
                    'GNSS',
                    'ATOMIC_CLOCK',
                    'TERRESTRIAL_RADIO',
                    'SERIAL_TIME_CODE',
                    'NTP',
                    'HAND_SET',
                    'OTHER',
                ],
                str,
            ]
        ]
    ] = Field(None, min_items=1)


class TrafficControlData(BaseModel):
    tcId: Optional[str] = None
    flowStatus: Optional[str] = None
    redirectInfo: Optional[str] = None
    addRedirectInfo: Optional[List[str]] = Field(None, min_items=1)
    muteNotif: Optional[bool] = None
    trafficSteeringPolIdDl: Optional[str] = None
    trafficSteeringPolIdUl: Optional[str] = None
    routeToLocs: Optional[List[Union[RouteToLocation1, RouteToLocation2]]] = None
    traffCorreInd: Optional[bool] = None
    upPathChgEvent: Optional[str] = None
    steerFun: Optional[str] = None
    steerModeDl: Optional[SteeringMode] = None
    steerModeUl: Optional[SteeringMode] = None
    mulAccCtrl: Optional[str] = None
    snssaiList: Optional[List[Snssai]] = None


class PccRule(BaseModel):
    pccRuleId: Optional[str] = Field(
        None, description='Univocally identifies the PCC rule within a PDU session.'
    )
    flowInfoList: Optional[List[str]] = None
    applicationId: Optional[str] = None
    appDescriptor: Optional[str] = None
    contentVersion: Optional[str] = None
    precedence: Optional[conint(ge=0)] = Field(
        None,
        description='Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.',
    )
    afSigProtocol: Optional[str] = None
    isAppRelocatable: Optional[bool] = None
    isUeAddrPreserved: Optional[bool] = None
    qosData: Optional[List[List[QosData]]] = None
    altQosParams: Optional[List[List[QosData]]] = None
    trafficControlData: Optional[List[List[TrafficControlData]]] = None
    conditionData: Optional[str] = None
    tscaiInputDl: Optional[str] = None
    tscaiInputUl: Optional[str] = None


class NsacfInfo(BaseModel):
    nsacfCapability: NsacfCapability
    taiList: Optional[List[Tai]] = None
    taiRangeList: Optional[List[TaiRange]] = Field(None, min_items=1)


class MlAnalyticsInfo(BaseModel):
    mlAnalyticsIds: Optional[List[str]] = Field(None, min_items=1)
    snssaiList: Optional[List[Snssai]] = None
    trackingAreaList: Optional[List[Tai]] = None
    mlModelInterInfo: Optional[List[constr(regex=r'^[0-9]{6}$')]] = Field(
        None, min_items=0
    )
    flCapabilityType: Optional[
        Literal['FL_SERVER', 'FL_CLIENT', 'FL_SERVER_AND_CLIENT']
    ] = None
    flTimeInterval: Optional[List[Union[TimeWindow1, TimeWindow2, TimeWindow3]]] = (
        Field(None, min_items=1)
    )


class NwdafInfo(BaseModel):
    eventIds: Optional[List[str]] = Field(None, min_items=1)
    nwdafEvents: Optional[List[str]] = Field(None, min_items=1)
    taiList: Optional[List[Tai]] = None
    taiRangeList: Optional[List[TaiRange]] = Field(None, min_items=1)
    nwdafCapability: Optional[NwdafCapability] = None
    analyticsDelay: Optional[int] = Field(
        None, description='indicating a time in seconds.'
    )
    servingNfSetIdList: Optional[List[str]] = Field(None, min_items=1)
    servingNfTypeList: Optional[
        List[
            Literal[
                'NRF',
                'UDM',
                'AMF',
                'SMF',
                'AUSF',
                'NEF',
                'PCF',
                'SMSF',
                'NSSF',
                'UDR',
                'LMF',
                'GMLC',
                '5G_EIR',
                'SEPP',
                'UPF',
                'N3IWF',
                'AF',
                'UDSF',
                'DN',
                'BSF',
                'CHF',
                'NWDAF',
                'PCSCF',
                'CBCF',
                'HSS',
                'UCMF',
                'SOR_AF',
                'SPAF',
                'MME',
                'SCSAS',
                'SCEF',
                'SCP',
                'NSSAAF',
                'ICSCF',
                'SCSCF',
                'DRA',
                'IMS_AS',
                'AANF',
                '5G_DDNMF',
                'NSACF',
                'MFAF',
                'EASDF',
                'DCCF',
                'MB_SMF',
                'TSCTSF',
                'ADRF',
                'GBA_BSF',
                'CEF',
                'MB_UPF',
                'NSWOF',
                'PKMF',
                'MNPF',
                'SMS_GMSC',
                'SMS_IWMSC',
                'MBSF',
                'MBSTF',
                'PANF',
                'TNGF',
                'W_AGF',
                'TWIF',
                'TSN_AF',
            ]
        ]
    ] = Field(None, min_items=1)
    mlAnalyticsList: Optional[List[MlAnalyticsInfo]] = Field(None, min_items=1)


class SnssaiInfoItem(BaseModel):
    sNssai: ExtSnssai
    dnnInfoList: List[DnnInfoItem] = Field(..., min_items=1)


class SnssaiEasdfInfoItem(BaseModel):
    sNssai: ExtSnssai
    dnnEasdfInfoList: List[DnnEasdfInfoItem] = Field(..., min_items=1)


class TrustAfInfo(BaseModel):
    sNssaiInfoList: Optional[List[SnssaiInfoItem]] = Field(None, min_items=1)
    afEvents: Optional[
        List[
            Union[
                Literal[
                    'SVC_EXPERIENCE',
                    'UE_MOBILITY',
                    'UE_COMM',
                    'EXCEPTIONS',
                    'USER_DATA_CONGESTION',
                    'PERF_DATA',
                    'DISPERSION',
                    'COLLECTIVE_BEHAVIOUR',
                    'MS_QOE_METRICS',
                    'MS_CONSUMPTION',
                    'MS_NET_ASSIST_INVOCATION',
                    'MS_DYN_POLICY_INVOCATION',
                    'MS_ACCESS_ACTIVITY',
                ],
                str,
            ]
        ]
    ] = Field(None, min_items=1)
    appIds: Optional[List[str]] = Field(None, min_items=1)
    internalGroupId: Optional[
        List[
            constr(
                regex=r'^[A-Fa-f0-9]{8}-[0-9]{3}-[0-9]{2,3}-([A-Fa-f0-9][A-Fa-f0-9]){1,10}$'
            )
        ]
    ] = Field(None, min_items=1)
    mappingInd: Optional[bool] = False


class DccfInfo(BaseModel):
    servingNfTypeList: Optional[
        List[
            Literal[
                'NRF',
                'UDM',
                'AMF',
                'SMF',
                'AUSF',
                'NEF',
                'PCF',
                'SMSF',
                'NSSF',
                'UDR',
                'LMF',
                'GMLC',
                '5G_EIR',
                'SEPP',
                'UPF',
                'N3IWF',
                'AF',
                'UDSF',
                'DN',
                'BSF',
                'CHF',
                'NWDAF',
                'PCSCF',
                'CBCF',
                'HSS',
                'UCMF',
                'SOR_AF',
                'SPAF',
                'MME',
                'SCSAS',
                'SCEF',
                'SCP',
                'NSSAAF',
                'ICSCF',
                'SCSCF',
                'DRA',
                'IMS_AS',
                'AANF',
                '5G_DDNMF',
                'NSACF',
                'MFAF',
                'EASDF',
                'DCCF',
                'MB_SMF',
                'TSCTSF',
                'ADRF',
                'GBA_BSF',
                'CEF',
                'MB_UPF',
                'NSWOF',
                'PKMF',
                'MNPF',
                'SMS_GMSC',
                'SMS_IWMSC',
                'MBSF',
                'MBSTF',
                'PANF',
                'TNGF',
                'W_AGF',
                'TWIF',
                'TSN_AF',
            ]
        ]
    ] = Field(None, min_items=1)
    servingNfSetIdList: Optional[List[str]] = Field(None, min_items=1)
    taiList: Optional[List[Tai]] = None
    taiRangeList: Optional[List[TaiRange]] = Field(None, min_items=1)


class MfafInfo(BaseModel):
    servingNfTypeList: Optional[
        List[
            Literal[
                'NRF',
                'UDM',
                'AMF',
                'SMF',
                'AUSF',
                'NEF',
                'PCF',
                'SMSF',
                'NSSF',
                'UDR',
                'LMF',
                'GMLC',
                '5G_EIR',
                'SEPP',
                'UPF',
                'N3IWF',
                'AF',
                'UDSF',
                'DN',
                'BSF',
                'CHF',
                'NWDAF',
                'PCSCF',
                'CBCF',
                'HSS',
                'UCMF',
                'SOR_AF',
                'SPAF',
                'MME',
                'SCSAS',
                'SCEF',
                'SCP',
                'NSSAAF',
                'ICSCF',
                'SCSCF',
                'DRA',
                'IMS_AS',
                'AANF',
                '5G_DDNMF',
                'NSACF',
                'MFAF',
                'EASDF',
                'DCCF',
                'MB_SMF',
                'TSCTSF',
                'ADRF',
                'GBA_BSF',
                'CEF',
                'MB_UPF',
                'NSWOF',
                'PKMF',
                'MNPF',
                'SMS_GMSC',
                'SMS_IWMSC',
                'MBSF',
                'MBSTF',
                'PANF',
                'TNGF',
                'W_AGF',
                'TWIF',
                'TSN_AF',
            ]
        ]
    ] = None
    servingNfSetIdList: Optional[List[str]] = None
    taiList: Optional[List[Tai]] = None
    taiRangeList: Optional[List[TaiRange]] = None


class AmfInfo(BaseModel):
    amfSetId: constr(regex=r'^[0-3][A-Fa-f0-9]{2}$') = Field(
        ...,
        description='String identifying the AMF Set ID (10 bits) as specified in clause 2.10.1 of 3GPP TS 23.003.  It is encoded as a string of 3 hexadecimal characters where the first character is limited to  values 0 to 3 (i.e. 10 bits).\n',
    )
    amfRegionId: constr(regex=r'^[A-Fa-f0-9]{2}$') = Field(
        ...,
        description='String identifying the AMF Set ID (10 bits) as specified in clause 2.10.1 of 3GPP TS 23.003.  It is encoded as a string of 3 hexadecimal characters where the first character is limited to  values 0 to 3 (i.e. 10 bits)\n',
    )
    guamiList: List[Guami] = Field(..., min_items=1)
    taiList: Optional[List[Tai1]] = Field(None, min_items=1)
    taiRangeList: Optional[List[TaiRange]] = Field(None, min_items=1)
    backupInfoAmfFailure: Optional[List[Guami]] = Field(None, min_items=1)
    backupInfoAmfRemoval: Optional[List[Guami]] = Field(None, min_items=1)
    n2InterfaceAmfInfo: Optional[Union[N2InterfaceAmfInfo1, N2InterfaceAmfInfo2]] = (
        Field(None, description='AMF N2 interface information')
    )
    amfOnboardingCapability: Optional[bool] = False
    highLatencyCom: Optional[bool] = None


class PcfInfo(BaseModel):
    groupId: Optional[str] = Field(None, description='Identifier of a group of NFs.')
    dnnList: Optional[List[str]] = Field(None, min_items=1)
    supiRanges: Optional[List[SupiRange]] = Field(None, min_items=1)
    gpsiRanges: Optional[List[IdentityRange]] = Field(None, min_items=1)
    rxDiamHost: Optional[
        constr(
            regex=r'^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$',
            min_length=4,
            max_length=253,
        )
    ] = Field(None, description='Fully Qualified Domain Name')
    rxDiamRealm: Optional[
        constr(
            regex=r'^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$',
            min_length=4,
            max_length=253,
        )
    ] = Field(None, description='Fully Qualified Domain Name')
    v2xSupportInd: Optional[bool] = False
    proseSupportInd: Optional[bool] = False
    proseCapability: Optional[ProseCapability] = None
    v2xCapability: Optional[V2xCapability] = None
    a2xSupportInd: Optional[bool] = False
    a2xCapability: Optional[A2xCapability] = None
    rangingSlPosSupportInd: Optional[bool] = False


class SatelliteBackhaulInfo(BaseModel):
    globalRanNodeID: Optional[
        Union[
            GlobalRanNodeID1,
            GlobalRanNodeID2,
            GlobalRanNodeID3,
            GlobalRanNodeID4,
            GlobalRanNodeID5,
            GlobalRanNodeID6,
        ]
    ] = Field(None, description='globally identification of an NG-RAN node')
    SatelliteBackhaulCategory: Optional[
        Union[
            Literal[
                'GEO',
                'MEO',
                'LEO',
                'OTHER_SAT',
                'DYNAMIC_GEO',
                'DYNAMIC_MEO',
                'DYNAMIC_LEO',
                'DYNAMIC_OTHER_SAT',
                'NON_SATELLITE',
            ],
            str,
        ]
    ] = None
    geoSatelliteId: Optional[constr(regex=r'^[0-9]{5}$')] = None


class BlockedLocationInfoList(BaseModel):
    blockedLocation: Optional[PlmnId] = None
    blockedDur: Optional[TimeDuration] = None
    blockedSlice: Optional[str] = None


class NetworkNodeDiameterAddress(BaseModel):
    name: constr(
        regex=r'^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$',
        min_length=4,
        max_length=253,
    ) = Field(..., description='Fully Qualified Domain Name')
    realm: constr(
        regex=r'^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$',
        min_length=4,
        max_length=253,
    ) = Field(..., description='Fully Qualified Domain Name')


class HssInfo(BaseModel):
    groupId: Optional[str] = Field(None, description='Identifier of a group of NFs.')
    imsiRanges: Optional[List[Union[ImsiRange1, ImsiRange2]]] = Field(None, min_items=1)
    imsPrivateIdentityRanges: Optional[List[IdentityRange]] = Field(None, min_items=1)
    imsPublicIdentityRanges: Optional[List[IdentityRange]] = Field(None, min_items=1)
    msisdnRanges: Optional[List[IdentityRange]] = Field(None, min_items=1)
    externalGroupIdentifiersRanges: Optional[List[IdentityRange]] = Field(
        None, min_items=1
    )
    hssDiameterAddress: Optional[NetworkNodeDiameterAddress] = None
    additionalDiamAddresses: Optional[List[NetworkNodeDiameterAddress]] = Field(
        None, min_items=1
    )


class SnssaiTsctsfInfoItem(BaseModel):
    sNssai: ExtSnssai
    dnnInfoList: List[DnnTsctsfInfoItem] = Field(..., min_items=1)


class BsfInfo(BaseModel):
    dnnList: Optional[List[str]] = Field(None, min_items=0)
    ipDomainList: Optional[List[str]] = Field(None, min_items=0)
    ipv4AddressRanges: Optional[List[Ipv4AddressRange1]] = Field(None, min_items=0)
    ipv6PrefixRanges: Optional[List[Ipv6PrefixRange1]] = Field(None, min_items=0)
    rxDiamHost: Optional[
        constr(
            regex=r'^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$',
            min_length=4,
            max_length=253,
        )
    ] = Field(None, description='Fully Qualified Domain Name')
    rxDiamRealm: Optional[
        constr(
            regex=r'^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$',
            min_length=4,
            max_length=253,
        )
    ] = Field(None, description='Fully Qualified Domain Name')
    groupId: Optional[str] = Field(None, description='Identifier of a group of NFs.')
    supiRanges: Optional[List[SupiRange]] = Field(None, min_items=0)
    gpsiRanges: Optional[List[IdentityRange]] = Field(None, min_items=0)


class MbsSessionId3(BaseModel):
    tmgi: Tmgi
    ssm: Optional[Ssm] = None
    nid: Optional[constr(regex=r'^[A-Fa-f0-9]{11}$')] = None


class MbsSessionId4(BaseModel):
    tmgi: Optional[Tmgi] = None
    ssm: Ssm
    nid: Optional[constr(regex=r'^[A-Fa-f0-9]{11}$')] = None


class SnssaiMbSmfInfoItem(BaseModel):
    sNssai: ExtSnssai
    dnnInfoList: List[DnnMbSmfInfoItem] = Field(..., min_items=1)


class SnssaiUpfInfoItem(BaseModel):
    sNssai: ExtSnssai
    dnnUpfInfoList: List[DnnUpfInfoItem] = Field(..., min_items=1)
    redundantTransport: Optional[bool] = False


class Attributes32(ManagedFunctionAttr):
    pLMNInfoList: Optional[List[PlmnInfo]] = None
    nRTACList: Optional[
        List[constr(regex=r'(^[A-Fa-f0-9]{4}$)|(^[A-Fa-f0-9]{6}$)')]
    ] = None
    sBIFqdn: Optional[str] = None
    cNSIIdList: Optional[List[str]] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[List[CommModel]] = None
    SmfInfo: Optional[SmfInfo] = None
    configurable5QISetRef: Optional[str] = None
    dynamic5QISetRef: Optional[str] = None
    dnaiSatelliteMappingList: Optional[List[DnaiSatelliteMapping]] = None


class Attributes35(ManagedFunctionAttr):
    pLMNInfoList: Optional[List[PlmnInfo]] = None
    sBIFqdn: Optional[str] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[List[CommModel]] = None
    supportedBMOList: Optional[List[str]] = None
    PcfInfo: Optional[PcfInfo] = None
    configurable5QISetRef: Optional[str] = None
    dynamic5QISetRef: Optional[str] = None


class Attributes36(ManagedFunctionAttr):
    plmnInfoList: Optional[List[PlmnInfo]] = None
    sBIFqdn: Optional[str] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[List[CommModel]] = None
    ausfInfo: Optional[AusfInfo] = None


class Attributes37(ManagedFunctionAttr):
    pLMNInfoList: Optional[List[PlmnInfo]] = None
    sBIFqdn: Optional[str] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[List[CommModel]] = None
    eCSAddrConfigInfo: Optional[List[str]] = None
    udmInfo: Optional[UdmInfo] = None


class Attributes38(ManagedFunctionAttr):
    pLMNInfoList: Optional[List[PlmnInfo]] = None
    sBIFqdn: Optional[str] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    udrInfo: Optional[UdrInfo] = None


class Attributes39(ManagedFunctionAttr):
    plmnInfoList: Optional[List[PlmnInfo]] = None
    sBIFqdn: Optional[str] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    udsfInfo: Optional[UdsfInfo] = None


class Attributes41(ManagedFunctionAttr):
    pLMNInfoList: Optional[List[PlmnInfo]] = None
    sBIFqdn: Optional[str] = None
    cNSIIdList: Optional[List[str]] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[List[CommModel]] = None


class Attributes42(ManagedFunctionAttr):
    plmnIdList: Optional[List[PlmnId]] = None
    sBIFqdn: Optional[str] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[List[CommModel]] = None
    smsfInfo: Optional[SmsfInfo] = None


class Attributes43(ManagedFunctionAttr):
    plmnIdList: Optional[List[PlmnId]] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[List[CommModel]] = None
    lmfInfo: Optional[LmfInfo] = None


class Attributes44(ManagedFunctionAttr):
    plmnIdList: Optional[List[PlmnId]] = None
    sBIFqdn: Optional[str] = None
    snssaiList: Optional[List[Snssai]] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[List[CommModel]] = None


class Attributes46(ManagedFunctionAttr):
    plmnIdList: Optional[List[PlmnId]] = None
    sBIFqdn: Optional[str] = None
    snssaiList: Optional[List[Snssai]] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[List[CommModel]] = None
    networkSliceInfoList: Optional[List[NetworkSliceInfo]] = None
    administrativeState: Optional[Literal['LOCKED', 'UNLOCKED']] = None
    nwdafInfo: Optional[NwdafInfo] = None
    nwdafLogicalFuncSupported: Optional[
        Literal['NWDAF_WITH_ANLF', 'NWDAF_WITH_MTLF', 'NWDAF_WITH_ANLF_MTLF']
    ] = None


class Attributes47(ManagedFunctionAttr):
    supportedFuncList: Optional[List[SupportedFunc]] = None
    address: Optional[
        Union[
            Ipv6Addr,
            constr(
                regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
            ),
            str,
        ]
    ] = None
    scpInfo: Optional[ScpInfo] = None


class Attributes49(ManagedFunctionAttr):
    managedNFProfile: Optional[ManagedNFProfile] = None
    nsacfInfoSnssai: Optional[List[NsacfInfoSnssai]] = None
    nsacfInfo: Optional[NsacfInfo] = None


class Attributes50(ManagedFunctionAttr):
    plmnId: Optional[PlmnId] = None
    sBIFqdn: Optional[str] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[List[CommModel]] = None


class Attributes52(BaseModel):
    eASServiceArea: Optional[str] = None
    eESServiceArea: Optional[str] = None
    eDNServiceArea: Optional[str] = None
    eASIpAddress: Optional[str] = None
    eESIpAddress: Optional[str] = None
    eCSIpAddress: Optional[str] = None
    ednIdentifier: Optional[str] = None
    ecmConnectionType: Optional[Literal['USERPLANE', 'CONTROLPLANE', 'BOTH']] = None
    field_5GCNfConnEcmInfoList: Optional[List[Field5GCNfConnEcmInfo]] = Field(
        None, alias='5GCNfConnEcmInfoList'
    )
    uPFConnectionInfo: Optional[UPFConnectionInfo] = None


class Attributes53(ManagedFunctionAttr):
    plmnIdList: Optional[List[PlmnId]] = None
    amfIdentifier: Optional[AmfIdentifier] = None


class Attributes79(EPRPAttr):
    remotePlmnId: Optional[PlmnId] = None
    remoteSeppAddress: Optional[
        Union[
            Ipv6Addr,
            constr(
                regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
            ),
            str,
        ]
    ] = None
    remoteSeppId: Optional[int] = None
    n32cParas: Optional[str] = None
    n32fPolicy: Optional[str] = None
    withIPX: Optional[bool] = None


class Attributes103(BaseModel):
    predefinedPccRules: Optional[List[PccRule]] = None


class Attributes104(ManagedFunctionAttr):
    plmnIdList: Optional[List[PlmnId]] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[List[CommModel]] = None
    trustAfInfo: Optional[TrustAfInfo] = None


class Attributes108(ManagedFunctionAttr):
    pLMNInfoList: Optional[List[PlmnInfo]] = None
    sBIFqdn: Optional[str] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[List[CommModel]] = None
    dccfInfo: Optional[DccfInfo] = None


class Attributes109(ManagedFunctionAttr):
    pLMNInfoList: Optional[List[PlmnInfo]] = None
    sBIFqdn: Optional[str] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[List[CommModel]] = None
    mfafInfo: Optional[MfafInfo] = None


class Attributes110(ManagedFunctionAttr):
    pLMNInfoList: Optional[List[PlmnInfo]] = None
    sBIFqdn: Optional[str] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[List[CommModel]] = None
    chfInfo: Optional[ChfInfo] = None


class Attributes115(ManagedFunctionAttr):
    pLMNInfoList: Optional[List[PlmnInfo]] = None
    sBIFqdn: Optional[str] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[List[CommModel]] = None
    aanfInfo: Optional[AanfInfo] = None


class Attributes119(ManagedFunctionAttr):
    pLMNInfoList: Optional[List[PlmnInfo]] = None
    sBIFqdn: Optional[str] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[List[CommModel]] = None
    gmlcInfo: Optional[GmlcInfo] = None


class Attributes120(ManagedFunctionAttr):
    pLMNInfoList: Optional[List[PlmnInfo]] = None
    sBIFqdn: Optional[str] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[List[CommModel]] = None
    tsctsfInfo: Optional[TsctsfInfo] = None


class Attributes127(ManagedFunctionAttr):
    pLMNInfoList: Optional[List[PlmnInfo]] = None
    sBIFqdn: Optional[str] = None
    cNSIIdList: Optional[List[str]] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[List[CommModel]] = None
    bsfInfo: Optional[BsfInfo] = None


class Attributes128(ManagedFunctionAttr):
    plmnIdList: Optional[List[PlmnId]] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[List[CommModel]] = None
    mbSmfInfo: Optional[MbSmfInfo] = None


class Attributes133(ManagedFunctionAttr):
    pLMNInfoList: Optional[List[PlmnInfo]] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[List[CommModel]] = None
    mnpfInfo: Optional[MnpfInfo] = None


class Attributes144(ManagedFunctionAttr):
    gnbId: Optional[conint(ge=0, le=4294967295)] = None
    gnbIdLength: Optional[conint(ge=22, le=32)] = None
    gnbCuName: Optional[constr(max_length=150)] = None
    plmnId: Optional[PlmnId] = None
    x2BlockList: Optional[
        List[
            constr(
                regex=r'^[0-9]{3}[0-9]{2,3}-(22|23|24|25|26|27|28|29|30|31|32)-[0-9]{1,10}'
            )
        ]
    ] = None
    xnBlockList: Optional[
        List[
            constr(
                regex=r'^[0-9]{3}[0-9]{2,3}-(22|23|24|25|26|27|28|29|30|31|32)-[0-9]{1,10}'
            )
        ]
    ] = None
    x2AllowList: Optional[
        List[
            constr(
                regex=r'^[0-9]{3}[0-9]{2,3}-(22|23|24|25|26|27|28|29|30|31|32)-[0-9]{1,10}'
            )
        ]
    ] = None
    xnAllowList: Optional[
        List[
            constr(
                regex=r'^[0-9]{3}[0-9]{2,3}-(22|23|24|25|26|27|28|29|30|31|32)-[0-9]{1,10}'
            )
        ]
    ] = None
    x2HOBlockList: Optional[
        List[constr(regex=r'^[0-9]{3}[0-9]{2,3}-(18|20|21|22)-[0-9]{1,7}')]
    ] = None
    xnHOBlackList: Optional[
        List[
            constr(
                regex=r'^[0-9]{3}[0-9]{2,3}-(22|23|24|25|26|27|28|29|30|31|32)-[0-9]{1,10}'
            )
        ]
    ] = None
    mappingSetIDBackhaulAddress: Optional[MappingSetIDBackhaulAddress] = None
    tceMappingInfoList: Optional[List[TceMappingInfo]] = None
    configurable5QISetRef: Optional[str] = None
    dynamic5QISetRef: Optional[str] = None
    ephemerisInfoSetRef: Optional[str] = None
    dCHOControl: Optional[bool] = None
    dDAPSHOControl: Optional[bool] = None


class Attributes187(BaseModel):
    ephemerisInfos: Optional[List[Union[Ephemeris1, Ephemeris2]]] = None


class RANSliceSubnetProfile(BaseModel):
    coverageAreaTAList: Optional[List[Tai]] = None
    dLLatency: Optional[float] = None
    uLLatency: Optional[float] = None
    uEMobilityLevel: Optional[
        Literal['STATIONARY', 'NOMADIC', 'RESTRICTED_MOBILITY', 'FULL_MOBILITY']
    ] = None
    resourceSharingLevel: Optional[Literal['SHARED', 'NON_SHARED']] = None
    maxNumberofUEs: Optional[int] = None
    activityFactor: Optional[int] = None
    dLThptPerSliceSubnet: Optional[XLThpt] = None
    dLThptPerUE: Optional[XLThpt] = None
    uLThptPerSliceSubnet: Optional[XLThpt] = None
    uLThptPerUE: Optional[XLThpt] = None
    uESpeed: Optional[int] = None
    dLReliability: Optional[float] = None
    uLReliability: Optional[float] = None
    dLMaxPktSize: Optional[int] = None
    uLMaxPktSize: Optional[int] = None
    nROperatingBands: Optional[List[str]] = None
    delayTolerance: Optional[DelayTolerance] = None
    positioning: Optional[Positioning] = None
    sliceSimultaneousUse: Optional[conint(ge=0, le=4)] = None
    energyEfficiency: Optional[float] = None
    termDensity: Optional[TermDensity] = None
    survivalTime: Optional[float] = None
    synchronicity: Optional[Synchronicity] = None
    dLDeterministicComm: Optional[DeterministicComm] = None
    uLDeterministicComm: Optional[DeterministicComm] = None
    nonIPSupport: Optional[NonIPSupport] = None
    availability: Optional[float] = None
    maxDLDataVolume: Optional[float] = None
    maxULDataVolume: Optional[float] = None
    kPIMonitoring: Optional[KPIMonitoring] = None
    dLPktDelayVariation: Optional[float] = None
    uLPktDelayVariation: Optional[float] = None


class TopSliceSubnetProfile(BaseModel):
    dLLatency: Optional[int] = None
    uLLatency: Optional[int] = None
    maxNumberofUEs: Optional[int] = None
    dLThptPerSliceSubnet: Optional[XLThpt] = None
    dLThptPerUE: Optional[XLThpt] = None
    uLThptPerSliceSubnet: Optional[XLThpt] = None
    uLThptPerUE: Optional[XLThpt] = None
    dLMaxPktSize: Optional[int] = None
    uLMaxPktSize: Optional[int] = None
    maxNumberOfPDUSessions: Optional[int] = None
    nROperatingBands: Optional[List[str]] = None
    sliceSimultaneousUse: Optional[conint(ge=0, le=4)] = None
    energyEfficiency: Optional[EnergyEfficiency] = None
    synchronicity: Optional[Synchronicity] = None
    delayTolerance: Optional[DelayTolerance] = None
    positioning: Optional[Positioning] = None
    termDensity: Optional[TermDensity] = None
    activityFactor: Optional[int] = None
    coverageAreaTAList: Optional[List[Tai]] = None
    resourceSharingLevel: Optional[Literal['SHARED', 'NON_SHARED']] = None
    uEMobilityLevel: Optional[
        Literal['STATIONARY', 'NOMADIC', 'RESTRICTED_MOBILITY', 'FULL_MOBILITY']
    ] = None
    uESpeed: Optional[int] = None
    dLReliability: Optional[float] = None
    uLReliability: Optional[float] = None
    dLDeterministicComm: Optional[DeterministicComm] = None
    uLDeterministicComm: Optional[DeterministicComm] = None
    survivalTime: Optional[float] = None
    nssaaSupport: Optional[NSSAASupport] = None
    n6Protection: Optional[N6Protection] = None
    nonIPSupport: Optional[NonIPSupport] = None
    availability: Optional[float] = None
    maxDLDataVolume: Optional[float] = None
    maxULDataVolume: Optional[float] = None
    kPIMonitoring: Optional[KPIMonitoring] = None
    supportedDataNetworks: Optional[DataNetwork] = None
    dataNetworkAccess: Optional[DataNetworkAccess] = None
    dLPktDelayVariation: Optional[float] = None
    uLPktDelayVariation: Optional[float] = None
    sliceSubnetAvailability: Optional[
        Union[
            SchedulingTime1,
            SchedulingTime2,
            SchedulingTime3,
            Union[TimeWindow1, TimeWindow2, TimeWindow3],
        ]
    ] = None


class Attributes191(BaseModel):
    dLlatency: Optional[int] = None
    uLlatency: Optional[int] = None
    dLThptPerSliceSubnet: Optional[XLThpt] = None
    uLThptPerSliceSubnet: Optional[XLThpt] = None
    coverageAreaTAList: Optional[List[Tai]] = None


class NotifyMoiCreation(NotificationHeader):
    correlatedNotifications: Optional[List[CorrelatedNotification1]] = None
    additionalText: Optional[str] = None
    sourceIndicator: Optional[
        Literal[
            'RESOURCE_OPERATION', 'MANAGEMENT_OPERATION', 'SON_OPERATION', 'UNKNOWN'
        ]
    ] = None
    attributeList: Optional[Dict[str, Any]] = None


class NotifyMoiDeletion(NotificationHeader):
    correlatedNotifications: Optional[List[CorrelatedNotification1]] = None
    additionalText: Optional[str] = None
    sourceIndicator: Optional[
        Literal[
            'RESOURCE_OPERATION', 'MANAGEMENT_OPERATION', 'SON_OPERATION', 'UNKNOWN'
        ]
    ] = None
    attributeList: Optional[Dict[str, Any]] = None


class NotifyMoiAttributeValueChanges(NotificationHeader):
    correlatedNotifications: Optional[List[CorrelatedNotification1]] = None
    additionalText: Optional[str] = None
    sourceIndicator: Optional[
        Literal[
            'RESOURCE_OPERATION', 'MANAGEMENT_OPERATION', 'SON_OPERATION', 'UNKNOWN'
        ]
    ] = None
    attributeListValueChanges: List[Dict[str, Any]] = Field(
        ...,
        description='The first array item contains the attribute name value pairs with the new values, and the second array item the attribute name value pairs with the optional old values.',
    )


class NotifyEvent(NotificationHeader):
    specificProblem: str
    additionalText: Optional[str] = None
    additionalInformation: Optional[Dict[str, Any]] = None


class NotifyMoiChanges(NotificationHeader):
    moiChanges: List[MoiChange]


class ExpectationObject1(BaseModel):
    objectType: Optional[Literal['L2SM_NETWORK']] = None
    objectInstance: Optional[str] = None
    objectContexts: Optional[
        List[Union[L2smNetworkContext, L2smProviderContext, L2smDomainContext]]
    ] = None


class NewNetworkExpectation(BaseModel):
    expectationId: Optional[str] = None
    expectationVerb: Optional[Literal['DELIVER']] = None
    expectationObject: Optional[ExpectationObject1] = None
    expectationTargets: Optional[List[SecureTarget]] = None
    expectationContexts: Optional[List[UrlExpectationContext]] = None


class L2SMExpectations(BaseModel):
    __root__: NewNetworkExpectation = Field(
        ..., description='Different expectations for L2SM mncc adaptor'
    )


class ExpectationObject2(BaseModel):
    objectType: Optional[Literal['5G_SLICE_FLOW', '5G_NETWORK_SLICE']] = None
    objectInstance: Optional[str] = None
    objectContexts: Optional[
        List[
            Union[
                Field5gcmcIPv4Context,
                Field5gcmcTypeContext,
                Field5gcmcPortNumberContext,
                Field5gcmcPortTypeContext,
            ]
        ]
    ] = None


class New5GFlowExpectation(BaseModel):
    expectationId: Optional[str] = None
    expectationVerb: Optional[Literal['CREATE']] = None
    expectationObject: Optional[ExpectationObject2] = None
    expectationTargets: Optional[List[Field5gcmcmCapacityTarget]] = None
    expectationContexts: Optional[
        List[Union[Field5gcmctimeContext, UrlExpectationContextModel]]
    ] = None


class Field5GCMCExpectations(BaseModel):
    __root__: New5GFlowExpectation = Field(
        ..., description='Different expectations for 5G Cumucore mncc adaptor'
    )


class ExpectationObject3(BaseModel):
    objectType: Optional[Literal['L2VPN']] = None
    objectInstance: Optional[str] = None
    objectContexts: Optional[
        List[
            Union[
                NodeSrcContext,
                NodeDstContext,
                EndpointSrcContext,
                EndpointDstContext,
                VlanIdContext,
                NiNameContext,
            ]
        ]
    ] = None


class NewL2VPNIntentExpectation(BaseModel):
    expectationId: Optional[str] = None
    expectationVerb: Optional[Literal['DELIVER']] = None
    expectationObject: Optional[ExpectationObject3] = None
    expectationTargets: Optional[
        List[Union[L2vpnBandwidthTarget, L2vpnLatencyTarget]]
    ] = None
    expectationContexts: Optional[List[L2vpnUrlContext]] = None


class L2VPNExpectations(BaseModel):
    __root__: NewL2VPNIntentExpectation


class ExpectationObject4(BaseModel):
    objectType: Optional[Literal['L2VPN_TFS']] = None
    objectInstance: Optional[str] = None
    objectContexts: Optional[
        List[
            Union[
                NodeSrcContext,
                NodeDstContext,
                EndpointSrcContext,
                EndpointDstContext,
                VlanIdContext,
                NiNameContext,
            ]
        ]
    ] = None


class NewTFSL2VPNIntentExpectation(BaseModel):
    expectationId: Optional[str] = None
    expectationVerb: Optional[Literal['DELIVER']] = None
    expectationObject: Optional[ExpectationObject4] = None
    expectationTargets: Optional[
        List[Union[L2vpnBandwidthTarget, L2vpnLatencyTarget]]
    ] = None
    expectationContexts: Optional[List[L2vpnUrlContext]] = None


class TSFExpectations(BaseModel):
    __root__: NewTFSL2VPNIntentExpectation = Field(
        ..., description='Different expectations for TeraFlow SDN Controller'
    )


class ExpectationObject5(BaseModel):
    objectType: Optional[Literal['NSMF_SLICE', 'NSMF_SESSION']] = None
    objectInstance: Optional[str] = None
    objectContexts: Optional[
        List[
            Union[
                NSMFSstObjectContext,
                NSMFIsolationModelObjectContext,
                NSMFPlmnObjectContext,
            ]
        ]
    ] = None


class NSMFQfiTarget(BaseModel):
    targetName: Optional[Literal['qfi']] = None
    targetCondition: Optional[Literal['IS_EQUAL_TO_OR_GREATER_THAN']] = None
    targetValueRange: Optional[str] = None
    targetContexts: Optional[List[NSMFFlowContext]] = None


class NSMFQualityTarget(BaseModel):
    targetName: Optional[Literal['quality']] = None
    targetCondition: Optional[Literal['IS_EQUAL_TO']] = None
    targetValueRange: Optional[str] = None
    targetContexts: Optional[List[NSMFFlowContext]] = None


class NSMFArpPriorityLevelTarget(BaseModel):
    targetName: Optional[Literal['arpPriorityLevel']] = None
    targetCondition: Optional[Literal['IS_EQUAL_TO']] = None
    targetValueRange: Optional[str] = None
    targetContexts: Optional[List[NSMFFlowContext]] = None


class NSMFArpPreemptionCapabilityTarget(BaseModel):
    targetName: Optional[Literal['arpPreemptionCapability']] = None
    targetCondition: Optional[Literal['IS_EQUAL_TO']] = None
    targetValueRange: Optional[str] = None
    targetContexts: Optional[List[NSMFFlowContext]] = None


class NSMFArpPreemptionVulnerabilityTarget(BaseModel):
    targetName: Optional[Literal['arpPreemptionVulnerability']] = None
    targetCondition: Optional[Literal['IS_EQUAL_TO']] = None
    targetValueRange: Optional[str] = None
    targetContexts: Optional[List[NSMFFlowContext]] = None


class AreaOfInterest(BaseModel):
    __root__: Union[
        GeoAreaToCellMapping,
        List[Tai],
        List[constr(regex=r'^[A-Fa-f0-9]{9}$')],
        List[constr(regex=r'^[A-Fa-f0-9]{7}$')],
        List[int],
    ]


class SAP(BaseModel):
    host: Optional[
        Union[
            Ipv6Addr,
            constr(
                regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
            ),
            str,
        ]
    ] = None
    port: Optional[int] = None


class NotifyNewAlarm(NotificationHeader):
    alarmId: str
    alarmType: Literal[
        'COMMUNICATIONS_ALARM',
        'QUALITY_OF_SERVICE_ALARM',
        'PROCESSING_ERROR_ALARM',
        'EQUIPMENT_ALARM',
        'ENVIRONMENTAL_ALARM',
        'INTEGRITY_VIOLATION',
        'OPERATIONAL_VIOLATION',
        'PHYSICAL_VIOLATION',
        'SECURITY_SERVICE_OR_MECHANISM_VIOLATION',
        'TIME_DOMAIN_VIOLATION',
    ]
    probableCause: Union[
        Union[
            Literal[
                'PROBABLE_CAUSE_001',
                'PROBABLE_CAUSE_002',
                'PROBABLE_CAUSE_003',
                'PROBABLE_CAUSE_004',
                'PROBABLE_CAUSE_005',
            ],
            str,
        ],
        int,
    ] = Field(
        ...,
        description='The value of the probable cause may be a specific standardized string, or any vendor provided string. Probable cause strings are not standardized in the present document. They may be added in a future version. Up to then the mapping of the generic probable cause strings "PROBABLE_CAUSE_001" to "PROBABLE_CAUSE_005" is vendor specific. The value of the probable cause may also be an integer. The mapping of integer values to probable causes is vendor specific.',
    )
    specificProblem: Optional[Union[str, int]] = None
    perceivedSeverity: Literal[
        'INDETERMINATE', 'CRITICAL', 'MAJOR', 'MINOR', 'WARNING', 'CLEARED'
    ]
    backedUpStatus: Optional[bool] = None
    backUpObject: Optional[str] = None
    trendIndication: Optional[Literal['MORE_SEVERE', 'NO_CHANGE', 'LESS_SEVERE']] = None
    thresholdInfo: Optional[ThresholdInfo] = None
    correlatedNotifications: Optional[List[CorrelatedNotification]] = None
    stateChangeDefinition: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The first array item contains the attribute name value pairs with the new values, and the second array item the attribute name value pairs with the optional old values.',
    )
    monitoredAttributes: Optional[Dict[str, Any]] = None
    proposedRepairActions: Optional[str] = None
    additionalText: Optional[str] = None
    additionalInformation: Optional[Dict[str, Any]] = None
    rootCauseIndicator: Optional[bool] = None


class Attributes2(BaseModel):
    userLabel: Optional[str] = None
    nFServiceType: Optional[
        Literal[
            'Namf_Communication',
            'Namf_EventExposure',
            'Namf_MT',
            'Namf_Location',
            'Nsmf_PDUSession',
            'Nsmf_EventExposure',
            'Others',
        ]
    ] = None
    sAP: Optional[SAP] = None
    operations: Optional[List[Operation]] = None
    administrativeState: Optional[Literal['LOCKED', 'UNLOCKED']] = None
    operationalState: Optional[Literal['ENABLED', 'DISABLED']] = None
    usageState: Optional[Literal['IDEL', 'ACTIVE', 'BUSY']] = None
    registrationState: Optional[Literal['REGISTERED', 'DEREGISTERED']] = None


class ExpectationObject(BaseModel):
    objectType: Optional[
        Literal[
            'RAN_SubNetwork',
            'Edge_Service_Support',
            '5GC_SubNetwork',
            'L2SM_NETWORK',
            'Sub_Slice',
            'Slice_Energy_Saving',
            'Slice_5ginduce',
            'Node_5ginduce',
            'LinkNode_5ginduce',
            '5G_NETWORK_SLICE',
            '5G_SLICE_FLOW',
            'K8S_L2_NETWORK',
            'NSMF_SESSION',
            'NSMF_SLICE',
        ]
    ] = None
    objectInstance: Optional[str] = None
    contextSelectivity: Optional[Literal['ALL_OF', 'ONE_OF', 'ANY_OF']] = None
    objectContexts: Optional[List[Context]] = Field(
        None,
        description='It describes the list of Context(s) which represents the constraints and conditions to be  used as filter information to identify the object(s) to which a given intentExpectation should apply.',
    )


class ExpectationTarget(BaseModel):
    targetName: Optional[str] = None
    targetCondition: Optional[
        Literal[
            'IS_EQUAL_TO',
            'IS_LESS_THAN',
            'IS_GREATER_THAN',
            'IS_WITHIN_RANGE',
            'IS_OUTSIDE_RANGE',
            'IS_ONE_OF',
            'IS_NOT_ONE_OF',
            'IS_EQUAL_TO_OR_LESS_THAN',
            'IS_EQUAL_TO_OR_GREATER_THAN',
            'IS_ALL_OF',
        ]
    ] = None
    targetValueRange: Optional[
        Union[
            List[
                Union[
                    float,
                    str,
                    bool,
                    int,
                    GeoArea,
                    PlmnId,
                    GeoCoordinate,
                    UEGroup,
                    Frequency,
                    Union[TimeWindow1, TimeWindow2, TimeWindow3],
                    datetime,
                ]
            ],
            Union[
                float,
                str,
                bool,
                int,
                GeoArea,
                PlmnId,
                GeoCoordinate,
                UEGroup,
                Frequency,
                Union[TimeWindow1, TimeWindow2, TimeWindow3],
                datetime,
            ],
        ]
    ] = None
    contextSelectivity: Optional[Literal['ALL_OF', 'ONE_OF', 'ANY_OF']] = None
    targetContexts: Optional[List[Context]] = Field(
        None,
        description='It describes the list of constraints and conditions that should apply for a specific expectationTarget.',
    )


class IntentFulfilmentReport(BaseModel):
    intentFulfilmentInfo: Optional[FulfilmentInfo] = None
    expectationFulfilmentResult: Optional[List[ExpectationFulfilmentResult]] = None


class CNSliceSubnetProfile(BaseModel):
    maxNumberofUEs: Optional[int] = None
    dLLatency: Optional[float] = None
    uLLatency: Optional[float] = None
    dLThptPerSliceSubnet: Optional[XLThpt] = None
    dLThptPerUE: Optional[XLThpt] = None
    uLThptPerSliceSubnet: Optional[XLThpt] = None
    uLThptPerUE: Optional[XLThpt] = None
    maxNumberOfPDUSessions: Optional[int] = None
    coverageAreaTAList: Optional[List[Tai]] = None
    resourceSharingLevel: Optional[Literal['SHARED', 'NON_SHARED']] = None
    dLMaxPktSize: Optional[int] = None
    uLMaxPktSize: Optional[int] = None
    delayTolerance: Optional[DelayTolerance] = None
    sliceSimultaneousUse: Optional[conint(ge=0, le=4)] = None
    dLReliability: Optional[float] = None
    uLReliability: Optional[float] = None
    energyEfficiency: Optional[float] = None
    dLDeterministicComm: Optional[DeterministicComm] = None
    uLDeterministicComm: Optional[DeterministicComm] = None
    survivalTime: Optional[float] = None
    nssaaSupport: Optional[NSSAASupport] = None
    n6Protection: Optional[N6Protection] = None
    nonIPSupport: Optional[NonIPSupport] = None
    availability: Optional[float] = None
    maxDLDataVolume: Optional[float] = None
    maxULDataVolume: Optional[float] = None
    supportedDataNetworks: Optional[DataNetwork] = None
    dataNetworkAccess: Optional[DataNetworkAccess] = None
    dLPktDelayVariation: Optional[float] = None
    uLPktDelayVariation: Optional[float] = None
    sliceSubnetAvailability: Optional[
        Union[
            SchedulingTime1,
            SchedulingTime2,
            SchedulingTime3,
            Union[TimeWindow1, TimeWindow2, TimeWindow3],
        ]
    ] = None


class DiameterIdentityRm(BaseModel):
    __root__: Union[
        constr(
            regex=r'^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$',
            min_length=4,
            max_length=253,
        ),
    ] = Field(
        ...,
        description='Fully Qualified Domain Name, but it also allows the null value',
    )


class Cnf(BaseModel):
    cnfUnits: List[CnfUnit] = Field(..., min_items=1)


class Dnf(BaseModel):
    dnfUnits: List[DnfUnit] = Field(..., min_items=1)


class FqdnPatternMatchingRule1(BaseModel):
    regex: str
    stringMatchingRule: Optional[StringMatchingRule] = None


class FqdnPatternMatchingRule2(BaseModel):
    regex: Optional[str] = None
    stringMatchingRule: StringMatchingRule


class EutraLocation(BaseModel):
    tai: Tai1
    ignoreTai: Optional[bool] = False
    ecgi: Ecgi
    ignoreEcgi: Optional[bool] = Field(
        False,
        description='This flag when present shall indicate that the Ecgi shall be ignored When present, it shall be set as follows: - true: ecgi shall be ignored. - false (default): ecgi shall not be ignored.\n',
    )
    ageOfLocationInformation: Optional[conint(ge=0, le=32767)] = Field(
        None,
        description='The value represents the elapsed time in minutes since the last network contact of the mobile station.  Value "0" indicates that the location information was obtained after a successful paging procedure for Active Location Retrieval when the UE is in idle mode or after a successful NG-RAN location reporting procedure with the eNB when the UE is in connected mode.  Any other value than "0" indicates that the location information is the last known one.  See 3GPP TS 29.002 clause 17.7.8.\n',
    )
    ueLocationTimestamp: Optional[datetime] = Field(
        None, description="string with format 'date-time' as defined in OpenAPI."
    )
    geographicalInformation: Optional[constr(regex=r'^[0-9A-F]{16}$')] = Field(
        None,
        description='Refer to geographical Information. See 3GPP TS 23.032 clause 7.3.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used.\n',
    )
    geodeticInformation: Optional[constr(regex=r'^[0-9A-F]{20}$')] = Field(
        None,
        description='Refers to Calling Geodetic Location. See ITU-T Recommendation Q.763 (1999) [24] clause 3.88.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used.\n',
    )
    globalNgenbId: Optional[
        Union[
            GlobalRanNodeId1,
            GlobalRanNodeId2,
            GlobalRanNodeId3,
            GlobalRanNodeId4,
            GlobalRanNodeId5,
            GlobalRanNodeId6,
        ]
    ] = Field(
        None,
        description='One of the six attributes n3IwfId, gNbIdm, ngeNbId, wagfId, tngfId, eNbId shall be present.\n',
    )
    globalENbId: Optional[
        Union[
            GlobalRanNodeId1,
            GlobalRanNodeId2,
            GlobalRanNodeId3,
            GlobalRanNodeId4,
            GlobalRanNodeId5,
            GlobalRanNodeId6,
        ]
    ] = Field(
        None,
        description='One of the six attributes n3IwfId, gNbIdm, ngeNbId, wagfId, tngfId, eNbId shall be present.\n',
    )


class EutraLocationRm(BaseModel):
    __root__: Union[EutraLocation,] = Field(
        ...,
        description="This data type is defined in the same way as the 'EutraLocation' data type, but with the OpenAPI 'nullable: true' property. \n",
    )


class NrLocation(BaseModel):
    tai: Tai1
    ncgi: Ncgi
    ignoreNcgi: Optional[bool] = False
    ageOfLocationInformation: Optional[conint(ge=0, le=32767)] = Field(
        None,
        description='The value represents the elapsed time in minutes since the last network contact of the mobile station. Value "0" indicates that the location information was obtained after a successful paging procedure for Active Location Retrieval when the UE is in idle mode or after a successful  NG-RAN location reporting procedure with the eNB when the UE is in connected mode. Any other value than "0" indicates that the location information is the last known one. See 3GPP TS 29.002 clause 17.7.8.\n',
    )
    ueLocationTimestamp: Optional[datetime] = Field(
        None, description="string with format 'date-time' as defined in OpenAPI."
    )
    geographicalInformation: Optional[constr(regex=r'^[0-9A-F]{16}$')] = Field(
        None,
        description='Refer to geographical Information. See 3GPP TS 23.032 clause 7.3.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used.\n',
    )
    geodeticInformation: Optional[constr(regex=r'^[0-9A-F]{20}$')] = Field(
        None,
        description='Refers to Calling Geodetic Location. See ITU-T Recommendation Q.763 (1999) [24] clause 3.88.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used.\n',
    )
    globalGnbId: Optional[
        Union[
            GlobalRanNodeId1,
            GlobalRanNodeId2,
            GlobalRanNodeId3,
            GlobalRanNodeId4,
            GlobalRanNodeId5,
            GlobalRanNodeId6,
        ]
    ] = Field(
        None,
        description='One of the six attributes n3IwfId, gNbIdm, ngeNbId, wagfId, tngfId, eNbId shall be present.\n',
    )
    ntnTaiInfo: Optional[NtnTaiInfo] = None


class NrLocationRm(BaseModel):
    __root__: Union[NrLocation,] = Field(
        ...,
        description='This data type is defined in the same way as the \'NrLocation\' data type, but with the OpenAPI \'nullable: true\' property." \n',
    )


class PresenceInfo(BaseModel):
    praId: Optional[str] = Field(
        None,
        description='Represents an identifier of the Presence Reporting Area (see clause 28.10 of 3GPP  TS 23.003.  This IE shall be present  if the Area of Interest subscribed or reported is a Presence Reporting Area or a Set of Core Network predefined Presence Reporting Areas. When present, it shall be encoded as a string representing an integer in the following ranges: 0 to 8 388 607 for UE-dedicated PRA 8 388 608 to 16 777 215 for Core Network predefined PRA Examples: PRA ID 123 is encoded as "123" PRA ID 11 238 660 is encoded as "11238660"\n',
    )
    additionalPraId: Optional[str] = Field(
        None,
        description='This IE may be present if the praId IE is present and if it contains a PRA identifier referring to a set of Core Network predefined Presence Reporting Areas. When present, this IE shall contain a PRA Identifier of an individual PRA within the Set of Core Network predefined Presence Reporting Areas indicated by the praId IE. \n',
    )
    presenceState: Optional[
        Union[Literal['IN_AREA', 'OUT_OF_AREA', 'UNKNOWN', 'INACTIVE'], str]
    ] = Field(
        None,
        description='Possible values are:\n-IN_AREA: Indicates that the UE is inside or enters the presence reporting area.\n-OUT_OF_AREA: Indicates that the UE is outside or leaves the presence reporting area\n-UNKNOW: Indicates it is unknown whether the UE is in the presence reporting area or not\n-INACTIVE: Indicates that the presence reporting area is inactive in the serving node. \n',
    )
    trackingAreaList: Optional[List[Tai1]] = Field(
        None,
        description='Represents the list of tracking areas that constitutes the area. This IE shall be present if the subscription or  the event report is for tracking UE presence in the tracking areas. For non 3GPP access the TAI shall be the N3GPP TAI. \n',
        min_items=1,
    )
    ecgiList: Optional[List[Ecgi]] = Field(
        None,
        description='Represents the list of EUTRAN cell Ids that constitutes the area. This IE shall be present if the Area of Interest subscribed is a list of EUTRAN cell Ids. \n',
        min_items=1,
    )
    ncgiList: Optional[List[Ncgi]] = Field(
        None,
        description='Represents the list of NR cell Ids that constitutes the area. This IE shall be present if the Area of Interest subscribed is a list of NR cell Ids. \n',
        min_items=1,
    )
    globalRanNodeIdList: Optional[
        List[
            Union[
                GlobalRanNodeId1,
                GlobalRanNodeId2,
                GlobalRanNodeId3,
                GlobalRanNodeId4,
                GlobalRanNodeId5,
                GlobalRanNodeId6,
            ]
        ]
    ] = Field(
        None,
        description='Represents the list of NG RAN node identifiers that constitutes the area. This IE shall be present if the Area of Interest subscribed is a list of NG RAN node identifiers. \n',
        min_items=1,
    )
    globaleNbIdList: Optional[
        List[
            Union[
                GlobalRanNodeId1,
                GlobalRanNodeId2,
                GlobalRanNodeId3,
                GlobalRanNodeId4,
                GlobalRanNodeId5,
                GlobalRanNodeId6,
            ]
        ]
    ] = Field(
        None,
        description='Represents the list of eNodeB identifiers that constitutes the area. This IE shall be  present if the Area of Interest subscribed is a list of eNodeB identifiers.\n',
        min_items=1,
    )


class PresenceInfoRm(BaseModel):
    praId: Optional[str] = Field(
        None,
        description='Represents an identifier of the Presence Reporting Area (see clause 28.10 of \n3GPP TS 23.003. This IE shall be present  if the Area of Interest subscribed or\nreported is a Presence Reporting Area or a Set of Core Network predefined Presence\nReporting Areas. When present, it shall be encoded as a string representing an integer\nin the following ranges:\n- 0 to 8 388 607 for UE-dedicated PRA\n- 8 388 608 to 16 777 215 for Core Network predefined PRA\nExamples:\nPRA ID 123 is encoded as "123"\nPRA ID 11 238 660 is encoded as "11238660"\n',
    )
    additionalPraId: Optional[str] = Field(
        None,
        description='This IE may be present if the praId IE is present and if it contains a PRA identifier referring to a set of Core Network predefined Presence Reporting Areas. When present, this IE shall contain a PRA Identifier of an individual PRA within the Set of Core Network predefined Presence Reporting Areas indicated by the praId IE.\n',
    )
    presenceState: Optional[
        Union[Literal['IN_AREA', 'OUT_OF_AREA', 'UNKNOWN', 'INACTIVE'], str]
    ] = Field(
        None,
        description='Possible values are:\n-IN_AREA: Indicates that the UE is inside or enters the presence reporting area.\n-OUT_OF_AREA: Indicates that the UE is outside or leaves the presence reporting area\n-UNKNOW: Indicates it is unknown whether the UE is in the presence reporting area or not\n-INACTIVE: Indicates that the presence reporting area is inactive in the serving node. \n',
    )
    trackingAreaList: Optional[List[Tai1]] = Field(
        None,
        description='Represents the list of tracking areas that constitutes the area. This IE shall be present if the subscription or the event report  is for tracking UE presence in the tracking areas. For non 3GPP access the TAI shall be the N3GPP TAI.\n',
        min_items=0,
    )
    ecgiList: Optional[List[Ecgi]] = Field(
        None,
        description='Represents the list of EUTRAN cell Ids that constitutes the area. This IE shall be present if the Area of Interest subscribed is a list of EUTRAN cell Ids.\n',
        min_items=0,
    )
    ncgiList: Optional[List[Ncgi]] = Field(
        None,
        description='Represents the list of NR cell Ids that constitutes the area. This IE shall be present if the Area of Interest subscribed is a list of NR cell Ids.\n',
        min_items=0,
    )
    globalRanNodeIdList: Optional[
        List[
            Union[
                GlobalRanNodeId1,
                GlobalRanNodeId2,
                GlobalRanNodeId3,
                GlobalRanNodeId4,
                GlobalRanNodeId5,
                GlobalRanNodeId6,
            ]
        ]
    ] = Field(
        None,
        description='Represents the list of NG RAN node identifiers that constitutes the area. This IE shall be present if the Area of Interest subscribed is a list of NG RAN node identifiers.\n',
    )
    globaleNbIdList: Optional[
        List[
            Union[
                GlobalRanNodeId1,
                GlobalRanNodeId2,
                GlobalRanNodeId3,
                GlobalRanNodeId4,
                GlobalRanNodeId5,
                GlobalRanNodeId6,
            ]
        ]
    ] = Field(
        None,
        description='Represents the list of eNodeB identifiers that constitutes the area. This IE shall be present if the Area of Interest subscribed is a list of eNodeB identifiers.\n',
        min_items=1,
    )


class Pc5QosFlowItem(BaseModel):
    pqi: conint(ge=0, le=255) = Field(
        ...,
        description='Unsigned integer representing a 5G QoS Identifier (see clause 5.7.2.1 of 3GPP TS 23.501, within the range 0 to 255.\n',
    )
    pc5FlowBitRates: Optional[Pc5FlowBitRates] = None
    range: Optional[conint(ge=0)] = Field(
        None,
        description='Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.',
    )


class VplmnOffloadingInfo(BaseModel):
    offloadIdentifier: Optional[
        constr(regex=r'^[0-9]{3}-[0-9]{2,3}-[A-Fa-f0-9]{8}(-v[0-9]{1,2}){0,1}$')
    ] = Field(
        None,
        description='Offload identifier uniquely identifying a VPLMN offloading policy information instance\n',
    )
    vplmnId: Optional[PlmnId1] = None
    allowedTraffic: Optional[bool] = True
    ipv4AddressRanges: Optional[List[Ipv4AddressRange]] = Field(None, min_items=1)
    ipv4AddrMasks: Optional[
        List[
            constr(
                regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
            )
        ]
    ] = Field(None, min_items=1)
    ipv6AddressRanges: Optional[List[Ipv6AddressRange]] = Field(None, min_items=1)
    ipv6PrefixRanges: Optional[List[Ipv6PrefixRange]] = Field(None, min_items=1)
    fqdnList: Optional[
        List[
            constr(
                regex=r'^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$',
                min_length=4,
                max_length=253,
            )
        ]
    ] = Field(None, min_items=1)
    fqdnPatterns: Optional[
        List[Union[FqdnPatternMatchingRule1, FqdnPatternMatchingRule2]]
    ] = Field(None, min_items=1)
    sessionDIAmbr: Optional[
        constr(regex=r'^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$')
    ] = Field(
        None,
        description='String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix "K" is used to represent the standard symbol "k".\n',
    )


class SnssaiDnnItem1(BaseModel):
    snssaiList: List[ExtSnssai] = Field(..., min_items=1)
    dnnList: Optional[List[str]] = Field(None, min_items=1)


class SnssaiDnnItem2(BaseModel):
    snssaiList: Optional[List[ExtSnssai]] = Field(None, min_items=1)
    dnnList: List[str] = Field(..., min_items=1)


class SnssaiDnnItem(BaseModel):
    __root__: Union[SnssaiDnnItem1, SnssaiDnnItem2] = Field(
        ..., description='Combination of S-NSSAIs and DNNs'
    )


class MdtConfiguration(BaseModel):
    jobType: Union[
        Literal[
            'IMMEDIATE_MDT_ONLY',
            'LOGGED_MDT_ONLY',
            'TRACE_ONLY',
            'IMMEDIATE_MDT_AND_TRACE',
            'RLF_REPORTS_ONLY',
            'RCEF_REPORTS_ONLY',
            'LOGGED_MBSFN_MDT',
        ],
        str,
    ] = Field(
        ...,
        description='The enumeration JobType defines Job Type in the trace. See 3GPP TS 32.422 for further  description of the values. It shall comply with the provisions defined in table 5.6.3.3-1.\n',
    )
    reportType: Optional[Union[Literal['PERIODICAL', 'EVENT_TRIGGED'], str]] = Field(
        None,
        description='The enumeration ReportTypeMdt defines Report Type for logged MDT in the trace. See 3GPP TS 32.422 for further description of the values. It shall comply with the provisions defined in table 5.6.3.4-1.\n',
    )
    areaScope: Optional[AreaScopeModel] = None
    measurementLteList: Optional[
        List[
            Union[
                Literal[
                    'M1',
                    'M2',
                    'M3',
                    'M4_DL',
                    'M4_UL',
                    'M5_DL',
                    'M5_UL',
                    'M6_DL',
                    'M6_UL',
                    'M7_DL',
                    'M7_UL',
                    'M8',
                    'M9',
                ],
                str,
            ]
        ]
    ] = None
    measurementNrList: Optional[
        List[
            Union[
                Literal[
                    'M1',
                    'M2',
                    'M3',
                    'M4_DL',
                    'M4_UL',
                    'M5_DL',
                    'M5_UL',
                    'M6_DL',
                    'M6_UL',
                    'M7_DL',
                    'M7_UL',
                    'M8',
                    'M9',
                ],
                str,
            ]
        ]
    ] = Field(None, min_items=1)
    sensorMeasurementList: Optional[
        List[Union[Literal['BAROMETRIC_PRESSURE', 'UE_SPEED', 'UE_ORIENTATION'], str]]
    ] = Field(None, min_items=1)
    reportingTriggerList: Optional[
        List[
            Union[
                Literal[
                    'PERIODICAL',
                    'EVENT_A2',
                    'EVENT_A2_PERIODIC',
                    'ALL_RRM_EVENT_TRIGGERS',
                ],
                str,
            ]
        ]
    ] = Field(None, min_items=1)
    reportInterval: Optional[
        Union[
            Literal[
                120,
                240,
                480,
                640,
                1024,
                2048,
                5120,
                10240,
                60000,
                360000,
                720000,
                1800000,
                3600000,
            ],
            str,
        ]
    ] = Field(
        None,
        description='The enumeration ReportIntervalMdt defines Report Interval for MDT in the trace. See 3GPP TS 32.422 for further description of the values. It shall comply with the provisions defined in table 5.6.3.9-1.\n',
    )
    reportIntervalNr: Optional[
        Union[
            Literal[
                120,
                240,
                480,
                640,
                1024,
                2048,
                5120,
                10240,
                20480,
                40960,
                60000,
                360000,
                720000,
                1800000,
                3600000,
            ],
            str,
        ]
    ] = Field(
        None,
        description='The enumeration ReportIntervalNrMdt defines Report Interval in NR for MDT in the trace. See 3GPP TS 32.422 for further description of the values. It shall comply with the provisions defined in table 5.6.3.17-1.\n',
    )
    reportAmount: Optional[Union[Literal[1, 2, 4, 8, 16, 32, 64, 'infinity'], str]] = (
        Field(
            None,
            description='The enumeration ReportAmountMdt defines Report Amount for MDT in the trace. See 3GPP TS 32.422 for further description of the values. It shall comply with the provisions defined in table 5.6.3.10-1.\n',
        )
    )
    reportAmountPerMeasurementLte: Optional[
        Dict[str, Union[Literal[1, 2, 4, 8, 16, 32, 64, 'infinity'], str]]
    ] = Field(
        None,
        description='A map (list of key-value pairs) where MeasurementLteForMdt serves as key;\n',
    )
    reportAmountPerMeasurementNr: Optional[
        Dict[str, Union[Literal[1, 2, 4, 8, 16, 32, 64, 'infinity'], str]]
    ] = Field(
        None,
        description='A map (list of key-value pairs) where MeasurementNrForMdt serves as key;\n',
    )
    eventThresholdRsrp: Optional[conint(ge=0, le=97)] = Field(
        None,
        description='This IE shall be present if the report trigger parameter is configured for A2 event reporting or A2 event triggered periodic reporting and the job type parameter is configured for Immediate MDT or combined Immediate MDT and Trace in LTE. When present, this IE shall indicate the Event Threshold for RSRP, and the value shall be between 0-97.\n',
    )
    eventThresholdRsrpNr: Optional[conint(ge=0, le=127)] = Field(
        None,
        description='This IE shall be present if the report trigger parameter is configured for A2 event reporting or A2 event triggered periodic reporting and the job type parameter is configured for Immediate MDT or combined Immediate MDT and Trace in NR. When present, this IE shall indicate the Event Threshold for RSRP, and the value shall be between 0-127.\n',
    )
    eventThresholdRsrq: Optional[conint(ge=0, le=34)] = Field(
        None,
        description='This IE shall be present if the report trigger parameter is configured for A2 event reporting or A2 event triggered periodic reporting and the job type parameter is configured for Immediate MDT or combined Immediate MDT and Trace in LTE.When present, this IE shall indicate the Event Threshold for RSRQ, and the value shall be between 0-34.\n',
    )
    eventThresholdRsrqNr: Optional[conint(ge=0, le=127)] = Field(
        None,
        description='This IE shall be present if the report trigger parameter is configured for A2 event reporting or A2 event triggered periodic reporting and the job type parameter is configured for Immediate MDT or combined Immediate MDT and Trace in NR.When present, this IE shall indicate the Event Threshold for RSRQ, and the value shall be between 0-127.\n',
    )
    eventList: Optional[List[Union[Literal['OUT_OF_COVERAG', 'A2_EVENT'], str]]] = (
        Field(None, min_items=1)
    )
    loggingInterval: Optional[
        Union[Literal[128, 256, 512, 1024, 2048, 3072, 4096, 6144], str]
    ] = Field(
        None,
        description='The enumeration LoggingIntervalMdt defines Logging Interval for MDT in the trace. See 3GPP TS 32.422 for further description of the values. It shall comply with the provisions defined in table 5.6.3.12-1.\n',
    )
    loggingIntervalNr: Optional[
        Union[
            Literal[128, 256, 512, 1024, 2048, 3072, 4096, 6144, 320, 640, 'infinity'],
            str,
        ]
    ] = Field(
        None,
        description='The enumeration LoggingIntervalNrMdt defines Logging Interval in NR for MDT in the trace. See 3GPP TS 32.422 for further description of the values. It shall comply with the provisions defined in table 5.6.3.18-1.\n',
    )
    loggingDuration: Optional[
        Union[Literal[600, 1200, 2400, 3600, 5400, 7200], str]
    ] = Field(
        None,
        description='The enumeration LoggingIntervalMdt defines Logging Interval for MDT in the trace. See 3GPP TS 32.422 for further description of the values. It shall comply with the provisions defined in table 5.6.3.12-1.\n',
    )
    loggingDurationNr: Optional[
        Union[Literal[600, 1200, 2400, 3600, 5400, 7200], str]
    ] = Field(
        None,
        description='The enumeration LoggingDurationMdt defines Logging Duration in NR for MDT in the trace. See 3GPP TS 32.422 for further description of the values. It shall comply with the provisions defined in table 5.6.3.20-1.\n',
    )
    positioningMethod: Optional[Union[Literal['GNSS', 'E_CELL_ID'], str]] = Field(
        None,
        description='The enumeration LoggingDurationMdt defines Logging Duration for MDT in the trace. See 3GPP TS 32.422 for further description of the values. It shall comply with the provisions defined in table 5.6.3.13-1.\n',
    )
    addPositioningMethodList: Optional[
        List[Union[Literal['GNSS', 'E_CELL_ID'], str]]
    ] = Field(None, min_items=1)
    collectionPeriodRmmLte: Optional[
        Union[Literal[1024, 1280, 2048, 2560, 5120, 10240, 60000], str]
    ] = Field(
        None,
        description='The enumeration CollectionPeriodRmmLteMdt defines Collection period for RRM measurements LTE for MDT in the trace. See 3GPP TS 32.422 for further description of the values. It shall comply with the provisions defined in table 5.6.3.15-1.\n',
    )
    collectionPeriodRmmNr: Optional[
        Union[Literal[1024, 2048, 5120, 10240, 60000], str]
    ] = Field(
        None,
        description='The enumeration CollectionPeriodRmmNrMdt defines Collection period for RRM measurements NR for MDT in the trace. See 3GPP TS 32.422 for further description of the values. It shall comply with the provisions defined in table 5.6.3.19-1\n',
    )
    measurementPeriodLte: Optional[
        Union[Literal[1024, 1280, 2048, 2560, 5120, 10240, 60000], str]
    ] = Field(
        None,
        description='The enumeration MeasurementPeriodLteMdt defines Measurement period LTE for MDT in the trace.  See 3GPP TS 32.422 for further description of the values. It shall comply with the provisions defined in table 5.6.3.16-1.\n',
    )
    mdtAllowedPlmnIdList: Optional[List[PlmnId1]] = Field(
        None, max_items=16, min_items=1
    )
    mbsfnAreaList: Optional[List[MbsfnArea]] = Field(None, max_items=8, min_items=1)
    interFreqTargetList: Optional[List[InterFreqTargetInfo]] = Field(
        None, max_items=8, min_items=1
    )


class MbsSessionEventReportList(BaseModel):
    eventReportList: List[MbsSessionEventReport] = Field(..., min_items=1)
    notifyCorrelationId: Optional[str] = None


class MbsServiceInfo(BaseModel):
    mbsMediaComps: Dict[str, Union[MbsMediaComp,]]
    mbsSdfResPrio: Optional[str] = None
    afAppId: Optional[str] = None
    mbsSessionAmbr: Optional[
        constr(regex=r'^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$')
    ] = Field(
        None,
        description='String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix "K" is used to represent the standard symbol "k".\n',
    )


class UnTrustAfInfo(BaseModel):
    afId: str
    sNssaiInfoList: Optional[List[SnssaiInfoItem]] = Field(None, min_items=1)
    mappingInd: Optional[bool] = False


class EasdfInfo(BaseModel):
    sNssaiEasdfInfoList: Optional[List[SnssaiEasdfInfoItem]] = Field(None, min_items=1)
    easdfN6IpAddressList: Optional[
        List[
            Union[
                Ipv6Addr,
                Ipv6Prefix,
                constr(
                    regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
                ),
            ]
        ]
    ] = Field(None, min_items=1)
    upfN6IpAddressList: Optional[
        List[
            Union[
                Ipv6Addr,
                Ipv6Prefix,
                constr(
                    regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
                ),
            ]
        ]
    ] = Field(None, min_items=1)


class UpfInfo(BaseModel):
    sNssaiUpfInfoList: List[SnssaiUpfInfoItem] = Field(..., min_items=1)
    smfServingArea: Optional[List[str]] = Field(None, min_items=1)
    interfaceUpfInfoList: Optional[List[InterfaceUpfInfoItem]] = Field(
        None, min_items=1
    )
    iwkEpsInd: Optional[bool] = False
    sxaInd: Optional[bool] = None
    pduSessionTypes: Optional[
        List[Union[Literal['IPV4', 'IPV6', 'IPV4V6', 'UNSTRUCTURED', 'ETHERNET'], str]]
    ] = Field(None, min_items=1)
    atsssCapability: Optional[AtsssCapability] = None
    ueIpAddrInd: Optional[bool] = False
    taiList: Optional[List[Tai1]] = Field(None, min_items=1)
    taiRangeList: Optional[List[TaiRange]] = Field(None, min_items=1)
    wAgfInfo: Optional[IpInterface] = None
    tngfInfo: Optional[IpInterface] = None
    twifInfo: Optional[IpInterface] = None
    priority: Optional[conint(ge=0, le=65535)] = None
    redundantGtpu: Optional[bool] = False
    ipups: Optional[bool] = False
    dataForwarding: Optional[bool] = False
    supportedPfcpFeatures: Optional[str] = None


class NefInfo(BaseModel):
    nefId: Optional[str] = None
    pfdData: Optional[PfdData] = None
    afEeData: Optional[AfEventExposureData] = None
    gpsiRanges: Optional[List[IdentityRange]] = Field(None, min_items=1)
    externalGroupIdentifiersRanges: Optional[List[IdentityRange]] = Field(
        None, min_items=1
    )
    servedFqdnList: Optional[List[str]] = Field(None, min_items=1)
    taiList: Optional[List[Tai]] = None
    taiRangeList: Optional[List[TaiRange]] = Field(None, min_items=1)
    dnaiList: Optional[List[str]] = Field(None, min_items=1)
    unTrustAfInfoList: Optional[List[UnTrustAfInfo]] = Field(None, min_items=1)
    uasNfFunctionalityInd: Optional[bool] = False
    multiMemAfSessQosInd: Optional[bool] = False
    memberUESelAssistInd: Optional[bool] = False


class NTNPLMNRestrictionsInfo(BaseModel):
    pLMNId: Optional[PlmnId] = None
    blockedLocationInfoList: Optional[List[BlockedLocationInfoList]] = Field(
        None, min_items=1
    )


class MbsSession(BaseModel):
    mbsSessionId: Union[MbsSessionId3, MbsSessionId4] = Field(
        ..., description='MBS Session Identifier'
    )
    mbsAreaSessions: Optional[Any] = Field(
        None,
        description='A map (list of key-value pairs) where the key identifies an areaSessionId',
    )


class MbsServiceArea3(BaseModel):
    ncgiList: List[NcgiTai] = Field(..., description='List of NR cell Ids', min_items=1)
    taiList: Optional[List[Tai1]] = Field(
        None, description='List of tracking area Ids', min_items=1
    )


class MbsServiceArea4(BaseModel):
    ncgiList: Optional[List[NcgiTai]] = Field(
        None, description='List of NR cell Ids', min_items=1
    )
    taiList: List[Tai1] = Field(
        ..., description='List of tracking area Ids', min_items=1
    )


class MbUpfInfo(BaseModel):
    sNssaiMbUpfInfoList: List[SnssaiUpfInfoItem] = Field(..., min_items=1)
    mbSmfServingArea: Optional[List[str]] = Field(None, min_items=1)
    interfaceMbUpfInfoList: Optional[List[InterfaceUpfInfoItem]] = Field(
        None, min_items=1
    )
    taiList: Optional[List[Tai1]] = Field(None, min_items=1)
    taiRangeList: Optional[List[TaiRange]] = Field(None, min_items=1)
    priority: Optional[conint(ge=0, le=65535)] = None
    supportedPfcpFeatures: Optional[str] = None


class Attributes29(ManagedFunctionAttr):
    pLMNInfoList: Optional[List[PlmnInfo]] = None
    amfIdentifier: Optional[AmfIdentifier] = None
    sBIFqdn: Optional[str] = None
    interPlmnFQDN: Optional[str] = None
    weightFactor: Optional[int] = None
    cNSIIdList: Optional[List[str]] = None
    amfSetRef: Optional[str] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[List[CommModel]] = None
    nTNPLMNInfoList: Optional[NTNPLMNRestrictionsInfo] = None
    amfInfo: Optional[AmfInfo] = None
    sliceExpiryInfo: Optional[SliceExpiryInfo] = None
    SatelliteBackhaulInfoList: Optional[SatelliteBackhaulInfo] = None


class Attributes33(ManagedFunctionAttr):
    pLMNInfoList: Optional[List[PlmnInfo]] = None
    nRTACList: Optional[
        List[constr(regex=r'(^[A-Fa-f0-9]{4}$)|(^[A-Fa-f0-9]{6}$)')]
    ] = None
    cNSIIdList: Optional[List[str]] = None
    energySavingControl: Optional[
        Literal['TO_BE_ENERGYSAVING', 'TO_BE_NOT_ENERGYSAVING']
    ] = Field(None, description='any of enumerated value')
    energySavingState: Optional[Literal['IS_NOT_ENERGYSAVING', 'IS_ENERGYSAVING']] = (
        Field(None, description='any of enumerated value')
    )
    managedNFProfile: Optional[ManagedNFProfile] = None
    supportedBMOList: Optional[List[str]] = None
    upfInfo: Optional[UpfInfo] = None


class Attributes48(ManagedFunctionAttr):
    sBIFqdn: Optional[str] = None
    snssaiList: Optional[List[Snssai]] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    capabilityList: Optional[List[str]] = None
    isCAPIFSup: Optional[bool] = None
    nefInfo: Optional[NefInfo] = None


class Attributes51(ManagedFunctionAttr):
    plmnId: Optional[PlmnId] = None
    sBIFqdn: Optional[str] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    serverAddr: Optional[str] = None
    easdfInfo: Optional[EasdfInfo] = None


class Attributes105(ManagedFunctionAttr):
    pLMNInfoList: Optional[List[PlmnInfo]] = None
    sBIFqdn: Optional[str] = None
    cNSIIdList: Optional[List[str]] = None
    nFProfileList: Optional[List[NFProfile]] = Field(
        None, description='List of NF profile'
    )
    commModelList: Optional[List[CommModel]] = None
    nssafInfo: Optional[NssaafInfo] = None


class Attributes132(ManagedFunctionAttr):
    plmnIdList: Optional[List[PlmnId]] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[List[CommModel]] = None
    mbUpfInfo: Optional[MbUpfInfo] = None


class SliceProfile(BaseModel):
    sliceProfileId: Optional[str] = None
    plmnInfoList: Optional[List[PlmnInfo]] = None
    cNSliceSubnetProfile: Optional[CNSliceSubnetProfile] = None
    rANSliceSubnetProfile: Optional[RANSliceSubnetProfile] = None
    topSliceSubnetProfile: Optional[TopSliceSubnetProfile] = None


class Attributes189(BaseModel):
    managedFunctionRefList: Optional[List[str]] = None
    networkSliceSubnetRefList: Optional[List[str]] = None
    operationalState: Optional[Literal['ENABLED', 'DISABLED']] = None
    administrativeState: Optional[Literal['LOCKED', 'UNLOCKED']] = None
    nsInfo: Optional[NsInfo] = None
    sliceProfileList: Optional[List[SliceProfile]] = None
    epTransportRefList: Optional[List[str]] = None
    priorityLabel: Optional[int] = None
    networkSliceSubnetType: Optional[
        Literal['TOP_SLICESUBNET', 'RAN_SLICESUBNET', 'CN_SLICESUBNET']
    ] = None
    networkSliceSubnetControllerRef: Optional[List[str]] = None
    isolationProfileRef: Optional[str] = None


class Attributes192(BaseModel):
    profile: Optional[Union[SliceProfile, ServiceProfile]] = None
    resourceReservation: Optional[bool] = Field(
        None,
        description="An attribute represents MnS consumer's requirements for resource reservation.",
    )
    recommendationRequest: Optional[bool] = Field(
        None,
        description="An attribute represents MnS consumer's request for recommended network slice related requirements.",
    )
    requestedReservationExpiration: Optional[str] = Field(
        None,
        description="An attribute which specifies MnS consuner's requirements for the validity period of the resource reservation.",
    )
    feasibilityTimeWindow: Optional[Union[TimeWindow1, TimeWindow2, TimeWindow3]] = None
    processMonitor: Optional[ProcessMonitor] = None
    feasibilityResult: Optional[Literal['FEASIBLE', 'INFEASIBLE']] = Field(
        None,
        description='An attribute which specifies the feasibility check result for the feasibility check and reservation job.',
    )
    inFeasibleReason: Optional[str] = Field(
        None,
        description='An attribute that specifies the additional reason information if the feasibility check result is infeasible.The detailed ENUM value is FFS. ',
    )
    resourceReservationStatus: Optional[Literal['RESERVED', 'UNRESERVED', 'USED']] = (
        Field(
            None,
            description='An attribute which specifies the resource reservation result for the feasibility check job.',
        )
    )
    reservationFailureReason: Optional[str] = Field(
        None,
        description='An attribute that specifies the additional reason information if the reservation is failed. ',
    )
    reservationExpiration: Optional[str] = Field(
        None,
        description='An attribute which specifies the actual validity period of the resource reservation..',
    )
    recommendedRequirements: Optional[str] = Field(
        None,
        description='An attribute that specifies the recommended network slicing related requirements (i.e. ServiceProfile and SliceProfile information) which can be supported by the MnS producer.. ',
    )


class Attributes194(BaseModel):
    inputSliceProfile: Optional[SliceProfile] = None
    sliceProfileId: Optional[str] = None
    operationalState: Optional[Literal['ENABLED', 'DISABLED']] = None
    administrativeState: Optional[Literal['LOCKED', 'UNLOCKED']] = None
    availabilityStatus: Optional[
        Literal[
            'IN_TEST',
            'FAILED',
            'POWER_OFF',
            'OFF_LINE',
            'OFF_DUTY',
            'DEPENDENCY',
            'DEGRADED',
            'NOT_INSTALLED',
            'LOG_FULL',
        ]
    ] = None
    processMonitor: Optional[ProcessMonitor] = None
    networkSliceSubnetRef: Optional[str] = None


class NewNSMFSliceExpectation(BaseModel):
    expectationId: Optional[str] = None
    expectationVerb: Optional[Literal['DELIVER']] = None
    expectationObject: Optional[ExpectationObject5] = None
    expectationTargets: Optional[
        List[
            Union[
                NSMFAmbrTarget,
                NSMFQfiTarget,
                NSMFQualityTarget,
                NSMFArpPriorityLevelTarget,
                NSMFArpPreemptionCapabilityTarget,
                NSMFArpPreemptionVulnerabilityTarget,
                NSMFGbrTarget,
                NSMFMbrTarget,
                NSMFPlrTarget,
            ]
        ]
    ] = None
    expectationContexts: Optional[
        List[Union[NSMFNameContext, NSMFUserDensityContext]]
    ] = None


class IntentExpectation(BaseModel):
    expectationId: str = Field(
        ...,
        description='A unique identifier of the intentExpectation within the intent.',
    )
    expectationVerb: Optional[Literal['DELIVER', 'ENSURE']] = Field(
        None,
        description='It describes the characteristic of the intentExpectation and is the property that describes the types of intentExpectations.',
    )
    expectationObject: Optional[ExpectationObject] = None
    expectationTargets: Optional[List[ExpectationTarget]] = None
    contextSelectivity: Optional[Literal['ALL_OF', 'ONE_OF', 'ANY_OF']] = None
    expectationContexts: Optional[List[Context]] = None


class ComplexQuery(BaseModel):
    __root__: Union[Cnf, Dnf] = Field(
        ...,
        description='The ComplexQuery data type is either a conjunctive normal form or a disjunctive normal form.  The attribute names "cnfUnits" and "dnfUnits" (see clause 5.2.4.11 and clause 5.2.4.12)  serve as discriminator.\n',
    )


class UserLocation(BaseModel):
    eutraLocation: Optional[EutraLocation] = None
    nrLocation: Optional[NrLocation] = None
    n3gaLocation: Optional[N3gaLocation] = None
    utraLocation: Optional[Union[UtraLocation1, UtraLocation2, UtraLocation3]] = Field(
        None, description='Exactly one of cgi, sai or lai shall be present.'
    )
    geraLocation: Optional[Union[GeraLocation1, GeraLocation2, GeraLocation3]] = Field(
        None, description='Exactly one of cgi, sai or lai shall be present.'
    )


class Pc5QoSPara(BaseModel):
    pc5QosFlowList: List[Pc5QosFlowItem]
    pc5LinkAmbr: Optional[constr(regex=r'^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$')] = (
        Field(
            None,
            description='String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix "K" is used to represent the standard symbol "k".\n',
        )
    )


class MbsSession1(BaseModel):
    mbsSessionId: Union[MbsSessionId1, MbsSessionId2] = Field(
        ..., description='MBS Session Identifier'
    )
    tmgiAllocReq: Optional[bool] = False
    tmgi: Optional[Tmgi] = None
    expirationTime: Optional[datetime] = Field(
        None, description="string with format 'date-time' as defined in OpenAPI."
    )
    serviceType: Union[Literal['MULTICAST', 'BROADCAST'], str] = Field(
        ..., description='Indicates the MBS service type of an MBS session'
    )
    locationDependent: Optional[bool] = False
    areaSessionId: Optional[conint(ge=0, le=65535)] = Field(
        None,
        description='Integer where the allowed values correspond to the value range of an unsigned 16-bit integer.\n',
    )
    ingressTunAddrReq: Optional[bool] = False
    ingressTunAddr: Optional[List[Union[TunnelAddress1, TunnelAddress2]]] = Field(
        None, min_items=1
    )
    ssm: Optional[Ssm] = None
    mbsServiceArea: Optional[Union[MbsServiceArea1, MbsServiceArea2]] = Field(
        None, description='MBS Service Area'
    )
    extMbsServiceArea: Optional[
        Union[ExternalMbsServiceArea1, ExternalMbsServiceArea2]
    ] = Field(
        None,
        description='List of geographic area or list of civic address info for MBS Service Area',
    )
    redMbsServArea: Optional[Union[MbsServiceArea1, MbsServiceArea2]] = Field(
        None, description='MBS Service Area'
    )
    extRedMbsServArea: Optional[
        Union[ExternalMbsServiceArea1, ExternalMbsServiceArea2]
    ] = Field(
        None,
        description='List of geographic area or list of civic address info for MBS Service Area',
    )
    dnn: Optional[str] = Field(
        None,
        description='String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. "Label1.Label2.Label3").\n',
    )
    snssai: Optional[Snssai1] = None
    activationTime: Optional[datetime] = None
    startTime: Optional[datetime] = Field(
        None, description="string with format 'date-time' as defined in OpenAPI."
    )
    terminationTime: Optional[datetime] = Field(
        None, description="string with format 'date-time' as defined in OpenAPI."
    )
    mbsServInfo: Optional[MbsServiceInfo] = None
    mbsSessionSubsc: Optional[MbsSessionSubscription] = None
    activityStatus: Optional[Union[Literal['ACTIVE', 'INACTIVE'], str]] = Field(
        None, description="Indicates the MBS session's activity status"
    )
    anyUeInd: Optional[bool] = False
    mbsFsaIdList: Optional[List[constr(regex=r'^[A-Fa-f0-9]{6}$')]] = Field(
        None, min_items=1
    )
    associatedSessionId: Optional[Union[Ssm, str]] = Field(
        None, description='an associated Session Id used in MOCN'
    )
    nrRedCapUeInfo: Optional[
        Union[
            Literal[
                'NR_REDCAP_UE_ONLY',
                'BOTH_NR_REDCAP_UE_AND_NON_REDCAP_UE',
                'NON_REDCAP_UE_ONLY',
            ],
            str,
        ]
    ] = Field(
        None,
        description='Indicates whether the broadcast MBS session is intended only for NR RedCap UEs,  both for NR RedCap UEs and non-RedCap UEs, or only for non-RedCap UEs (default). \n',
    )


class MbsSession2(BaseModel):
    mbsSessionId: Optional[Union[MbsSessionId1, MbsSessionId2]] = Field(
        None, description='MBS Session Identifier'
    )
    tmgiAllocReq: bool
    tmgi: Optional[Tmgi] = None
    expirationTime: Optional[datetime] = Field(
        None, description="string with format 'date-time' as defined in OpenAPI."
    )
    serviceType: Union[Literal['MULTICAST', 'BROADCAST'], str] = Field(
        ..., description='Indicates the MBS service type of an MBS session'
    )
    locationDependent: Optional[bool] = False
    areaSessionId: Optional[conint(ge=0, le=65535)] = Field(
        None,
        description='Integer where the allowed values correspond to the value range of an unsigned 16-bit integer.\n',
    )
    ingressTunAddrReq: Optional[bool] = False
    ingressTunAddr: Optional[List[Union[TunnelAddress1, TunnelAddress2]]] = Field(
        None, min_items=1
    )
    ssm: Optional[Ssm] = None
    mbsServiceArea: Optional[Union[MbsServiceArea1, MbsServiceArea2]] = Field(
        None, description='MBS Service Area'
    )
    extMbsServiceArea: Optional[
        Union[ExternalMbsServiceArea1, ExternalMbsServiceArea2]
    ] = Field(
        None,
        description='List of geographic area or list of civic address info for MBS Service Area',
    )
    redMbsServArea: Optional[Union[MbsServiceArea1, MbsServiceArea2]] = Field(
        None, description='MBS Service Area'
    )
    extRedMbsServArea: Optional[
        Union[ExternalMbsServiceArea1, ExternalMbsServiceArea2]
    ] = Field(
        None,
        description='List of geographic area or list of civic address info for MBS Service Area',
    )
    dnn: Optional[str] = Field(
        None,
        description='String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. "Label1.Label2.Label3").\n',
    )
    snssai: Optional[Snssai1] = None
    activationTime: Optional[datetime] = None
    startTime: Optional[datetime] = Field(
        None, description="string with format 'date-time' as defined in OpenAPI."
    )
    terminationTime: Optional[datetime] = Field(
        None, description="string with format 'date-time' as defined in OpenAPI."
    )
    mbsServInfo: Optional[MbsServiceInfo] = None
    mbsSessionSubsc: Optional[MbsSessionSubscription] = None
    activityStatus: Optional[Union[Literal['ACTIVE', 'INACTIVE'], str]] = Field(
        None, description="Indicates the MBS session's activity status"
    )
    anyUeInd: Optional[bool] = False
    mbsFsaIdList: Optional[List[constr(regex=r'^[A-Fa-f0-9]{6}$')]] = Field(
        None, min_items=1
    )
    associatedSessionId: Optional[Union[Ssm, str]] = Field(
        None, description='an associated Session Id used in MOCN'
    )
    nrRedCapUeInfo: Optional[
        Union[
            Literal[
                'NR_REDCAP_UE_ONLY',
                'BOTH_NR_REDCAP_UE_AND_NON_REDCAP_UE',
                'NON_REDCAP_UE_ONLY',
            ],
            str,
        ]
    ] = Field(
        None,
        description='Indicates whether the broadcast MBS session is intended only for NR RedCap UEs,  both for NR RedCap UEs and non-RedCap UEs, or only for non-RedCap UEs (default). \n',
    )


class MbsSessionModel(BaseModel):
    __root__: Union[MbsSession1, MbsSession2] = Field(
        ..., description='Individual MBS session'
    )


class NrfInfo(BaseModel):
    servedUdrInfo: Optional[Dict[str, Union[UdrInfo, EmptyObject]]] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedUdrInfoList: Optional[Dict[str, Dict[str, Union[UdrInfo, EmptyObject]]]] = (
        Field(
            None,
            description='A map (list of key-value pairs) where nfInstanceId serves as key',
        )
    )
    servedUdmInfo: Optional[Dict[str, Union[UdmInfo, EmptyObject]]] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedUdmInfoList: Optional[Dict[str, Dict[str, Union[UdmInfo, EmptyObject]]]] = (
        Field(
            None,
            description='A map (list of key-value pairs) where nfInstanceId serves as key',
        )
    )
    servedAusfInfo: Optional[Dict[str, Union[AusfInfo, EmptyObject]]] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedAusfInfoList: Optional[Dict[str, Dict[str, Union[AusfInfo, EmptyObject]]]] = (
        Field(
            None,
            description='A map (list of key-value pairs) where nfInstanceId serves as key',
        )
    )
    servedAmfInfo: Optional[Dict[str, Union[AmfInfo, EmptyObject]]] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedAmfInfoList: Optional[Dict[str, Dict[str, Union[AmfInfo, EmptyObject]]]] = (
        Field(
            None,
            description='A map (list of key-value pairs) where nfInstanceId serves as key',
        )
    )
    servedSmfInfo: Optional[Dict[str, Union[SmfInfo, EmptyObject]]] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedSmfInfoList: Optional[Dict[str, Dict[str, Union[SmfInfo, EmptyObject]]]] = (
        Field(
            None,
            description='A map (list of key-value pairs) where nfInstanceId serves as key',
        )
    )
    servedUpfInfo: Optional[Dict[str, Union[UpfInfo, EmptyObject]]] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedUpfInfoList: Optional[Dict[str, Dict[str, Union[UpfInfo, EmptyObject]]]] = (
        Field(
            None,
            description='A map (list of key-value pairs) where nfInstanceId serves as key',
        )
    )
    servedPcfInfo: Optional[Dict[str, Union[PcfInfo, EmptyObject]]] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedPcfInfoList: Optional[Dict[str, Dict[str, Union[PcfInfo, EmptyObject]]]] = (
        Field(
            None,
            description='A map (list of key-value pairs) where nfInstanceId serves as key',
        )
    )
    servedBsfInfo: Optional[Dict[str, Union[BsfInfo, EmptyObject]]] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedBsfInfoList: Optional[Dict[str, Dict[str, Union[BsfInfo, EmptyObject]]]] = (
        Field(
            None,
            description='A map (list of key-value pairs) where nfInstanceId serves as key',
        )
    )
    servedChfInfo: Optional[Dict[str, Union[ChfInfo, EmptyObject]]] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedChfInfoList: Optional[Dict[str, Dict[str, Union[ChfInfo, EmptyObject]]]] = (
        Field(
            None,
            description='A map (list of key-value pairs) where nfInstanceId serves as key',
        )
    )
    servedNefInfo: Optional[Dict[str, Union[NefInfo, EmptyObject]]] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedNwdafInfo: Optional[Dict[str, Union[NwdafInfo, EmptyObject]]] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedNwdafInfoList: Optional[Dict[str, Dict[str, NwdafInfo]]] = Field(
        None,
        description='A map (list of key-value pairs) where NF Instance Id serves as key',
    )
    servedPcscfInfoList: Optional[
        Dict[str, Dict[str, Union[PcscfInfo, EmptyObject]]]
    ] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedGmlcInfo: Optional[Dict[str, Union[GmlcInfo, EmptyObject]]] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedLmfInfo: Optional[Dict[str, Union[LmfInfo, EmptyObject]]] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedNfInfo: Optional[Dict[str, NfInfo]] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedHssInfoList: Optional[Dict[str, Dict[str, Union[HssInfo, EmptyObject]]]] = (
        Field(
            None,
            description='A map (list of key-value pairs) where nfInstanceId serves as key',
        )
    )
    servedUdsfInfo: Optional[Dict[str, Union[UdsfInfo, EmptyObject]]] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedUdsfInfoList: Optional[Dict[str, Dict[str, Union[UdsfInfo, EmptyObject]]]] = (
        Field(
            None,
            description='A map (list of key-value pairs) where nfInstanceId serves as key',
        )
    )
    servedScpInfoList: Optional[Dict[str, Union[ScpInfo, EmptyObject]]] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedSeppInfoList: Optional[Dict[str, Union[SeppInfo, EmptyObject]]] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedAanfInfoList: Optional[Dict[str, Dict[str, Union[AanfInfo, EmptyObject]]]] = (
        Field(
            None,
            description='A map (list of key-value pairs) where NF Instance Id serves as key',
        )
    )
    served5gDdnmfInfo: Optional[Dict[str, Field5GDdnmfInfo]] = None
    servedMfafInfoList: Optional[Dict[str, MfafInfo]] = Field(
        None,
        description='A map (list of key-value pairs) where NF Instance Id serves as key',
    )
    servedEasdfInfoList: Optional[Dict[str, Dict[str, EasdfInfo]]] = Field(
        None,
        description='A map (list of key-value pairs) where NF Instance Id serves as key',
    )
    servedDccfInfoList: Optional[Dict[str, DccfInfo]] = Field(
        None,
        description='A map (list of key-value pairs) where NF Instance Id serves as key',
    )
    servedMbSmfInfoList: Optional[
        Dict[str, Dict[str, Union[MbSmfInfo, EmptyObject]]]
    ] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedTsctsfInfoList: Optional[Dict[str, Dict[str, TsctsfInfo]]] = Field(
        None,
        description='A map (list of key-value pairs) where NF Instance Id serves as key',
    )
    servedMbUpfInfoList: Optional[Dict[str, Dict[str, MbUpfInfo]]] = Field(
        None,
        description='A map (list of key-value pairs) where NF Instance Id serves as key',
    )
    servedTrustAfInfo: Optional[Dict[str, TrustAfInfo]] = Field(
        None,
        description='A map (list of key-value pairs) where NF Instance Id serves as key',
    )
    servedNssaafInfo: Optional[Dict[str, NssaafInfo]] = Field(
        None,
        description='A map (list of key-value pairs) where NF Instance Id serves as key',
    )


class MbsServiceAreaInfoModel(BaseModel):
    areaSessionId: conint(ge=0, le=65535)
    mbsServiceArea: Union[MbsServiceArea3, MbsServiceArea4] = Field(
        ..., description='MBS Service Area'
    )


class Attributes40(ManagedFunctionAttr):
    plmnInfoList: Optional[List[PlmnInfo]] = None
    sBIFqdn: Optional[str] = None
    cNSIIdList: Optional[List[str]] = None
    nFProfileList: Optional[List[NFProfile]] = Field(
        None, description='List of NF profile'
    )
    nrfInfo: Optional[NrfInfo] = None


class IntentNrmg(BaseModel):
    Intent: Optional[Union[IntentMncc, IntentBssf, IntentSingle]] = None


class Top(BaseModel):
    id: str
    objectClass: Optional[str] = None
    objectInstance: Optional[str] = None
    VsDataContainer: Optional[List[VsDataContainerSingle]] = None


class Resource(BaseModel):
    __root__: Union[
        Resource1,
        Union[
            Union[
                VsDataContainerSingle,
                ManagementNodeSingle,
                MnsAgentSingle,
                MeContextSingle,
                ManagedNFServiceSingle,
                SchedulerSingle,
                ConditionMonitorSingle,
                SupportedNotificationsSingle,
                SubNetworkSingle,
                ManagedElementSingle,
            ],
            Union[IntentHandlingFunctionSingle, IntentSingle, IntentReportSingle],
        ],
    ]


class TopAttr(BaseModel):
    id: str
    objectClass: Optional[str] = None
    objectInstance: Optional[str] = None
    VsDataContainer: Optional[List[VsDataContainerSingle]] = None


class SubNetworkNcO(BaseModel):
    ManagementNode: Optional[List[ManagementNodeSingle]] = None
    MnsAgent: Optional[List[MnsAgentSingle]] = None
    MeContext: Optional[List[MeContextSingle]] = None
    AlarmList: Optional[AlarmListSingle] = None
    Scheduler: Optional[List[SchedulerSingle]] = None
    ConditionMonitor: Optional[List[ConditionMonitorSingle]] = None
    SupportedNotifications: Optional[SupportedNotificationsSingle] = None


class ManagedElementNcO(BaseModel):
    MnsAgent: Optional[List[MnsAgentSingle]] = None
    AlarmList: Optional[AlarmListSingle] = None
    Scheduler: Optional[List[SchedulerSingle]] = None
    ConditionMonitor: Optional[List[ConditionMonitorSingle]] = None
    SupportedNotifications: Optional[SupportedNotificationsSingle] = None


class ManagedFunctionNcO(BaseModel):
    ManagedNFService: Optional[List[ManagedNFServiceSingle]] = None


class VsDataContainerSingle(BaseModel):
    id: Optional[str] = None
    attributes: Optional[Attributes1] = None
    VsDataContainer: Optional[List[VsDataContainerSingle]] = None


class SubNetworkNcOAiMlNrm(BaseModel):
    MLTrainingFunction: Optional[List[MLTrainingFunctionSingle]] = None
    MLTestingFunction: Optional[List[MLTestingFunctionSingle]] = None
    MLEntityRepository: Optional[List[MLEntityRepositorySingle]] = None
    MLUpdateFunction: Optional[List[MLUpdateFunctionSingle]] = None
    AIMLInferenceFunction: Optional[List[AIMLInferenceFunctionSingle]] = None


class ManagedElementNcOAiMlNrm(BaseModel):
    MLTrainingFunction: Optional[List[MLTrainingFunctionSingle]] = None
    MLTestingFunction: Optional[List[MLTestingFunctionSingle]] = None
    MLEntityRepository: Optional[List[MLEntityRepositorySingle]] = None
    MLUpdateFunction: Optional[List[MLUpdateFunctionSingle]] = None
    AIMLInferenceFunction: Optional[List[AIMLInferenceFunctionSingle]] = None


class MLEntityLoadingRequestMultiple(BaseModel):
    __root__: List[MLEntityLoadingRequestSingle]


class MLEntityLoadingProcessMultiple(BaseModel):
    __root__: List[MLEntityLoadingProcessSingle]


class MLEntityLoadingPolicyMultiple(BaseModel):
    __root__: List[MLEntityLoadingPolicySingle]


class AIMLInferenceEmulationFunctionMultiple(BaseModel):
    __root__: List[AIMLInferenceEmulationFunctionSingle]


class ResourcesAiMlNrm(BaseModel):
    __root__: Union[
        MLTrainingFunctionSingle,
        MLTrainingRequestSingle,
        MLTrainingProcessSingle,
        MLTrainingReportSingle,
        MLEntitySingle,
        MLEntityRepositorySingle,
        MLEntityCoordinationGroupSingle,
        MLTestingFunctionSingle,
        MLTestingRequestSingle,
        MLTestingReportSingle,
        MLEntityLoadingRequestSingle,
        MLEntityLoadingProcessSingle,
        MLEntityLoadingPolicySingle,
        MLUpdateFunctionSingle,
        MLUpdateRequestSingle,
        MLUpdateProcessSingle,
        MLUpdateReportSingle,
        AIMLInferenceFunctionSingle,
        AIMLInferenceReportSingle,
        AIMLInferenceEmulationFunctionSingle,
    ]


class SubNetworkNcOIntentNrm(BaseModel):
    IntentHandlingFunction: Optional[List[IntentHandlingFunctionSingle]] = None


class SubNetworkNcOSliceNrm(BaseModel):
    NetworkSlice: Optional[List[NetworkSliceSingle]] = None
    NetworkSliceSubnet: Optional[List[NetworkSliceSubnetSingle]] = None
    EP_Transport: Optional[List[EPTransportSingle]] = None
    NetworkSliceSubnetProviderCapabilities: Optional[
        List[NetworkSliceSubnetProviderCapabilitiesSingle]
    ] = None
    FeasibilityCheckAndReservationJob: Optional[
        List[FeasibilityCheckAndReservationJobSingle]
    ] = None
    NetworkSliceController: Optional[List[NetworkSliceControllerSingle]] = None
    NetworkSliceSubnetController: Optional[List[NetworkSliceSubnetControllerSingle]] = (
        None
    )
    IsolationProfile: Optional[List[IsolationProfileSingle]] = None


class SubNetworkNcONrNrm(BaseModel):
    NRFrequency: Optional[List[NRFrequencySingle]] = None
    ExternalGnbCuCpFunction: Optional[List[ExternalGnbCuCpFunctionSingle]] = None
    ExternalGnbCuUpFunction: Optional[List[ExternalGnbCuUpFunctionSingle]] = None
    ExternalGnbDuFunction: Optional[List[ExternalGnbDuFunctionSingle]] = None
    ExternalENBFunction: Optional[List[ExternalENBFunctionSingle]] = None
    EUtranFrequency: Optional[List[EUtranFrequencySingle]] = None
    DESManagementFunction: Optional[DESManagementFunctionSingle] = None
    DRACHOptimizationFunction: Optional[DRACHOptimizationFunctionSingle] = None
    DMROFunction: Optional[DMROFunctionSingle] = None
    DLBOFunction: Optional[DLBOFunctionSingle] = None
    DPCIConfigurationFunction: Optional[DPCIConfigurationFunctionSingle] = None
    CPCIConfigurationFunction: Optional[CPCIConfigurationFunctionSingle] = None
    CESManagementFunction: Optional[CESManagementFunctionSingle] = None
    Configurable5QISet: Optional[List[Configurable5QISetSingle]] = None
    RimRSGlobal: Optional[RimRSGlobalSingle] = None
    Dynamic5QISet: Optional[List[Dynamic5QISetSingle]] = None
    CCOFunction: Optional[CCOFunctionSingle] = None


class SubNetworkNcO5GcNrm(BaseModel):
    ExternalAmfFunction: Optional[List[ExternalAmfFunctionSingle]] = None
    ExternalNrfFunction: Optional[List[ExternalNrfFunctionSingle]] = None
    ExternalNssfFunction: Optional[List[ExternalNssfFunctionSingle]] = None
    AmfSet: Optional[List[AmfSetSingle]] = None
    AmfRegion: Optional[List[AmfRegionSingle]] = None
    Configurable5QISet: Optional[List[Configurable5QISetSingle]] = None
    Dynamic5QISet: Optional[List[Dynamic5QISetSingle]] = None
    EcmConnectionInfo: Optional[List[EcmConnectionInfoSingle]] = None


class ManagedElementNcO5GcNrm(BaseModel):
    AmfFunction: Optional[List[AmfFunctionSingle]] = None
    SmfFunction: Optional[List[SmfFunctionSingle]] = None
    UpfFunction: Optional[List[UpfFunctionSingle]] = None
    N3iwfFunction: Optional[List[N3iwfFunctionSingle]] = None
    PcfFunction: Optional[List[PcfFunctionSingle]] = None
    AusfFunction: Optional[List[AusfFunctionSingle]] = None
    UdmFunction: Optional[List[UdmFunctionSingle]] = None
    UdrFunction: Optional[List[UdrFunctionSingle]] = None
    UdsfFunction: Optional[List[UdsfFunctionSingle]] = None
    NrfFunction: Optional[List[NrfFunctionSingle]] = None
    NssfFunction: Optional[List[NssfFunctionSingle]] = None
    SmsfFunction: Optional[List[SmsfFunctionSingle]] = None
    LmfFunction: Optional[List[LmfFunctionSingle]] = None
    NgeirFunction: Optional[List[NgeirFunctionSingle]] = None
    SeppFunction: Optional[List[SeppFunctionSingle]] = None
    NwdafFunction: Optional[List[NwdafFunctionSingle]] = None
    ScpFunction: Optional[List[ScpFunctionSingle]] = None
    NefFunction: Optional[List[NefFunctionSingle]] = None
    Configurable5QISet: Optional[List[Configurable5QISetSingle]] = None
    Dynamic5QISet: Optional[List[Dynamic5QISetSingle]] = None
    EcmConnectionInfo: Optional[List[EcmConnectionInfoSingle]] = None
    EASDFFunction: Optional[List[EASDFFunctionSingle]] = None
    NSSAAFFunction: Optional[List[NssaafFunctionSingle]] = None
    AFFunction: Optional[List[AfFunctionSingle]] = None
    DCCFFunction: Optional[List[DccfFunctionSingle]] = None
    ChfFunction: Optional[List[ChfFunctionSingle]] = None
    MFAFFunction: Optional[List[MfafFunctionSingle]] = None
    GMLCFunction: Optional[List[GmlcFunctionSingle]] = None
    TSCTSFFunction: Optional[List[TsctsfFunctionSingle]] = None
    AANFFunction: Optional[List[AanfFunctionSingle]] = None
    BSFFunction: Optional[List[BsfFunctionSingle]] = None
    MBSMFFunction: Optional[List[MbSmfFunctionSingle]] = None
    MBUPFFunction: Optional[List[MbUpfFunctionSingle]] = None
    MNPFFunction: Optional[List[MnpfFunctionSingle]] = None


class MnS1(BaseModel):
    SubNetwork: Optional[List[SubNetworkNcO5GcNrm]] = None


class MnS2(BaseModel):
    ManagedElement: Optional[List[ManagedElementNcO5GcNrm]] = None


class Attributes99(BaseModel):
    configurable5QIs: Optional[List[FiveQICharacteristicsSingle]] = None


class Attributes100(BaseModel):
    dynamic5QIs: Optional[List[FiveQICharacteristicsSingle]] = None


class NsacfFunctionMultiple(BaseModel):
    __root__: List[NsacfFunctionSingle]


class ExternalSeppFunctionNultiple(BaseModel):
    __root__: List[ExternalSeppFunctionSingle]


class EPN59Multiple(BaseModel):
    __root__: List[EPN59Single]


class Resources5gcNrm(BaseModel):
    __root__: Union[
        AmfFunctionSingle,
        SmfFunctionSingle,
        UpfFunctionSingle,
        N3iwfFunctionSingle,
        PcfFunctionSingle,
        AusfFunctionSingle,
        UdmFunctionSingle,
        UdrFunctionSingle,
        UdsfFunctionSingle,
        NrfFunctionSingle,
        NssfFunctionSingle,
        SmsfFunctionSingle,
        LmfFunctionSingle,
        NgeirFunctionSingle,
        SeppFunctionSingle,
        NwdafFunctionSingle,
        ScpFunctionSingle,
        NefFunctionSingle,
        NsacfFunctionSingle,
        DDNMFFunctionSingle,
        ExternalAmfFunctionSingle,
        ExternalNrfFunctionSingle,
        ExternalNssfFunctionSingle,
        ExternalSeppFunctionSingle,
        AmfSetSingle,
        AmfRegionSingle,
        QFQoSMonitoringControlSingle,
        GtpUPathQoSMonitoringControlSingle,
        EPN2Single,
        EPN3Single,
        EPN4Single,
        EPN5Single,
        EPN6Single,
        EPN7Single,
        EPN8Single,
        EPN9Single,
        EPN10Single,
        EPN11Single,
        EPN12Single,
        EPN13Single,
        EPN14Single,
        EPN15Single,
        EPN16Single,
        EPN17Single,
        EPN20Single,
        EPN21Single,
        EPN22Single,
        EPN26Single,
        EPN27Single,
        EPN28Single,
        EPN31Single,
        EPN32Single,
        EPN33Single,
        EPN34Single,
        EPN40Single,
        EPN41Single,
        EPN42Single,
        EPN58Single,
        EPN59Single,
        EPN60Single,
        EPN61Single,
        EPN62Single,
        EPN63Single,
        EPN84Single,
        EPN85Single,
        EPN86Single,
        EPN87Single,
        EPN88Single,
        EPN89Single,
        EPN96Single,
        EPNpc4Single,
        EPNpc6Single,
        EPNpc7Single,
        EPNpc8Single,
        EPN3mbSingle,
        EPN4mbSingle,
        EPN19mbSingle,
        EPNmb9Single,
        EPS5CSingle,
        EPS5USingle,
        EPRxSingle,
        EPMAPSMSCSingle,
        EPNLSSingle,
        EPNL2Single,
        EPNL3Single,
        EPNL5Single,
        EPNL6Single,
        EPNL9Single,
        EPN11mbSingle,
        EPN16mbSingle,
        EPNmb1Single,
        EPSM12Single,
        EPSM13Single,
        EPSM14Single,
        Configurable5QISetSingle,
        FiveQiDscpMappingSetSingle,
        PredefinedPccRuleSetSingle,
        Dynamic5QISetSingle,
        EASDFFunctionSingle,
        EcmConnectionInfoSingle,
        NssaafFunctionSingle,
        AfFunctionSingle,
        DccfFunctionSingle,
        ChfFunctionSingle,
        MfafFunctionSingle,
        GmlcFunctionSingle,
        TsctsfFunctionSingle,
        AanfFunctionSingle,
        BsfFunctionSingle,
        MbSmfFunctionSingle,
        MbUpfFunctionSingle,
        MnpfFunctionSingle,
        Union[MnS1, MnS2],
    ]


class ManagedElementNcONrNrm(BaseModel):
    GnbDuFunction: Optional[List[GnbDuFunctionSingle]] = None
    GnbCuUpFunction: Optional[List[GnbCuUpFunctionSingle]] = None
    GnbCuCpFunction: Optional[List[GnbCuCpFunctionSingle]] = None
    DESManagementFunction: Optional[DESManagementFunctionSingle] = None
    DRACHOptimizationFunction: Optional[DRACHOptimizationFunctionSingle] = None
    DMROFunction: Optional[DMROFunctionSingle] = None
    DLBOFunction: Optional[DLBOFunctionSingle] = None
    DPCIConfigurationFunction: Optional[DPCIConfigurationFunctionSingle] = None
    CPCIConfigurationFunction: Optional[CPCIConfigurationFunctionSingle] = None
    CESManagementFunction: Optional[CESManagementFunctionSingle] = None
    Configurable5QISet: Optional[List[Configurable5QISetSingle]] = None
    Dynamic5QISet: Optional[List[Dynamic5QISetSingle]] = None


class MnS4(BaseModel):
    SubNetwork: Optional[List[SubNetworkNcONrNrm]] = None


class MnS5(BaseModel):
    ManagedElement: Optional[List[ManagedElementNcONrNrm]] = None


class Attributes184(BaseModel):
    cCOControl: Optional[bool] = None
    cCOWeakCoverageParameters: Optional[CCOWeakCoverageParametersSingle] = None
    cCOPilotPollutionParameters: Optional[CCOPilotPollutionParametersSingle] = None
    cCOOvershootCoverageParameters_Single: Optional[
        CCOOvershootCoverageParametersSingle
    ] = Field(None, alias='cCOOvershootCoverageParameters-Single')


class ResourcesNrNrm(BaseModel):
    __root__: Union[
        GnbDuFunctionSingle,
        GnbCuUpFunctionSingle,
        GnbCuCpFunctionSingle,
        OperatorDuSingle,
        NrCellCuSingle,
        NrCellDuSingle,
        NrOperatorCellDuSingle,
        NRFrequencySingle,
        EUtranFrequencySingle,
        NrSectorCarrierSingle,
        BwpSingle,
        BWPSetSingle,
        CommonBeamformingFunctionSingle,
        BeamSingle,
        RRMPolicyRatioSingle,
        NRCellRelationSingle,
        EUtranCellRelationSingle,
        NRFreqRelationSingle,
        EUtranFreqRelationSingle,
        DANRManagementFunctionSingle,
        DESManagementFunctionSingle,
        DRACHOptimizationFunctionSingle,
        DMROFunctionSingle,
        DLBOFunctionSingle,
        DPCIConfigurationFunctionSingle,
        CPCIConfigurationFunctionSingle,
        CESManagementFunctionSingle,
        RimRSGlobalSingle,
        RimRSSetSingle,
        ExternalGnbDuFunctionSingle,
        ExternalGnbCuUpFunctionSingle,
        ExternalGnbCuCpFunctionSingle,
        ExternalNrCellCuSingle,
        ExternalENBFunctionSingle,
        ExternalEUTranCellSingle,
        EPXnCSingle,
        EPE1Single,
        EPF1CSingle,
        EPNgCSingle,
        EPX2CSingle,
        EPXnUSingle,
        EPF1USingle,
        EPNgUSingle,
        EPX2USingle,
        EPS1USingle,
        CCOFunctionSingle,
        CCOWeakCoverageParametersSingle,
        CCOPilotPollutionParametersSingle,
        CCOOvershootCoverageParametersSingle,
        NTNFunctionSingle,
        EphemerisInfoSetSingle,
        Union[MnS4, MnS5],
    ]


class MnS7(BaseModel):
    SubNetwork: Optional[List[SubNetworkNcOSliceNrm]] = None


class ResourcesSliceNrm(BaseModel):
    __root__: Union[
        NetworkSliceSingle,
        NetworkSliceSubnetSingle,
        EPTransportSingle,
        NetworkSliceSubnetProviderCapabilitiesSingle,
        FeasibilityCheckAndReservationJobSingle,
        NetworkSliceControllerSingle,
        NetworkSliceSubnetControllerSingle,
        IsolationProfileSingle,
        MnS7,
    ]


class SubNetworkMultiple(BaseModel):
    __root__: List[SubNetworkSingle]


class ManagedElementMultiple(BaseModel):
    __root__: List[ManagedElementSingle]


class IntentSingle(Top):
    userLabel: Optional[str] = None
    intentExpectations: Optional[List[IntentExpectation]] = None
    contextSelectivity: Optional[Literal['ALL_OF', 'ONE_OF', 'ANY_OF']] = None
    intentContexts: Optional[List[Context]] = Field(
        None,
        description='It describes the list of Context(s) which represents the constraints and conditions that should apply  for the entire intent even if there may be specific contexts defined for specific parts of the intent  ',
    )
    intentAdminState: Optional[Literal['ACTIVATED', 'DEACTIVATED']] = Field(
        None,
        description='It describes the intent administrative state.  This attribute is used when MnS consumer-suspension mechanism is supported',
    )
    intentPriority: Optional[conint(ge=1, le=100)] = Field(
        None,
        description='It expresses the priority of the stated intent within a MnS consumer.',
    )
    intentPreemptionCapability: Optional[Literal[True, False]] = None
    observationPeriod: Optional[int] = Field(
        None,
        description='It represents the observation period of the fulfilmentInfo for corresponding  ExpectationTargets, IntentExpectations and Intent.',
    )
    intentReportReference: Optional[str] = None


class AlarmListSingle(Top):
    attributes: Optional[Attributes] = None


class ManagedNFServiceSingle(Top):
    attributes: Optional[Attributes2] = None


class ManagementNodeSingle(Top):
    attributes: Optional[Attributes3] = None
    MnsAgent: Optional[List[MnsAgentSingle]] = None


class MnsAgentSingle(Top):
    attributes: Optional[Attributes4] = None


class MeContextSingle(Top):
    attributes: Optional[Attributes5] = None


class SchedulerSingle(Top):
    attributes: Optional[Attributes6] = None


class ConditionMonitorSingle(Top):
    attributes: Optional[Attributes7] = None


class SupportedNotificationsSingle(Top):
    attributes: Optional[Attributes8] = None


class MLTrainingRequestSingle(Top):
    attributes: Optional[Attributes10] = None


class MLTrainingProcessSingle(Top):
    attributes: Optional[Attributes11] = None


class MLTrainingReportSingle(Top):
    attributes: Optional[Attributes12] = None


class MLTestingRequestSingle(Top):
    attributes: Optional[Attributes14] = None


class MLTestingReportSingle(Top):
    attributes: Optional[Attributes15] = None


class MLEntityLoadingRequestSingle(Top):
    attributes: Optional[Attributes16] = None


class MLEntityLoadingPolicySingle(Top):
    attributes: Optional[Attributes17] = None


class MLEntityLoadingProcessSingle(Top):
    attributes: Optional[Attributes18] = None


class MLEntitySingle(Top):
    attributes: Optional[Attributes19] = None


class MLEntityRepositorySingle(Top):
    attributes: Optional[Attributes20] = None
    MLEntity: Optional[List[MLEntitySingle]] = None
    MLEntityCoordinationGroup: Optional[List[MLEntityCoordinationGroupSingle]] = None


class MLEntityCoordinationGroupSingle(Top):
    attributes: Optional[Attributes21] = None


class MLUpdateRequestSingle(Top):
    attributes: Optional[Attributes23] = None


class MLUpdateProcessSingle(Top):
    attributes: Optional[Attributes24] = None


class MLUpdateReportSingle(Top):
    attributes: Optional[Attributes25] = None


class AIMLInferenceReportSingle(Top):
    attributes: Optional[Attributes27] = None


class IntentReportSingle(Top):
    intentFulfilmentReport: Optional[IntentFulfilmentReport] = None
    intentConflictReports: Optional[List[IntentConflictReport]] = None
    intentFeasibilityCheckReport: Optional[IntentFeasibilityCheckReport] = None
    lastUpdatedTime: Optional[datetime] = None
    intentReference: Optional[str] = None


class IntentHandlingFunctionSingle(Top):
    intentHandlingCapabilityList: Optional[List[IntentHandlingCapability]] = None
    Intent: Optional[List[IntentSingle]] = None
    IntentReport: Optional[List[IntentReportSingle]] = None


class EcmConnectionInfoSingle(Top):
    attributes: Optional[Attributes52] = None


class EPN2Single(Top):
    attributes: Optional[Attributes57] = None


class EPN3Single(Top):
    attributes: Optional[Attributes58] = None


class EPN4Single(Top):
    attributes: Optional[Attributes59] = None


class EPN5Single(Top):
    attributes: Optional[Attributes59] = None


class EPN6Single(Top):
    attributes: Optional[Attributes59] = None


class EPN7Single(Top):
    attributes: Optional[Attributes59] = None


class EPN8Single(Top):
    attributes: Optional[Attributes59] = None


class EPN9Single(Top):
    attributes: Optional[Attributes59] = None


class EPN10Single(Top):
    attributes: Optional[Attributes59] = None


class EPN11Single(Top):
    attributes: Optional[Attributes59] = None


class EPN12Single(Top):
    attributes: Optional[Attributes59] = None


class EPN13Single(Top):
    attributes: Optional[Attributes59] = None


class EPN14Single(Top):
    attributes: Optional[Attributes59] = None


class EPN15Single(Top):
    attributes: Optional[Attributes59] = None


class EPN16Single(Top):
    attributes: Optional[Attributes59] = None


class EPN17Single(Top):
    attributes: Optional[Attributes59] = None


class EPN20Single(Top):
    attributes: Optional[Attributes59] = None


class EPN21Single(Top):
    attributes: Optional[Attributes59] = None


class EPN22Single(Top):
    attributes: Optional[Attributes59] = None


class EPN26Single(Top):
    attributes: Optional[Attributes59] = None


class EPN27Single(Top):
    attributes: Optional[Attributes59] = None


class EPN31Single(Top):
    attributes: Optional[Attributes59] = None


class EPN32Single(Top):
    attributes: Optional[Attributes79] = None


class EPN33Single(Top):
    attributes: Optional[Attributes59] = None


class EPN34Single(Top):
    attributes: Optional[Attributes59] = None


class EPS5CSingle(Top):
    attributes: Optional[Attributes59] = None


class EPS5USingle(Top):
    attributes: Optional[Attributes59] = None


class EPRxSingle(Top):
    attributes: Optional[Attributes59] = None


class EPMAPSMSCSingle(Top):
    attributes: Optional[Attributes59] = None


class EPNLSSingle(Top):
    attributes: Optional[Attributes59] = None


class EPNL2Single(Top):
    attributes: Optional[Attributes59] = None


class EPNL3Single(Top):
    attributes: Optional[Attributes59] = None


class EPNL5Single(Top):
    attributes: Optional[Attributes59] = None


class EPNL6Single(Top):
    attributes: Optional[Attributes59] = None


class EPNL9Single(Top):
    attributes: Optional[Attributes59] = None


class EPN60Single(Top):
    attributes: Optional[Attributes59] = None


class EPNpc4Single(Top):
    attributes: Optional[Attributes59] = None


class EPNpc6Single(Top):
    attributes: Optional[Attributes59] = None


class EPNpc7Single(Top):
    attributes: Optional[Attributes59] = None


class EPNpc8Single(Top):
    attributes: Optional[Attributes59] = None


class EPN88Single(Top):
    attributes: Optional[Attributes59] = None


class FiveQiDscpMappingSetSingle(Top):
    attributes: Optional[Attributes98] = None


class FiveQICharacteristicsSingle(Top):
    fiveQIValue: Optional[int] = None
    resourceType: Optional[Literal['GBR', 'NON_GBR', 'DELAY_CRITICAL_GBR']] = None
    priorityLevel: Optional[int] = None
    packetDelayBudget: Optional[int] = None
    packetErrorRate: Optional[PacketErrorRate] = None
    averagingWindow: Optional[int] = None
    maximumDataBurstVolume: Optional[int] = None


class Configurable5QISetSingle(Top):
    attributes: Optional[Attributes99] = None


class Dynamic5QISetSingle(Top):
    attributes: Optional[Attributes100] = None


class GtpUPathQoSMonitoringControlSingle(Top):
    attributes: Optional[Attributes101] = None


class QFQoSMonitoringControlSingle(Top):
    attributes: Optional[Attributes102] = None


class PredefinedPccRuleSetSingle(Top):
    attributes: Optional[Attributes103] = None


class EPN58Single(Top):
    attributes: Optional[Attributes106] = None


class EPN59Single(Top):
    attributes: Optional[Attributes106] = None


class EPN28Single(Top):
    attributes: Optional[Attributes106] = None


class EPN40Single(Top):
    attributes: Optional[Attributes106] = None


class EPN41Single(Top):
    attributes: Optional[Attributes106] = None


class EPN42Single(Top):
    attributes: Optional[Attributes106] = None


class EPN61Single(Top):
    attributes: Optional[Attributes106] = None


class EPN62Single(Top):
    attributes: Optional[Attributes106] = None


class EPN63Single(Top):
    attributes: Optional[Attributes106] = None


class EPN84Single(Top):
    attributes: Optional[Attributes106] = None


class EPN85Single(Top):
    attributes: Optional[Attributes106] = None


class EPN86Single(Top):
    attributes: Optional[Attributes106] = None


class EPN87Single(Top):
    attributes: Optional[Attributes106] = None


class EPN89Single(Top):
    attributes: Optional[Attributes106] = None


class EPN96Single(Top):
    attributes: Optional[Attributes106] = None


class EPN11mbSingle(Top):
    attributes: Optional[Attributes106] = None


class EPN16mbSingle(Top):
    attributes: Optional[Attributes106] = None


class EPNmb1Single(Top):
    attributes: Optional[Attributes106] = None


class EPN3mbSingle(Top):
    attributes: Optional[Attributes106] = None


class EPN4mbSingle(Top):
    attributes: Optional[Attributes106] = None


class EPN19mbSingle(Top):
    attributes: Optional[Attributes106] = None


class EPNmb9Single(Top):
    attributes: Optional[Attributes106] = None


class AnLFFunctionSingle(Top):
    attributes: Optional[Attributes138] = None


class EPSM12Single(Top):
    attributes: Optional[Attributes139] = None


class EPSM13Single(Top):
    attributes: Optional[Attributes139] = None


class EPSM14Single(Top):
    attributes: Optional[Attributes139] = None


class OperatorDuSingle(Top):
    gnbId: Optional[conint(ge=0, le=4294967295)] = None
    gnbIdLength: Optional[conint(ge=22, le=32)] = None
    EP_F1C: Optional[EPF1CSingle] = None
    EP_F1U: Optional[List[EPF1USingle]] = None
    configurable5QISetRef: Optional[str] = Field(
        None,
        description='This attribute is condition optional. The condition is NG-RAN Multi-Operator Core Network (NG-RAN MOCN) network sharing with operator specific 5QI is supported.',
    )
    dynamic5QISetRef: Optional[str] = Field(
        None,
        description='This attribute is condition optional. The condition is NG-RAN Multi-Operator Core Network (NG-RAN MOCN) network sharing with operator specific 5QI is supported.',
    )
    NrOperatorCellDu: Optional[List[NrOperatorCellDuSingle]] = None


class BWPSetSingle(Top):
    bWPlist: Optional[List[str]] = Field(None, max_items=12)


class NrOperatorCellDuSingle(Top):
    cellLocalId: Optional[int] = None
    administrativeState: Optional[Literal['LOCKED', 'UNLOCKED']] = None
    plmnInfoList: Optional[List[PlmnInfo]] = None
    nrTac: Optional[constr(regex=r'(^[A-Fa-f0-9]{4}$)|(^[A-Fa-f0-9]{6}$)')] = None


class NRFrequencySingle(Top):
    attributes: Optional[Attributes147] = None


class EUtranFrequencySingle(Top):
    attributes: Optional[Attributes148] = None


class CommonBeamformingFunctionSingle(Top):
    attributes: Optional[Attributes151] = None
    Beam: Optional[List[BeamSingle]] = None


class BeamSingle(Top):
    attributes: Optional[Attributes152] = None


class RRMPolicyRatioSingle(Top):
    attributes: Optional[Attributes153] = None


class NRCellRelationSingle(Top):
    attributes: Optional[Attributes154] = None


class NRFreqRelationSingle(Top):
    attributes: Optional[Attributes156] = None


class EUtranFreqRelationSingle(Top):
    attributes: Optional[Attributes157] = None


class DANRManagementFunctionSingle(Top):
    attributes: Optional[Attributes158] = None


class DESManagementFunctionSingle(Top):
    attributes: Optional[Attributes159] = None


class DRACHOptimizationFunctionSingle(Top):
    attributes: Optional[Attributes160] = None


class DMROFunctionSingle(Top):
    attributes: Optional[Attributes161] = None


class DLBOFunctionSingle(Top):
    attributes: Optional[Attributes162] = None


class DPCIConfigurationFunctionSingle(Top):
    attributes: Optional[Attributes163] = None


class CPCIConfigurationFunctionSingle(Top):
    attributes: Optional[Attributes164] = None


class CESManagementFunctionSingle(Top):
    attributes: Optional[Attributes165] = None


class RimRSGlobalSingle(Top):
    attributes: Optional[Attributes166] = None
    RimRSSet: Optional[List[RimRSSetSingle]] = None


class RimRSSetSingle(Top):
    attributes: Optional[Attributes167] = None


class EPXnCSingle(Top):
    attributes: Optional[Attributes174] = None


class EPE1Single(Top):
    attributes: Optional[Attributes174] = None


class EPF1CSingle(Top):
    attributes: Optional[Attributes174] = None


class EPNgCSingle(Top):
    attributes: Optional[Attributes174] = None


class EPX2CSingle(Top):
    attributes: Optional[Attributes174] = None


class EPXnUSingle(Top):
    attributes: Optional[Attributes174] = None


class EPF1USingle(Top):
    attributes: Optional[Attributes180] = None


class EPNgUSingle(Top):
    attributes: Optional[Attributes180] = None


class EPX2USingle(Top):
    attributes: Optional[Attributes182] = None


class EPS1USingle(Top):
    attributes: Optional[Attributes182] = None


class CCOFunctionSingle(Top):
    attributes: Optional[Attributes184] = None


class CCOParametersAttr(Top):
    attributes: Optional[Attributes185] = None


class NTNFunctionSingle(Top):
    attributes: Optional[Attributes186] = None
    ephemerisInfoSet: Optional[List[EphemerisInfoSetSingle]] = None


class EphemerisInfoSetSingle(Top):
    attributes: Optional[Attributes187] = None


class NetworkSliceSingle(Top):
    attributes: Optional[Attributes188] = None


class NetworkSliceSubnetSingle(Top):
    attributes: Optional[Attributes189] = None


class EPTransportSingle(Top):
    attributes: Optional[Attributes190] = None


class NetworkSliceSubnetProviderCapabilitiesSingle(Top):
    attributes: Optional[Attributes191] = None


class FeasibilityCheckAndReservationJobSingle(Top):
    attributes: Optional[Attributes192] = None


class NetworkSliceControllerSingle(Top):
    attributes: Optional[Attributes193] = None


class NetworkSliceSubnetControllerSingle(Top):
    attributes: Optional[Attributes194] = None


class IsolationProfileSingle(Top):
    attributes: Optional[Attributes195] = None


class MLTrainingFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes9] = None
    MLTrainingRequest: Optional[List[MLTrainingRequestSingle]] = None
    MLTrainingProcess: Optional[List[MLTrainingProcessSingle]] = None
    MLTrainingReport: Optional[List[MLTrainingReportSingle]] = None
    ThresholdMonitors: Optional[str] = None


class MLTestingFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes13] = None
    MLTestingRequest: Optional[List[MLTestingRequestSingle]] = None
    MLTestingReport: Optional[List[MLTestingRequestSingle]] = None


class MLUpdateFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes22] = None
    MLUpdateRequest: Optional[List[MLUpdateRequestSingle]] = None
    MLUpdateProcess: Optional[List[MLUpdateProcessSingle]] = None
    MLUpdateReport: Optional[List[MLUpdateReportSingle]] = None


class AIMLInferenceFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes26] = None
    AIMLInferenceReport: Optional[List[AIMLInferenceReportSingle]] = None


class AIMLInferenceEmulationFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes28] = None


class AmfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes29] = None
    EP_N2: Optional[List[EPN2Single]] = None
    EP_N8: Optional[List[EPN8Single]] = None
    EP_N11: Optional[List[EPN11Single]] = None
    EP_N12: Optional[List[EPN12Single]] = None
    EP_N14: Optional[List[EPN14Single]] = None
    EP_N15: Optional[List[EPN15Single]] = None
    EP_N17: Optional[List[EPN17Single]] = None
    EP_N20: Optional[List[EPN20Single]] = None
    EP_N22: Optional[List[EPN22Single]] = None
    EP_N26: Optional[List[EPN26Single]] = None
    EP_NLS: Optional[List[EPNLSSingle]] = None
    EP_NL2: Optional[List[EPNL2Single]] = None
    EP_N58: Optional[List[EPN58Single]] = None
    EP_N41: Optional[List[EPN41Single]] = None
    EP_N42: Optional[List[EPN42Single]] = None
    EP_N89: Optional[List[EPN89Single]] = None
    EP_N11mb: Optional[List[EPN11mbSingle]] = None


class AmfSetSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes30] = None


class AmfRegionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes31] = None


class SmfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes32] = None
    EP_N4: Optional[List[EPN4Single]] = None
    EP_N7: Optional[List[EPN7Single]] = None
    EP_N10: Optional[List[EPN10Single]] = None
    EP_N11: Optional[List[EPN11Single]] = None
    EP_N16: Optional[List[EPN16Single]] = None
    EP_S5C: Optional[List[EPS5CSingle]] = None
    EP_N40: Optional[List[EPN40Single]] = None
    EP_N88: Optional[List[EPN88Single]] = None
    EP_N16mb: Optional[List[EPN16mbSingle]] = None
    FiveQiDscpMappingSet: Optional[FiveQiDscpMappingSetSingle] = None
    GtpUPathQoSMonitoringControl: Optional[GtpUPathQoSMonitoringControlSingle] = None
    QFQoSMonitoringControl: Optional[QFQoSMonitoringControlSingle] = None
    PredefinedPccRuleSet: Optional[PredefinedPccRuleSetSingle] = None


class UpfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes33] = None
    EP_N3: Optional[List[EPN3Single]] = None
    EP_N4: Optional[List[EPN4Single]] = None
    EP_N6: Optional[List[EPN6Single]] = None
    EP_N9: Optional[List[EPN9Single]] = None
    EP_S5U: Optional[List[EPS5USingle]] = None


class N3iwfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes34] = None
    EP_N3: Optional[List[EPN3Single]] = None
    EP_N4: Optional[List[EPN4Single]] = None


class PcfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes35] = None
    EP_N5: Optional[List[EPN5Single]] = None
    EP_N7: Optional[List[EPN7Single]] = None
    EP_N15: Optional[List[EPN15Single]] = None
    EP_N16: Optional[List[EPN16Single]] = None
    EP_N28: Optional[List[EPN28Single]] = None
    EP_Rx: Optional[List[EPRxSingle]] = None
    EP_N84: Optional[List[EPN84Single]] = None
    PredefinedPccRuleSet: Optional[PredefinedPccRuleSetSingle] = None


class AusfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes36] = None
    EP_N12: Optional[List[EPN12Single]] = None
    EP_N13: Optional[List[EPN13Single]] = None
    EP_N61: Optional[List[EPN61Single]] = None


class UdmFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes37] = None
    EP_N8: Optional[List[EPN8Single]] = None
    EP_N10: Optional[List[EPN10Single]] = None
    EP_N13: Optional[List[EPN13Single]] = None
    EP_N59: Optional[List[EPN13Single]] = None
    EP_NL6: Optional[List[EPNL6Single]] = None
    EP_N87: Optional[List[EPN87Single]] = None


class UdrFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes38] = None


class UdsfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes39] = None


class NrfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes40] = None
    EP_N27: Optional[List[EPN27Single]] = None
    EP_N96: Optional[List[EPN96Single]] = None
    EP_SM14: Optional[List[EPSM14Single]] = None


class NssfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes41] = None
    EP_N22: Optional[List[EPN22Single]] = None
    EP_N31: Optional[List[EPN31Single]] = None
    EP_N34: Optional[List[EPN34Single]] = None


class SmsfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes42] = None
    EP_N20: Optional[List[EPN20Single]] = None
    EP_N21: Optional[List[EPN21Single]] = None
    EP_MAP_SMSC: Optional[List[EPMAPSMSCSingle]] = None


class LmfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes43] = None
    EP_NLS: Optional[List[EPNLSSingle]] = None


class NgeirFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes44] = None
    EP_N17: Optional[List[EPN17Single]] = None


class SeppFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes45] = None
    EP_N32: Optional[List[EPN32Single]] = None


class NwdafFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes46] = None
    EP_NL3: Optional[List[EPNL3Single]] = None
    EP_N34: Optional[List[EPN34Single]] = None
    AnLFFunction: Optional[AnLFFunctionSingle] = None


class ScpFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes47] = None
    EP_SM13: Optional[List[EPSM13Single]] = None


class NefFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes48] = None
    EP_N33: Optional[List[EPN33Single]] = None
    EP_NL5: Optional[List[EPNL5Single]] = None
    EP_N85: Optional[List[EPN85Single]] = None
    EP_N62: Optional[List[EPN62Single]] = None
    EP_N63: Optional[List[EPN63Single]] = None


class NsacfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes49] = None
    EP_N60: Optional[List[EPN60Single]] = None


class DDNMFFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes50] = None
    EP_Npc4: Optional[List[EPNpc4Single]] = None
    EP_Npc6: Optional[List[EPNpc6Single]] = None
    EP_Npc7: Optional[List[EPNpc7Single]] = None
    EP_Npc8: Optional[List[EPNpc8Single]] = None


class EASDFFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes51] = None
    EP_N88: Optional[List[EPN88Single]] = None


class ExternalAmfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes53] = None


class ExternalNrfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes54] = None


class ExternalNssfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes54] = None


class ExternalSeppFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes56] = None


class AfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes104] = None
    EP_N5: Optional[List[EPN5Single]] = None
    EP_N86: Optional[List[EPN86Single]] = None
    EP_N63: Optional[List[EPN63Single]] = None
    EP_N62: Optional[List[EPN62Single]] = None


class NssaafFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes105] = None


class DccfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes108] = None


class MfafFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes109] = None


class ChfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes110] = None
    EP_N28: Optional[List[EPN28Single]] = None
    EP_N40: Optional[List[EPN40Single]] = None
    EP_N41: Optional[List[EPN41Single]] = None
    EP_N42: Optional[List[EPN42Single]] = None


class AanfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes115] = None
    EP_N61: Optional[List[EPN61Single]] = None
    EP_N62: Optional[List[EPN62Single]] = None
    EP_N63: Optional[List[EPN63Single]] = None


class GmlcFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes119] = None
    EP_NL2: Optional[List[EPNL2Single]] = None
    EP_NL3: Optional[List[EPNL3Single]] = None
    EP_NL5: Optional[List[EPNL5Single]] = None
    EP_NL6: Optional[List[EPNL6Single]] = None
    EP_NL9: Optional[List[EPNL9Single]] = None


class TsctsfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes120] = None
    EP_N84: Optional[List[EPN84Single]] = None
    EP_N85: Optional[List[EPN85Single]] = None
    EP_N86: Optional[List[EPN86Single]] = None
    EP_N87: Optional[List[EPN87Single]] = None
    EP_N89: Optional[List[EPN89Single]] = None
    EP_N96: Optional[List[EPN96Single]] = None


class BsfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes127] = None


class MbSmfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes128] = None
    EP_N11mb: Optional[List[EPN11mbSingle]] = None
    EP_N16mb: Optional[List[EPN16mbSingle]] = None
    EP_Nmb1: Optional[List[EPNmb1Single]] = None
    EP_N4mb: Optional[List[EPN4mbSingle]] = None


class MbUpfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes132] = None
    EP_N3mb: Optional[List[EPN3mbSingle]] = None
    EP_N4mb: Optional[List[EPN4mbSingle]] = None
    EP_N19mb: Optional[List[EPN19mbSingle]] = None
    EP_Nmb9: Optional[List[EPNmb9Single]] = None


class MnpfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes133] = None
    EP_SM12: Optional[List[EPSM12Single]] = None
    EP_SM13: Optional[List[EPSM13Single]] = None
    EP_SM14: Optional[List[EPSM14Single]] = None


class GnbDuFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes142] = None
    RRMPolicyRatio: Optional[List[RRMPolicyRatioSingle]] = None
    NrCellDu: Optional[List[NrCellDuSingle]] = None
    Bwp_Multiple: Optional[List[BwpSingle]] = Field(None, alias='Bwp-Multiple')
    NrSectorCarrier_Multiple: Optional[List[NrSectorCarrierSingle]] = Field(
        None, alias='NrSectorCarrier-Multiple'
    )
    EP_F1C: Optional[EPF1CSingle] = None
    EP_F1U: Optional[List[EPF1USingle]] = None
    DRACHOptimizationFunction: Optional[DRACHOptimizationFunctionSingle] = None
    OperatorDU: Optional[List[OperatorDuSingle]] = None
    BWPSet: Optional[List[BWPSetSingle]] = None
    Configurable5QISet: Optional[List[Configurable5QISetSingle]] = None
    Dynamic5QISet: Optional[List[Dynamic5QISetSingle]] = None


class GnbCuUpFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes143] = None
    RRMPolicyRatio: Optional[List[RRMPolicyRatioSingle]] = None
    EP_E1: Optional[EPE1Single] = None
    EP_XnU: Optional[List[EPXnUSingle]] = None
    EP_F1U: Optional[List[EPF1USingle]] = None
    EP_NgU: Optional[List[EPNgUSingle]] = None
    EP_X2U: Optional[List[EPX2USingle]] = None
    EP_S1U: Optional[List[EPS1USingle]] = None
    Configurable5QISet: Optional[List[Configurable5QISetSingle]] = None
    Dynamic5QISet: Optional[List[Dynamic5QISetSingle]] = None


class GnbCuCpFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes144] = None
    RRMPolicyRatio: Optional[List[RRMPolicyRatioSingle]] = None
    NrCellCu: Optional[List[NrCellCuSingle]] = None
    EP_XnC: Optional[List[EPXnCSingle]] = None
    EP_E1: Optional[List[EPE1Single]] = None
    EP_F1C: Optional[List[EPF1CSingle]] = None
    EP_NgC: Optional[List[EPNgCSingle]] = None
    EP_X2C: Optional[List[EPX2CSingle]] = None
    DANRManagementFunction: Optional[DANRManagementFunctionSingle] = None
    DESManagementFunction: Optional[DESManagementFunctionSingle] = None
    DMROFunction: Optional[DMROFunctionSingle] = None
    DLBOFunction: Optional[DLBOFunctionSingle] = None
    Configurable5QISet: Optional[List[Configurable5QISetSingle]] = None
    Dynamic5QISet: Optional[List[Dynamic5QISetSingle]] = None


class NrCellCuSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes145] = None
    RRMPolicyRatio: Optional[List[RRMPolicyRatioSingle]] = None
    NRCellRelation: Optional[List[NRCellRelationSingle]] = None
    EUtranCellRelation: Optional[List[EUtranCellRelationSingle]] = None
    NRFreqRelation: Optional[List[NRFreqRelationSingle]] = None
    EUtranFreqRelation: Optional[List[EUtranFreqRelationSingle]] = None
    DESManagementFunction: Optional[DESManagementFunctionSingle] = None
    DMROFunction: Optional[DMROFunctionSingle] = None
    DLBOFunction: Optional[DLBOFunctionSingle] = None
    CESManagementFunction: Optional[CESManagementFunctionSingle] = None
    DPCIConfigurationFunction: Optional[DPCIConfigurationFunctionSingle] = None


class NrCellDuSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes146] = None
    RRMPolicyRatio: Optional[List[RRMPolicyRatioSingle]] = None
    CPCIConfigurationFunction: Optional[CPCIConfigurationFunctionSingle] = None
    DRACHOptimizationFunction: Optional[DRACHOptimizationFunctionSingle] = None


class NrSectorCarrierSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes149] = None
    CommonBeamformingFunction: Optional[CommonBeamformingFunctionSingle] = None


class BwpSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes150] = None


class EUtranCellRelationSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes155] = None


class ExternalGnbDuFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes168] = None
    EP_F1C: Optional[List[EPF1CSingle]] = None
    EP_F1U: Optional[List[EPF1USingle]] = None


class ExternalGnbCuUpFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes168] = None
    EP_E1: Optional[List[EPE1Single]] = None
    EP_F1U: Optional[List[EPF1USingle]] = None
    EP_XnU: Optional[List[EPXnUSingle]] = None


class ExternalGnbCuCpFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes170] = None
    ExternalNrCellCu: Optional[List[ExternalNrCellCuSingle]] = None
    EP_XnC: Optional[List[EPXnCSingle]] = None
    EP_E1: Optional[List[EPE1Single]] = None
    EP_F1C: Optional[List[EPF1CSingle]] = None


class ExternalNrCellCuSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes171] = None


class ExternalENBFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes172] = None
    ExternalEUTranCell: Optional[List[ExternalEUTranCellSingle]] = None


class ExternalEUTranCellSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes173] = None


class ManagedElementSingle(
    Top,
    ManagedElementAttr,
    ManagedElementNcO,
    ManagedElementNcOAiMlNrm,
    ManagedElementNcO5GcNrm,
):
    pass


class SubNetworkSingle(
    Top,
    SubNetworkAttr,
    SubNetworkNcO,
    SubNetworkNcOAiMlNrm,
    SubNetworkNcOIntentNrm,
    SubNetworkNcOSliceNrm,
    SubNetworkNcONrNrm,
    SubNetworkNcO5GcNrm,
):
    pass


class IntentMncc(IntentSingle):
    userLabel: Optional[str] = None
    intentExpectations: Optional[
        List[
            Union[
                NewNetworkExpectation,
                New5GFlowExpectation,
                NewL2VPNIntentExpectation,
                NewTFSL2VPNIntentExpectation,
            ]
        ]
    ] = Field(None, description='Expectations for all the mncc adaptors')
    intentContexts: Optional[List[NEMOIntentContext]] = Field(
        None,
        description='It describes the list of Context(s) in mNCC which represents the constraints and conditions that should apply  for the entire intent even if there may be specific contexts defined for specific parts of the intent ',
    )


class IntentBssf(IntentSingle):
    userLabel: Optional[str] = None
    intentExpectations: Optional[List[Union[IntentExpectation, Any]]] = Field(
        None, description='Expectations for all the bsff green slices'
    )
    intentContexts: Optional[
        List[
            Union[GreenIntentContext, NsmfNameIntentContext, NsmfNamespaceIntentContext]
        ]
    ] = Field(
        None,
        description='It describes the list of Context(s) in BSSF which represents the constraints and conditions that should apply  for the entire intent even if there may be specific contexts defined for specific parts of the intent ',
    )


class CCOWeakCoverageParametersSingle(CCOParametersAttr):
    pass


class CCOPilotPollutionParametersSingle(CCOParametersAttr):
    pass


class CCOOvershootCoverageParametersSingle(CCOParametersAttr):
    pass


IntentNrmg.update_forward_refs()
Top.update_forward_refs()
Resource.update_forward_refs()
TopAttr.update_forward_refs()
SubNetworkNcO.update_forward_refs()
ManagedElementNcO.update_forward_refs()
ManagedFunctionNcO.update_forward_refs()
VsDataContainerSingle.update_forward_refs()
SubNetworkNcOAiMlNrm.update_forward_refs()
ManagedElementNcOAiMlNrm.update_forward_refs()
MLEntityLoadingRequestMultiple.update_forward_refs()
MLEntityLoadingProcessMultiple.update_forward_refs()
MLEntityLoadingPolicyMultiple.update_forward_refs()
AIMLInferenceEmulationFunctionMultiple.update_forward_refs()
ResourcesAiMlNrm.update_forward_refs()
SubNetworkNcOIntentNrm.update_forward_refs()
SubNetworkNcOSliceNrm.update_forward_refs()
SubNetworkNcONrNrm.update_forward_refs()
SubNetworkNcO5GcNrm.update_forward_refs()
ManagedElementNcO5GcNrm.update_forward_refs()
NsacfFunctionMultiple.update_forward_refs()
ExternalSeppFunctionNultiple.update_forward_refs()
EPN59Multiple.update_forward_refs()
Resources5gcNrm.update_forward_refs()
ManagedElementNcONrNrm.update_forward_refs()
Attributes184.update_forward_refs()
ResourcesNrNrm.update_forward_refs()
ResourcesSliceNrm.update_forward_refs()
SubNetworkMultiple.update_forward_refs()
ManagedElementMultiple.update_forward_refs()
IntentSingle.update_forward_refs()
AlarmListSingle.update_forward_refs()
ManagedNFServiceSingle.update_forward_refs()
ManagementNodeSingle.update_forward_refs()
MnsAgentSingle.update_forward_refs()
MeContextSingle.update_forward_refs()
SchedulerSingle.update_forward_refs()
ConditionMonitorSingle.update_forward_refs()
SupportedNotificationsSingle.update_forward_refs()
MLTrainingRequestSingle.update_forward_refs()
MLTrainingProcessSingle.update_forward_refs()
MLTrainingReportSingle.update_forward_refs()
MLTestingRequestSingle.update_forward_refs()
MLTestingReportSingle.update_forward_refs()
MLEntityLoadingRequestSingle.update_forward_refs()
MLEntityLoadingPolicySingle.update_forward_refs()
MLEntityLoadingProcessSingle.update_forward_refs()
MLEntitySingle.update_forward_refs()
MLEntityRepositorySingle.update_forward_refs()
MLEntityCoordinationGroupSingle.update_forward_refs()
MLUpdateRequestSingle.update_forward_refs()
MLUpdateProcessSingle.update_forward_refs()
MLUpdateReportSingle.update_forward_refs()
AIMLInferenceReportSingle.update_forward_refs()
IntentReportSingle.update_forward_refs()
IntentHandlingFunctionSingle.update_forward_refs()
EcmConnectionInfoSingle.update_forward_refs()
EPN2Single.update_forward_refs()
EPN3Single.update_forward_refs()
EPN4Single.update_forward_refs()
EPN5Single.update_forward_refs()
EPN6Single.update_forward_refs()
EPN7Single.update_forward_refs()
EPN8Single.update_forward_refs()
EPN9Single.update_forward_refs()
EPN10Single.update_forward_refs()
EPN11Single.update_forward_refs()
EPN12Single.update_forward_refs()
EPN13Single.update_forward_refs()
EPN14Single.update_forward_refs()
EPN15Single.update_forward_refs()
EPN16Single.update_forward_refs()
EPN17Single.update_forward_refs()
EPN20Single.update_forward_refs()
EPN21Single.update_forward_refs()
EPN22Single.update_forward_refs()
EPN26Single.update_forward_refs()
EPN27Single.update_forward_refs()
EPN31Single.update_forward_refs()
EPN32Single.update_forward_refs()
EPN33Single.update_forward_refs()
EPN34Single.update_forward_refs()
EPS5CSingle.update_forward_refs()
EPS5USingle.update_forward_refs()
EPRxSingle.update_forward_refs()
EPMAPSMSCSingle.update_forward_refs()
EPNLSSingle.update_forward_refs()
EPNL2Single.update_forward_refs()
EPNL3Single.update_forward_refs()
EPNL5Single.update_forward_refs()
EPNL6Single.update_forward_refs()
EPNL9Single.update_forward_refs()
EPN60Single.update_forward_refs()
EPNpc4Single.update_forward_refs()
EPNpc6Single.update_forward_refs()
EPNpc7Single.update_forward_refs()
EPNpc8Single.update_forward_refs()
EPN88Single.update_forward_refs()
FiveQiDscpMappingSetSingle.update_forward_refs()
FiveQICharacteristicsSingle.update_forward_refs()
Configurable5QISetSingle.update_forward_refs()
Dynamic5QISetSingle.update_forward_refs()
GtpUPathQoSMonitoringControlSingle.update_forward_refs()
QFQoSMonitoringControlSingle.update_forward_refs()
PredefinedPccRuleSetSingle.update_forward_refs()
EPN58Single.update_forward_refs()
EPN59Single.update_forward_refs()
EPN28Single.update_forward_refs()
EPN40Single.update_forward_refs()
EPN41Single.update_forward_refs()
EPN42Single.update_forward_refs()
EPN61Single.update_forward_refs()
EPN62Single.update_forward_refs()
EPN63Single.update_forward_refs()
EPN84Single.update_forward_refs()
EPN85Single.update_forward_refs()
EPN86Single.update_forward_refs()
EPN87Single.update_forward_refs()
EPN89Single.update_forward_refs()
EPN96Single.update_forward_refs()
EPN11mbSingle.update_forward_refs()
EPN16mbSingle.update_forward_refs()
EPNmb1Single.update_forward_refs()
EPN3mbSingle.update_forward_refs()
EPN4mbSingle.update_forward_refs()
EPN19mbSingle.update_forward_refs()
EPNmb9Single.update_forward_refs()
AnLFFunctionSingle.update_forward_refs()
EPSM12Single.update_forward_refs()
EPSM13Single.update_forward_refs()
EPSM14Single.update_forward_refs()
OperatorDuSingle.update_forward_refs()
BWPSetSingle.update_forward_refs()
NrOperatorCellDuSingle.update_forward_refs()
NRFrequencySingle.update_forward_refs()
EUtranFrequencySingle.update_forward_refs()
CommonBeamformingFunctionSingle.update_forward_refs()
BeamSingle.update_forward_refs()
RRMPolicyRatioSingle.update_forward_refs()
NRCellRelationSingle.update_forward_refs()
NRFreqRelationSingle.update_forward_refs()
EUtranFreqRelationSingle.update_forward_refs()
DANRManagementFunctionSingle.update_forward_refs()
DESManagementFunctionSingle.update_forward_refs()
DRACHOptimizationFunctionSingle.update_forward_refs()
DMROFunctionSingle.update_forward_refs()
DLBOFunctionSingle.update_forward_refs()
DPCIConfigurationFunctionSingle.update_forward_refs()
CPCIConfigurationFunctionSingle.update_forward_refs()
CESManagementFunctionSingle.update_forward_refs()
RimRSGlobalSingle.update_forward_refs()
RimRSSetSingle.update_forward_refs()
EPXnCSingle.update_forward_refs()
EPE1Single.update_forward_refs()
EPF1CSingle.update_forward_refs()
EPNgCSingle.update_forward_refs()
EPX2CSingle.update_forward_refs()
EPXnUSingle.update_forward_refs()
EPF1USingle.update_forward_refs()
EPNgUSingle.update_forward_refs()
EPX2USingle.update_forward_refs()
EPS1USingle.update_forward_refs()
CCOFunctionSingle.update_forward_refs()
CCOParametersAttr.update_forward_refs()
NTNFunctionSingle.update_forward_refs()
EphemerisInfoSetSingle.update_forward_refs()
NetworkSliceSingle.update_forward_refs()
NetworkSliceSubnetSingle.update_forward_refs()
EPTransportSingle.update_forward_refs()
NetworkSliceSubnetProviderCapabilitiesSingle.update_forward_refs()
FeasibilityCheckAndReservationJobSingle.update_forward_refs()
NetworkSliceControllerSingle.update_forward_refs()
NetworkSliceSubnetControllerSingle.update_forward_refs()
IsolationProfileSingle.update_forward_refs()
MLTrainingFunctionSingle.update_forward_refs()
MLTestingFunctionSingle.update_forward_refs()
MLUpdateFunctionSingle.update_forward_refs()
AIMLInferenceFunctionSingle.update_forward_refs()
AIMLInferenceEmulationFunctionSingle.update_forward_refs()
AmfFunctionSingle.update_forward_refs()
AmfSetSingle.update_forward_refs()
AmfRegionSingle.update_forward_refs()
SmfFunctionSingle.update_forward_refs()
UpfFunctionSingle.update_forward_refs()
N3iwfFunctionSingle.update_forward_refs()
PcfFunctionSingle.update_forward_refs()
AusfFunctionSingle.update_forward_refs()
UdmFunctionSingle.update_forward_refs()
UdrFunctionSingle.update_forward_refs()
UdsfFunctionSingle.update_forward_refs()
NrfFunctionSingle.update_forward_refs()
NssfFunctionSingle.update_forward_refs()
SmsfFunctionSingle.update_forward_refs()
LmfFunctionSingle.update_forward_refs()
NgeirFunctionSingle.update_forward_refs()
SeppFunctionSingle.update_forward_refs()
NwdafFunctionSingle.update_forward_refs()
ScpFunctionSingle.update_forward_refs()
NefFunctionSingle.update_forward_refs()
NsacfFunctionSingle.update_forward_refs()
DDNMFFunctionSingle.update_forward_refs()
EASDFFunctionSingle.update_forward_refs()
ExternalAmfFunctionSingle.update_forward_refs()
ExternalNrfFunctionSingle.update_forward_refs()
ExternalNssfFunctionSingle.update_forward_refs()
ExternalSeppFunctionSingle.update_forward_refs()
AfFunctionSingle.update_forward_refs()
NssaafFunctionSingle.update_forward_refs()
DccfFunctionSingle.update_forward_refs()
MfafFunctionSingle.update_forward_refs()
ChfFunctionSingle.update_forward_refs()
AanfFunctionSingle.update_forward_refs()
GmlcFunctionSingle.update_forward_refs()
TsctsfFunctionSingle.update_forward_refs()
BsfFunctionSingle.update_forward_refs()
MbSmfFunctionSingle.update_forward_refs()
MbUpfFunctionSingle.update_forward_refs()
MnpfFunctionSingle.update_forward_refs()
GnbDuFunctionSingle.update_forward_refs()
GnbCuUpFunctionSingle.update_forward_refs()
GnbCuCpFunctionSingle.update_forward_refs()
NrCellCuSingle.update_forward_refs()
NrCellDuSingle.update_forward_refs()
NrSectorCarrierSingle.update_forward_refs()
BwpSingle.update_forward_refs()
EUtranCellRelationSingle.update_forward_refs()
ExternalGnbDuFunctionSingle.update_forward_refs()
ExternalGnbCuUpFunctionSingle.update_forward_refs()
ExternalGnbCuCpFunctionSingle.update_forward_refs()
ExternalNrCellCuSingle.update_forward_refs()
ExternalENBFunctionSingle.update_forward_refs()
ExternalEUTranCellSingle.update_forward_refs()
ManagedElementSingle.update_forward_refs()
SubNetworkSingle.update_forward_refs()
IntentMncc.update_forward_refs()
IntentBssf.update_forward_refs()
CCOWeakCoverageParametersSingle.update_forward_refs()
CCOPilotPollutionParametersSingle.update_forward_refs()
CCOOvershootCoverageParametersSingle.update_forward_refs()
